/**
 * poreprober - Getting basic structural descriptors for porous materials
 * @version v0.1.0
 * @link https://github.com/cheminfo/poreprober#readme
 * @license MIT
 */
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.PoreProber = {}));
}(this, (function (exports) { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, basedir, module) {
		return module = {
			path: basedir,
			exports: {},
			require: function (path, base) {
				return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
			}
		}, fn(module, module.exports), module.exports;
	}

	function commonjsRequire () {
		throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
	}

	var tokens = createCommonjsModule(function (module) {
	  /* Rules taken from the technical specification for CIF 1.1 as seen at:
	  
	      https://www.iucr.org/resources/cif/spec/version1.1/cifsyntax
	  */

	  /* CIF format standard tokens in RegExp form
	  
	  These Regular Expressions are meant to embody the standard syntax of CIF
	  files as found at the URL above. However, they will not all be used in
	  practice, as some needed features (especially the look-behind assertions) are
	  relatively new and may not be supported for all users.
	  
	  */

	  var sp = ' ';
	  var ht = '\\t';
	  var eol = '\\n'; // Carriage return missing for now; need to figure out how to make it work...

	  /*
	  
	  <OrdinaryChar>:
	  
	  { '!' | '%' | '&' | '(' | ')' | '*' | '+' | ',' | '-' | '.' | '/' | '0' | '1' 
	  | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | ':' | '<' | '=' | '>' | '?' 
	  | '@' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' 
	  | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' 
	  | 'Z' | '\' | '^' | '`' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' 
	  | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' 
	  | 'w' | 'x' | 'y' | 'z' | '{' | '|' | '}' | '~' }
	   */

	  var ordinary_char = "a-zA-Z0-9!%&\(\)*+,\-.\\/:<=>\?@\\^`\{\Â¦\}~";
	  module.exports.ordinary_char = "[" + ordinary_char + "]";
	  /*
	  
	  <NonBlankChar>:
	  
	  <OrdinaryChar> | <double_quote> | '#' | '$' | <single_quote> | '_' |';' | '[' 
	  | ']' 
	   */

	  var nonblank_char = ordinary_char + "\"#$'_;\\[\\]";
	  module.exports.nonblank_char = "[" + nonblank_char + "]"; // These variations are useful for strings with quotes

	  var nonblank_char_nosingle = ordinary_char + "\"#$_;\\[\\]";
	  var nonblank_char_nodouble = ordinary_char + "#$'_;\\[\\]";
	  /*
	  
	  <TextLeadChar>:
	  
	  <OrdinaryChar> | <double_quote> | '#' | '$' | <single_quote> | '_' | <SP> | 
	  <HT> |'[' | ']' 
	   */

	  var textlead_char = ordinary_char + "\"#$'_\\[\\]" + sp + ht;
	  module.exports.textlead_char = "[" + textlead_char + "]";
	  /*
	  
	  <AnyPrintChar>:
	  
	  <OrdinaryChar> | <double_quote> | '#' | '$' | <single_quote> | '_' | <SP> |
	  <HT> | ';' | '[' | ']'  
	   */

	  var anyprint_char = nonblank_char + sp + ht;
	  module.exports.anyprint_char = "[" + anyprint_char + "]";
	  /*
	  
	  <Digit>
	  
	  { '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' }
	   */

	  var digit = '0-9';
	  module.exports.digit = "[" + digit + "]";
	  /*
	  
	  <Comments>
	  
	  { '#' {<AnyPrintChar>}* <eol>}+ 
	   */

	  var comments = "(?:#[" + anyprint_char + "]*" + eol + ")+";
	  module.exports.comments = comments;
	  /*
	  
	  <TokenizedComments>
	  
	  { <SP> | <HT> | <eol> |}+ <Comments>    
	   */

	  var tok_comments = "[" + sp + ht + eol + "]+" + comments;
	  module.exports.tok_comments = tok_comments;
	  /*
	  
	  <WhiteSpace>
	  
	  { <SP> | <HT> | <eol> | <TokenizedComments>}+   
	   */

	  var whitespace = "(?:" + tok_comments + "|" + sp + "|" + ht + "|" + eol + ")+";
	  module.exports.whitespace = whitespace;
	  /*
	  
	  <SemiColonTextField>
	  
	  ';' { {<AnyPrintChar>}* <eol>
	  {{<TextLeadChar> {<AnyPrintChar>}*}? <eol>}*
	  } ';'
	   */

	  var semicolontext = ";[" + anyprint_char + "]*" + eol + "(?:(?:[" + textlead_char + "][" + anyprint_char + "]*)?" + eol + ")*;";
	  module.exports.semicolontext = semicolontext;
	  /*
	  
	  <SingleQuotedString>
	  
	  <single_quote>{<AnyPrintChar>}* <single_quote>
	   */

	  var squotestring = "'[" + nonblank_char_nosingle + sp + ht + "]*'";
	  module.exports.squotestring = squotestring;
	  /*
	  
	  <DoubleQuotedString>
	  
	  <double_quote>{<AnyPrintChar>}* <double_quote>
	   */

	  var dquotestring = '"[' + nonblank_char_nodouble + sp + ht + ']*"';
	  module.exports.dquotestring = dquotestring;
	  /* 
	  
	  <UnquotedString>
	  
	  <eol><OrdinaryChar> {<NonBlankChar>}*   
	  or 
	  <eol><OrdinaryChar> {<NonBlankChar>}*   
	  <noteol>{<OrdinaryChar>|';'} {<NonBlankChar>}
	  
	  NOTE: this is troublesome because in theory it requires lookbehinds.
	  We will try not to use it in practice. This is an approximation
	  **/

	  var uquotestring = "[" + eol + sp + ht + "][" + ordinary_char + "][" + nonblank_char + "]*";
	  module.exports.uquotestring = uquotestring;
	  /*
	  
	  <QuotedString> 
	  
	  <SingleQuotedString> | <DoubleQuotedString>
	  */

	  var quotestring = "(?:" + squotestring + "|" + dquotestring + ")";
	  module.exports.quotestring = quotestring;
	  /*
	  
	  <CharString>
	  
	  <UnquotedString> | <SingleQuotedString> | <DoubleQuotedString>  
	   */

	  var chrstring = "(?:" + squotestring + "|" + dquotestring + "|" + uquotestring + ")";
	  module.exports.chrstring = chrstring;
	  /*
	  
	  <UnsignedInteger>
	  
	  { <Digit> }+
	   */

	  var unsigned_int = "[" + digit + "]+";
	  module.exports.unsigned_int = unsigned_int;
	  /*
	  
	  <Integer>
	  
	  { '+' | '-' }? <UnsignedInteger>
	   */

	  var integer = "[+\-]?" + unsigned_int;
	  module.exports.integer = integer;
	  /*
	  
	  <Exponent>
	  
	  { {'e' | 'E' } | {'e' | 'E' } { '+' | '- ' } } <UnsignedInteger>
	   */

	  var exponent = "[eE]" + integer;
	  module.exports.exponent = exponent;
	  /*
	  
	  <Float>
	  
	  { <Integer><Exponent> | { {'+'|'-'} ? { {<Digit>} * '.' <UnsignedInteger> } |
	  { <Digit>} + '.' } } {<Exponent>} ? } }
	   */

	  var float = "(?:(?:[+\-]?(?:[" + digit + "]*\\." + unsigned_int + "|[" + digit + "]+\\.)(?:" + exponent + ")?)|(?:" + integer + exponent + "))";
	  module.exports.float = float;
	  /*
	  
	  <Number>
	  
	  {<Integer> | <Float> }
	   */

	  var number = "(?:" + float + "|" + integer + ")";
	  module.exports.number = number;
	  /*
	  
	  <Numeric>
	  
	  { <Number> | <Number> '(' <UnsignedInteger> ')' }
	   */

	  var numeric = "(?:(" + number + ")\\((" + unsigned_int + ")\\)|(" + number + "))";
	  module.exports.numeric = numeric;
	  /*
	  
	  <Tag>
	  
	  '_'{ <NonBlankChar>}+
	   */

	  var tag = "_[" + nonblank_char + "]+";
	  module.exports.tag = tag;
	  /*
	  
	  <Value> 
	  
	  { '.' | '?' | <Numeric> | <CharString> | <TextField> }
	   */

	  var value = "(\\.|\\?|" + numeric + "|" + chrstring + "|" + semicolontext + ")";
	  module.exports.value = value;
	  /*
	  
	  <LOOP_>
	  
	  */

	  var loop_kw = "[Ll][Oo][Oo][Pp]_";
	  module.exports.loop_kw = loop_kw;
	  /*
	  
	  <LoopHeader>
	  
	  <LOOP_> {<WhiteSpace> <Tag>}+
	   */

	  var loop_header = loop_kw + "(" + whitespace + tag + ")+";
	  module.exports.loop_header = loop_header;
	  /*
	  
	  <LoopBody>
	  
	  <Value> { <WhiteSpace> <Value> }*   
	   */

	  var loop_body = value + "(" + whitespace + value + ")*";
	  module.exports.loop_body = loop_body;
	  /*
	  
	  <DataHeader>
	  
	  <DATA_> { <NonBlankChar> }+
	  */

	  var data_header = "[Dd][Aa][Tt][Aa]_[" + nonblank_char + "]+";
	  module.exports.data_header = data_header;
	  /*
	  
	  <DataItem>
	  
	  <Tag> <WhiteSpace> <Value> | <LoopHeader> <LoopBody>
	   */

	  var data_item = "(?:(" + tag + ")" + whitespace + value + "|" + loop_header + loop_body + ")";
	  module.exports.data_item = data_item; // Reserved keywords

	  module.exports.reserved = "(data|loop|global|save|stop)"; // Utility function to get ready regular expressions

	  module.exports.tokenRegex = function (tname, start, end, flags) {
	    var flags = flags || 'g';

	    if (tname == 'reserved') {
	      flags = 'gi';
	    }

	    var restr = module.exports[tname];

	    if (start) {
	      restr = '^' + restr;
	    }

	    if (end) {
	      restr = restr + '$';
	    }

	    return RegExp(restr, flags);
	  };
	});

	/** Represents a single value (string or numerical) in a CIF file.
	 *  @class
	 *  @param  {string}    type      Type of the value (int, float, string, mstring,
	 *                                N/A or ?)
	 *  @param  {*}         pvalue]   Parsed value itself (should be appropriate to
	 *                                type, unnecessary for N/A and ?)
	 *  @param  {int}       [prec]    Precision number (only for numerals)
	 */


	var CifValue = function (type, value, prec) {
	  /** @member {string} */
	  this.type = type;
	  /** @member {int} */

	  this.prec = prec;

	  switch (type) {
	    case 'int':
	    case 'float':
	      /** @member {number} */
	      this.num = value;
	      break;

	    case 'string':
	    case 'mstring':
	      /** @member {string} */
	      this.text = value;
	      break;
	  }
	};

	CifValue.prototype = {
	  get_value: function () {
	    return this.num !== undefined ? this.num : this.text; // Universal function
	  }
	};
	/**
	 *  Split a text CIF file into elementary tokens for further processing.
	 *  @param  {string} cif    CIF file in text string format
	 *  @return {Array}         Array of parsed tokens
	 */

	function tokenize(cif) {
	  /* Split into tokens (separated by non-blank characters except for the
	     quoted strings and semicolon text )
	  */
	  // Grab a bunch of regular expressions
	  var all_re = [tokens.tokenRegex('whitespace', false, false), tokens.tokenRegex('quotestring', true), tokens.tokenRegex('semicolontext', true), tokens.tokenRegex('tag', true), tokens.tokenRegex('data_header', true), tokens.tokenRegex('loop_kw', true)]; // Now create fake matches for each of them

	  var tokenized = [];
	  var cifsl = cif.slice();

	  while (cifsl.length > 0) {
	    // First, try to see if it's any of the various non-whitespace types
	    var m_type = 1;
	    var m = null;

	    for (; m_type < all_re.length; ++m_type) {
	      m = cifsl.match(all_re[m_type]);
	      if (m) break;
	    }

	    if (m) {
	      tokenized.push({
	        'val': m[0],
	        'type': ['quotestring', 'semicolontext', 'tag', 'data_headers', 'loop_kw'][m_type - 1]
	      });
	      cifsl = cifsl.slice(m[0].length);
	      continue;
	    } // Now check for whitespace


	    all_re[0].lastIndex = 0;
	    var w = all_re[0].exec(cifsl);

	    if (w) {
	      if (w.index == 0) {
	        // Trim
	        cifsl = cifsl.slice(w[0].length);
	      } else {
	        // Capture an unknown
	        // A regular value/string
	        tokenized.push({
	          'val': cifsl.slice(0, w.index),
	          'type': 'unknown'
	        });
	        cifsl = cifsl.slice(w.index + w[0].length);
	      }

	      continue;
	    } // Ran out of string to parse


	    if (cifsl.length > 0) {
	      tokenized.push({
	        'val': cifsl,
	        'type': 'unknown'
	      });
	      break;
	    }
	  }

	  return tokenized;
	}

	var tokenize_1 = tokenize;
	/**
	 *  Parse a single token as a value.
	 *  @param  {Object} tok    Token to parse (must not be a reserved keyword
	 *                          like a data_ or loop_ token)
	 *  @return {CifValue}      Parsed value
	 */

	function parseValue(tok) {
	  // If it's a string, easy one
	  if (tok.type == 'quotestring') {
	    return new CifValue('string', tok.val.slice(1, tok.val.length - 1));
	  }

	  if (tok.type == 'semicolontext') {
	    return new CifValue('mstring', tok.val.slice(1, tok.val.length - 1));
	  }

	  if (tok.type != 'unknown') {
	    // Something's wrong
	    return null;
	  } // We now know it's unknown, so...


	  var strval = tok.val; // First, check for special types

	  if (strval.trim() == '.') {
	    return new CifValue('N/A');
	  } else if (strval.trim() == '?') {
	    return new CifValue('?');
	  }

	  var type; // It can be a numeric value

	  var m = tokens.tokenRegex('numeric', true, true).exec(strval.trim());

	  if (m) {
	    // Does it have a precision?
	    var prec = null;
	    var strnum = m[3]; // Will be undefined if there's a precision

	    if (strnum === undefined) {
	      prec = parseInt(m[2]);
	      strnum = m[1];
	    } // Integer or float?


	    var num;

	    if (strnum.match(tokens.tokenRegex('float', true, true))) {
	      num = parseFloat(strnum);
	      type = 'float';
	    } else {
	      num = parseInt(strnum);
	      type = 'int';
	    }

	    return new CifValue(type, num, prec);
	  } // Or it's just an unquoted string


	  return new CifValue('string', strval);
	}

	var parseValue_1 = parseValue;
	/**
	 * Finds and splits the data blocks from a tokenized CIF file.
	 * @param  {Array}   ciftokens   Array of tokens contained in the file
	 * @return {Array}               Array of data blocks in the form 
	 *                               [name, [tokens]]
	 */

	function parseDataBlocks(ciftokens) {
	  // Identify all data blocks
	  var tagre = tokens.tokenRegex('tag');
	  var data_headers = [];

	  for (var i = 0; i < ciftokens.length; ++i) {
	    var tok = ciftokens[i];

	    if (tok.type == 'data_headers') {
	      var name = tok.val.match(tagre);

	      if (name.length != 1) {
	        throw 'Invalid data header ' + tok.val;
	      }

	      data_headers.push([i, name[0].slice(1)]);
	    }
	  } // Now gather the blocks


	  var data_blocks = [];

	  for (var i = 0; i < data_headers.length; ++i) {
	    var dh = data_headers[i];
	    var end = i < data_headers.length - 1 ? data_headers[i + 1][0] : ciftokens.length;
	    var db = [dh[1], ciftokens.slice(dh[0] + 1, end)];
	    data_blocks.push(db);
	  }

	  return data_blocks;
	}

	var parseDataBlocks_1 = parseDataBlocks;
	/**
	 * Parses a series of tokens defining a data block into data items.
	 * @param  {Array}  blocktokens  Array of tokens defining the block
	 * @return {Array}               Array of parsed tata items
	 */

	function parseDataItems(blocktokens) {
	  // Parse the data items inside a data block
	  var data_items = [];
	  /* There are two possible structures here:
	  1) alternating series of tag - value
	  2) loop with series of tags, then corresponding series of values  
	  */
	  // Acceptable value token types

	  var vtypes = ['quotestring', 'semicolontext', 'unknown'];
	  data_items = [];
	  var btokens = blocktokens.slice();

	  while (btokens.length > 0) {
	    var btok = btokens.shift(); // What type is it?

	    if (btok === undefined) {
	      break;
	    }

	    switch (btok.type) {
	      case 'tag':
	        var valtok = btokens.shift();

	        if (valtok == null || !vtypes.includes(valtok.type)) {
	          throw 'Invalid or missing value for tag ' + btok.val;
	        }

	        data_items.push({
	          'tag': btok.val,
	          'type': 'single',
	          'value': parseValue(valtok)
	        });
	        break;

	      case 'loop_kw':
	        // Start by parsing the header
	        var header = [];
	        var ltok = btokens.shift();

	        while (ltok !== undefined && ltok.type == 'tag') {
	          header.push(ltok.val);
	          ltok = btokens.shift();
	        }

	        var body = [];

	        while (ltok !== undefined && vtypes.includes(ltok.type)) {
	          body.push(parseValue(ltok));
	          ltok = btokens.shift();
	        } // Put back that last one...


	        btokens.unshift(ltok); // Check if the loop is correct

	        if (body.length % header.length != 0) {
	          throw 'Invalid loop - values must be a multiple of tags';
	        }

	        var tagn = header.length;
	        var loopn = body.length / header.length;

	        for (var i = 0; i < header.length; ++i) {
	          var di = {
	            'tag': header[i],
	            'type': 'loop',
	            'value': []
	          };

	          for (var j = 0; j < loopn; ++j) {
	            di.value.push(body[j * tagn + i]);
	          }

	          data_items.push(di);
	        }

	        break;
	    }
	  }

	  return data_items;
	}

	var parseDataItems_1 = parseDataItems;
	/**
	 * Parses a cif file returning the data blocks and items (not interpreted).
	 * @param  {string} ciftext CIF file as a string
	 * @return {Object}         Parsed CIF file as data structure
	 */

	var parseCif = function parseCif(ciftext) {
	  // First, extract the tokens
	  var tk = tokenize(ciftext); // Then the blocks

	  var db = parseDataBlocks(tk); // Now on to the items for each block

	  var cifdict = {};

	  for (var i = 0; i < db.length; ++i) {
	    var block = db[i];
	    cifdict[block[0]] = {}; // SAVE frames are not supported for now, so we only look 
	    // for data items

	    var items = parseDataItems(block[1]);

	    for (var j = 0; j < items.length; ++j) {
	      cifdict[block[0]][items[j].tag] = items[j];
	    }
	  }

	  return cifdict;
	};

	var parse = {
	  tokenize: tokenize_1,
	  parseValue: parseValue_1,
	  parseDataBlocks: parseDataBlocks_1,
	  parseDataItems: parseDataItems_1,
	  parseCif: parseCif
	};

	var numeric1_2_6 = createCommonjsModule(function (module, exports) {

	  var numeric =  exports;

	  if (typeof commonjsGlobal !== "undefined") {
	    commonjsGlobal.numeric = numeric;
	  }

	  numeric.version = "1.2.6"; // 1. Utility functions

	  numeric.bench = function bench(f, interval) {
	    var t1, t2, n, i;

	    if (typeof interval === "undefined") {
	      interval = 15;
	    }

	    n = 0.5;
	    t1 = new Date();

	    while (1) {
	      n *= 2;

	      for (i = n; i > 3; i -= 4) {
	        f();
	        f();
	        f();
	        f();
	      }

	      while (i > 0) {
	        f();
	        i--;
	      }

	      t2 = new Date();
	      if (t2 - t1 > interval) break;
	    }

	    for (i = n; i > 3; i -= 4) {
	      f();
	      f();
	      f();
	      f();
	    }

	    while (i > 0) {
	      f();
	      i--;
	    }

	    t2 = new Date();
	    return 1000 * (3 * n - 1) / (t2 - t1);
	  };

	  numeric._myIndexOf = function _myIndexOf(w) {
	    var n = this.length,
	        k;

	    for (k = 0; k < n; ++k) if (this[k] === w) return k;

	    return -1;
	  };

	  numeric.myIndexOf = Array.prototype.indexOf ? Array.prototype.indexOf : numeric._myIndexOf;
	  numeric.Function = Function;
	  numeric.precision = 4;
	  numeric.largeArray = 50;

	  numeric.prettyPrint = function prettyPrint(x) {
	    function fmtnum(x) {
	      if (x === 0) {
	        return '0';
	      }

	      if (isNaN(x)) {
	        return 'NaN';
	      }

	      if (x < 0) {
	        return '-' + fmtnum(-x);
	      }

	      if (isFinite(x)) {
	        var scale = Math.floor(Math.log(x) / Math.log(10));
	        var normalized = x / Math.pow(10, scale);
	        var basic = normalized.toPrecision(numeric.precision);

	        if (parseFloat(basic) === 10) {
	          scale++;
	          normalized = 1;
	          basic = normalized.toPrecision(numeric.precision);
	        }

	        return parseFloat(basic).toString() + 'e' + scale.toString();
	      }

	      return 'Infinity';
	    }

	    var ret = [];

	    function foo(x) {
	      var k;

	      if (typeof x === "undefined") {
	        ret.push(Array(numeric.precision + 8).join(' '));
	        return false;
	      }

	      if (typeof x === "string") {
	        ret.push('"' + x + '"');
	        return false;
	      }

	      if (typeof x === "boolean") {
	        ret.push(x.toString());
	        return false;
	      }

	      if (typeof x === "number") {
	        var a = fmtnum(x);
	        var b = x.toPrecision(numeric.precision);
	        var c = parseFloat(x.toString()).toString();
	        var d = [a, b, c, parseFloat(b).toString(), parseFloat(c).toString()];

	        for (k = 1; k < d.length; k++) {
	          if (d[k].length < a.length) a = d[k];
	        }

	        ret.push(Array(numeric.precision + 8 - a.length).join(' ') + a);
	        return false;
	      }

	      if (x === null) {
	        ret.push("null");
	        return false;
	      }

	      if (typeof x === "function") {
	        ret.push(x.toString());
	        var flag = false;

	        for (k in x) {
	          if (x.hasOwnProperty(k)) {
	            if (flag) ret.push(',\n');else ret.push('\n{');
	            flag = true;
	            ret.push(k);
	            ret.push(': \n');
	            foo(x[k]);
	          }
	        }

	        if (flag) ret.push('}\n');
	        return true;
	      }

	      if (x instanceof Array) {
	        if (x.length > numeric.largeArray) {
	          ret.push('...Large Array...');
	          return true;
	        }

	        var flag = false;
	        ret.push('[');

	        for (k = 0; k < x.length; k++) {
	          if (k > 0) {
	            ret.push(',');
	            if (flag) ret.push('\n ');
	          }

	          flag = foo(x[k]);
	        }

	        ret.push(']');
	        return true;
	      }

	      ret.push('{');
	      var flag = false;

	      for (k in x) {
	        if (x.hasOwnProperty(k)) {
	          if (flag) ret.push(',\n');
	          flag = true;
	          ret.push(k);
	          ret.push(': \n');
	          foo(x[k]);
	        }
	      }

	      ret.push('}');
	      return true;
	    }

	    foo(x);
	    return ret.join('');
	  };

	  numeric.parseDate = function parseDate(d) {
	    function foo(d) {
	      if (typeof d === 'string') {
	        return Date.parse(d.replace(/-/g, '/'));
	      }

	      if (!(d instanceof Array)) {
	        throw new Error("parseDate: parameter must be arrays of strings");
	      }

	      var ret = [],
	          k;

	      for (k = 0; k < d.length; k++) {
	        ret[k] = foo(d[k]);
	      }

	      return ret;
	    }

	    return foo(d);
	  };

	  numeric.parseFloat = function parseFloat_(d) {
	    function foo(d) {
	      if (typeof d === 'string') {
	        return parseFloat(d);
	      }

	      if (!(d instanceof Array)) {
	        throw new Error("parseFloat: parameter must be arrays of strings");
	      }

	      var ret = [],
	          k;

	      for (k = 0; k < d.length; k++) {
	        ret[k] = foo(d[k]);
	      }

	      return ret;
	    }

	    return foo(d);
	  };

	  numeric.parseCSV = function parseCSV(t) {
	    var foo = t.split('\n');
	    var j, k;
	    var ret = [];
	    var pat = /(([^'",]*)|('[^']*')|("[^"]*")),/g;
	    var patnum = /^\s*(([+-]?[0-9]+(\.[0-9]*)?(e[+-]?[0-9]+)?)|([+-]?[0-9]*(\.[0-9]+)?(e[+-]?[0-9]+)?))\s*$/;

	    var stripper = function (n) {
	      return n.substr(0, n.length - 1);
	    };

	    var count = 0;

	    for (k = 0; k < foo.length; k++) {
	      var bar = (foo[k] + ",").match(pat),
	          baz;

	      if (bar.length > 0) {
	        ret[count] = [];

	        for (j = 0; j < bar.length; j++) {
	          baz = stripper(bar[j]);

	          if (patnum.test(baz)) {
	            ret[count][j] = parseFloat(baz);
	          } else ret[count][j] = baz;
	        }

	        count++;
	      }
	    }

	    return ret;
	  };

	  numeric.toCSV = function toCSV(A) {
	    var s = numeric.dim(A);
	    var i, j, m, n, row, ret;
	    m = s[0];
	    n = s[1];
	    ret = [];

	    for (i = 0; i < m; i++) {
	      row = [];

	      for (j = 0; j < m; j++) {
	        row[j] = A[i][j].toString();
	      }

	      ret[i] = row.join(', ');
	    }

	    return ret.join('\n') + '\n';
	  };

	  numeric.getURL = function getURL(url) {
	    var client = new XMLHttpRequest();
	    client.open("GET", url, false);
	    client.send();
	    return client;
	  };

	  numeric.imageURL = function imageURL(img) {
	    function base64(A) {
	      var n = A.length,
	          i,
	          x,
	          y,
	          z,
	          p,
	          q,
	          r,
	          s;
	      var key = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
	      var ret = "";

	      for (i = 0; i < n; i += 3) {
	        x = A[i];
	        y = A[i + 1];
	        z = A[i + 2];
	        p = x >> 2;
	        q = ((x & 3) << 4) + (y >> 4);
	        r = ((y & 15) << 2) + (z >> 6);
	        s = z & 63;

	        if (i + 1 >= n) {
	          r = s = 64;
	        } else if (i + 2 >= n) {
	          s = 64;
	        }

	        ret += key.charAt(p) + key.charAt(q) + key.charAt(r) + key.charAt(s);
	      }

	      return ret;
	    }

	    function crc32Array(a, from, to) {
	      if (typeof from === "undefined") {
	        from = 0;
	      }

	      if (typeof to === "undefined") {
	        to = a.length;
	      }

	      var table = [0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3, 0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91, 0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F, 0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D, 0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433, 0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01, 0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65, 0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9, 0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F, 0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683, 0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, 0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B, 0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D, 0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713, 0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777, 0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9, 0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D];
	      var crc = -1,
	          y = 0,
	          n = a.length,
	          i;

	      for (i = from; i < to; i++) {
	        y = (crc ^ a[i]) & 0xFF;
	        crc = crc >>> 8 ^ table[y];
	      }

	      return crc ^ -1;
	    }

	    var h = img[0].length,
	        w = img[0][0].length,
	        s1,
	        s2,
	        k,
	        length,
	        a,
	        b,
	        i,
	        j,
	        adler32,
	        crc32;
	    var stream = [137, 80, 78, 71, 13, 10, 26, 10, //  0: PNG signature
	    0, 0, 0, 13, //  8: IHDR Chunk length
	    73, 72, 68, 82, // 12: "IHDR" 
	    w >> 24 & 255, w >> 16 & 255, w >> 8 & 255, w & 255, // 16: Width
	    h >> 24 & 255, h >> 16 & 255, h >> 8 & 255, h & 255, // 20: Height
	    8, // 24: bit depth
	    2, // 25: RGB
	    0, // 26: deflate
	    0, // 27: no filter
	    0, // 28: no interlace
	    -1, -2, -3, -4, // 29: CRC
	    -5, -6, -7, -8, // 33: IDAT Chunk length
	    73, 68, 65, 84, // 37: "IDAT"
	    // RFC 1950 header starts here
	    8, // 41: RFC1950 CMF
	    29 // 42: RFC1950 FLG
	    ];
	    crc32 = crc32Array(stream, 12, 29);
	    stream[29] = crc32 >> 24 & 255;
	    stream[30] = crc32 >> 16 & 255;
	    stream[31] = crc32 >> 8 & 255;
	    stream[32] = crc32 & 255;
	    s1 = 1;
	    s2 = 0;

	    for (i = 0; i < h; i++) {
	      if (i < h - 1) {
	        stream.push(0);
	      } else {
	        stream.push(1);
	      }

	      a = 3 * w + 1 + (i === 0) & 255;
	      b = 3 * w + 1 + (i === 0) >> 8 & 255;
	      stream.push(a);
	      stream.push(b);
	      stream.push(~a & 255);
	      stream.push(~b & 255);
	      if (i === 0) stream.push(0);

	      for (j = 0; j < w; j++) {
	        for (k = 0; k < 3; k++) {
	          a = img[k][i][j];
	          if (a > 255) a = 255;else if (a < 0) a = 0;else a = Math.round(a);
	          s1 = (s1 + a) % 65521;
	          s2 = (s2 + s1) % 65521;
	          stream.push(a);
	        }
	      }

	      stream.push(0);
	    }

	    adler32 = (s2 << 16) + s1;
	    stream.push(adler32 >> 24 & 255);
	    stream.push(adler32 >> 16 & 255);
	    stream.push(adler32 >> 8 & 255);
	    stream.push(adler32 & 255);
	    length = stream.length - 41;
	    stream[33] = length >> 24 & 255;
	    stream[34] = length >> 16 & 255;
	    stream[35] = length >> 8 & 255;
	    stream[36] = length & 255;
	    crc32 = crc32Array(stream, 37);
	    stream.push(crc32 >> 24 & 255);
	    stream.push(crc32 >> 16 & 255);
	    stream.push(crc32 >> 8 & 255);
	    stream.push(crc32 & 255);
	    stream.push(0);
	    stream.push(0);
	    stream.push(0);
	    stream.push(0); //    a = stream.length;

	    stream.push(73); // I

	    stream.push(69); // E

	    stream.push(78); // N

	    stream.push(68); // D

	    stream.push(174); // CRC1

	    stream.push(66); // CRC2

	    stream.push(96); // CRC3

	    stream.push(130); // CRC4

	    return 'data:image/png;base64,' + base64(stream);
	  }; // 2. Linear algebra with Arrays.


	  numeric._dim = function _dim(x) {
	    var ret = [];

	    while (typeof x === "object") {
	      ret.push(x.length);
	      x = x[0];
	    }

	    return ret;
	  };

	  numeric.dim = function dim(x) {
	    var y, z;

	    if (typeof x === "object") {
	      y = x[0];

	      if (typeof y === "object") {
	        z = y[0];

	        if (typeof z === "object") {
	          return numeric._dim(x);
	        }

	        return [x.length, y.length];
	      }

	      return [x.length];
	    }

	    return [];
	  };

	  numeric.mapreduce = function mapreduce(body, init) {
	    return Function('x', 'accum', '_s', '_k', 'if(typeof accum === "undefined") accum = ' + init + ';\n' + 'if(typeof x === "number") { var xi = x; ' + body + '; return accum; }\n' + 'if(typeof _s === "undefined") _s = numeric.dim(x);\n' + 'if(typeof _k === "undefined") _k = 0;\n' + 'var _n = _s[_k];\n' + 'var i,xi;\n' + 'if(_k < _s.length-1) {\n' + '    for(i=_n-1;i>=0;i--) {\n' + '        accum = arguments.callee(x[i],accum,_s,_k+1);\n' + '    }' + '    return accum;\n' + '}\n' + 'for(i=_n-1;i>=1;i-=2) { \n' + '    xi = x[i];\n' + '    ' + body + ';\n' + '    xi = x[i-1];\n' + '    ' + body + ';\n' + '}\n' + 'if(i === 0) {\n' + '    xi = x[i];\n' + '    ' + body + '\n' + '}\n' + 'return accum;');
	  };

	  numeric.mapreduce2 = function mapreduce2(body, setup) {
	    return Function('x', 'var n = x.length;\n' + 'var i,xi;\n' + setup + ';\n' + 'for(i=n-1;i!==-1;--i) { \n' + '    xi = x[i];\n' + '    ' + body + ';\n' + '}\n' + 'return accum;');
	  };

	  numeric.same = function same(x, y) {
	    var i, n;

	    if (!(x instanceof Array) || !(y instanceof Array)) {
	      return false;
	    }

	    n = x.length;

	    if (n !== y.length) {
	      return false;
	    }

	    for (i = 0; i < n; i++) {
	      if (x[i] === y[i]) {
	        continue;
	      }

	      if (typeof x[i] === "object") {
	        if (!same(x[i], y[i])) return false;
	      } else {
	        return false;
	      }
	    }

	    return true;
	  };

	  numeric.rep = function rep(s, v, k) {
	    if (typeof k === "undefined") {
	      k = 0;
	    }

	    var n = s[k],
	        ret = Array(n),
	        i;

	    if (k === s.length - 1) {
	      for (i = n - 2; i >= 0; i -= 2) {
	        ret[i + 1] = v;
	        ret[i] = v;
	      }

	      if (i === -1) {
	        ret[0] = v;
	      }

	      return ret;
	    }

	    for (i = n - 1; i >= 0; i--) {
	      ret[i] = numeric.rep(s, v, k + 1);
	    }

	    return ret;
	  };

	  numeric.dotMMsmall = function dotMMsmall(x, y) {
	    var i, j, k, p, q, r, ret, foo, bar, woo, i0;
	    p = x.length;
	    q = y.length;
	    r = y[0].length;
	    ret = Array(p);

	    for (i = p - 1; i >= 0; i--) {
	      foo = Array(r);
	      bar = x[i];

	      for (k = r - 1; k >= 0; k--) {
	        woo = bar[q - 1] * y[q - 1][k];

	        for (j = q - 2; j >= 1; j -= 2) {
	          i0 = j - 1;
	          woo += bar[j] * y[j][k] + bar[i0] * y[i0][k];
	        }

	        if (j === 0) {
	          woo += bar[0] * y[0][k];
	        }

	        foo[k] = woo;
	      }

	      ret[i] = foo;
	    }

	    return ret;
	  };

	  numeric._getCol = function _getCol(A, j, x) {
	    var n = A.length,
	        i;

	    for (i = n - 1; i > 0; --i) {
	      x[i] = A[i][j];
	      --i;
	      x[i] = A[i][j];
	    }

	    if (i === 0) x[0] = A[0][j];
	  };

	  numeric.dotMMbig = function dotMMbig(x, y) {
	    var gc = numeric._getCol,
	        p = y.length,
	        v = Array(p);
	    var m = x.length,
	        n = y[0].length,
	        A = new Array(m),
	        xj;
	    var VV = numeric.dotVV;
	    var i, j;
	    --p;
	    --m;

	    for (i = m; i !== -1; --i) A[i] = Array(n);

	    --n;

	    for (i = n; i !== -1; --i) {
	      gc(y, i, v);

	      for (j = m; j !== -1; --j) {
	        xj = x[j];
	        A[j][i] = VV(xj, v);
	      }
	    }

	    return A;
	  };

	  numeric.dotMV = function dotMV(x, y) {
	    var p = x.length,
	        q = y.length,
	        i;
	    var ret = Array(p),
	        dotVV = numeric.dotVV;

	    for (i = p - 1; i >= 0; i--) {
	      ret[i] = dotVV(x[i], y);
	    }

	    return ret;
	  };

	  numeric.dotVM = function dotVM(x, y) {
	    var j, k, p, q, ret, woo, i0;
	    p = x.length;
	    q = y[0].length;
	    ret = Array(q);

	    for (k = q - 1; k >= 0; k--) {
	      woo = x[p - 1] * y[p - 1][k];

	      for (j = p - 2; j >= 1; j -= 2) {
	        i0 = j - 1;
	        woo += x[j] * y[j][k] + x[i0] * y[i0][k];
	      }

	      if (j === 0) {
	        woo += x[0] * y[0][k];
	      }

	      ret[k] = woo;
	    }

	    return ret;
	  };

	  numeric.dotVV = function dotVV(x, y) {
	    var i,
	        n = x.length,
	        i1,
	        ret = x[n - 1] * y[n - 1];

	    for (i = n - 2; i >= 1; i -= 2) {
	      i1 = i - 1;
	      ret += x[i] * y[i] + x[i1] * y[i1];
	    }

	    if (i === 0) {
	      ret += x[0] * y[0];
	    }

	    return ret;
	  };

	  numeric.dot = function dot(x, y) {
	    var d = numeric.dim;

	    switch (d(x).length * 1000 + d(y).length) {
	      case 2002:
	        if (y.length < 10) return numeric.dotMMsmall(x, y);else return numeric.dotMMbig(x, y);

	      case 2001:
	        return numeric.dotMV(x, y);

	      case 1002:
	        return numeric.dotVM(x, y);

	      case 1001:
	        return numeric.dotVV(x, y);

	      case 1000:
	        return numeric.mulVS(x, y);

	      case 1:
	        return numeric.mulSV(x, y);

	      case 0:
	        return x * y;

	      default:
	        throw new Error('numeric.dot only works on vectors and matrices');
	    }
	  };

	  numeric.diag = function diag(d) {
	    var i,
	        i1,
	        j,
	        n = d.length,
	        A = Array(n),
	        Ai;

	    for (i = n - 1; i >= 0; i--) {
	      Ai = Array(n);
	      i1 = i + 2;

	      for (j = n - 1; j >= i1; j -= 2) {
	        Ai[j] = 0;
	        Ai[j - 1] = 0;
	      }

	      if (j > i) {
	        Ai[j] = 0;
	      }

	      Ai[i] = d[i];

	      for (j = i - 1; j >= 1; j -= 2) {
	        Ai[j] = 0;
	        Ai[j - 1] = 0;
	      }

	      if (j === 0) {
	        Ai[0] = 0;
	      }

	      A[i] = Ai;
	    }

	    return A;
	  };

	  numeric.getDiag = function (A) {
	    var n = Math.min(A.length, A[0].length),
	        i,
	        ret = Array(n);

	    for (i = n - 1; i >= 1; --i) {
	      ret[i] = A[i][i];
	      --i;
	      ret[i] = A[i][i];
	    }

	    if (i === 0) {
	      ret[0] = A[0][0];
	    }

	    return ret;
	  };

	  numeric.identity = function identity(n) {
	    return numeric.diag(numeric.rep([n], 1));
	  };

	  numeric.pointwise = function pointwise(params, body, setup) {
	    if (typeof setup === "undefined") {
	      setup = "";
	    }

	    var fun = [];
	    var k;
	    var avec = /\[i\]$/,
	        p,
	        thevec = '';
	    var haveret = false;

	    for (k = 0; k < params.length; k++) {
	      if (avec.test(params[k])) {
	        p = params[k].substring(0, params[k].length - 3);
	        thevec = p;
	      } else {
	        p = params[k];
	      }

	      if (p === 'ret') haveret = true;
	      fun.push(p);
	    }

	    fun[params.length] = '_s';
	    fun[params.length + 1] = '_k';
	    fun[params.length + 2] = 'if(typeof _s === "undefined") _s = numeric.dim(' + thevec + ');\n' + 'if(typeof _k === "undefined") _k = 0;\n' + 'var _n = _s[_k];\n' + 'var i' + (haveret ? '' : ', ret = Array(_n)') + ';\n' + 'if(_k < _s.length-1) {\n' + '    for(i=_n-1;i>=0;i--) ret[i] = arguments.callee(' + params.join(',') + ',_s,_k+1);\n' + '    return ret;\n' + '}\n' + setup + '\n' + 'for(i=_n-1;i!==-1;--i) {\n' + '    ' + body + '\n' + '}\n' + 'return ret;';
	    return Function.apply(null, fun);
	  };

	  numeric.pointwise2 = function pointwise2(params, body, setup) {
	    if (typeof setup === "undefined") {
	      setup = "";
	    }

	    var fun = [];
	    var k;
	    var avec = /\[i\]$/,
	        p,
	        thevec = '';
	    var haveret = false;

	    for (k = 0; k < params.length; k++) {
	      if (avec.test(params[k])) {
	        p = params[k].substring(0, params[k].length - 3);
	        thevec = p;
	      } else {
	        p = params[k];
	      }

	      if (p === 'ret') haveret = true;
	      fun.push(p);
	    }

	    fun[params.length] = 'var _n = ' + thevec + '.length;\n' + 'var i' + (haveret ? '' : ', ret = Array(_n)') + ';\n' + setup + '\n' + 'for(i=_n-1;i!==-1;--i) {\n' + body + '\n' + '}\n' + 'return ret;';
	    return Function.apply(null, fun);
	  };

	  numeric._biforeach = function _biforeach(x, y, s, k, f) {
	    if (k === s.length - 1) {
	      f(x, y);
	      return;
	    }

	    var i,
	        n = s[k];

	    for (i = n - 1; i >= 0; i--) {
	      _biforeach(typeof x === "object" ? x[i] : x, typeof y === "object" ? y[i] : y, s, k + 1, f);
	    }
	  };

	  numeric._biforeach2 = function _biforeach2(x, y, s, k, f) {
	    if (k === s.length - 1) {
	      return f(x, y);
	    }

	    var i,
	        n = s[k],
	        ret = Array(n);

	    for (i = n - 1; i >= 0; --i) {
	      ret[i] = _biforeach2(typeof x === "object" ? x[i] : x, typeof y === "object" ? y[i] : y, s, k + 1, f);
	    }

	    return ret;
	  };

	  numeric._foreach = function _foreach(x, s, k, f) {
	    if (k === s.length - 1) {
	      f(x);
	      return;
	    }

	    var i,
	        n = s[k];

	    for (i = n - 1; i >= 0; i--) {
	      _foreach(x[i], s, k + 1, f);
	    }
	  };

	  numeric._foreach2 = function _foreach2(x, s, k, f) {
	    if (k === s.length - 1) {
	      return f(x);
	    }

	    var i,
	        n = s[k],
	        ret = Array(n);

	    for (i = n - 1; i >= 0; i--) {
	      ret[i] = _foreach2(x[i], s, k + 1, f);
	    }

	    return ret;
	  };
	  /*numeric.anyV = numeric.mapreduce('if(xi) return true;','false');
	  numeric.allV = numeric.mapreduce('if(!xi) return false;','true');
	  numeric.any = function(x) { if(typeof x.length === "undefined") return x; return numeric.anyV(x); }
	  numeric.all = function(x) { if(typeof x.length === "undefined") return x; return numeric.allV(x); }*/


	  numeric.ops2 = {
	    add: '+',
	    sub: '-',
	    mul: '*',
	    div: '/',
	    mod: '%',
	    and: '&&',
	    or: '||',
	    eq: '===',
	    neq: '!==',
	    lt: '<',
	    gt: '>',
	    leq: '<=',
	    geq: '>=',
	    band: '&',
	    bor: '|',
	    bxor: '^',
	    lshift: '<<',
	    rshift: '>>',
	    rrshift: '>>>'
	  };
	  numeric.opseq = {
	    addeq: '+=',
	    subeq: '-=',
	    muleq: '*=',
	    diveq: '/=',
	    modeq: '%=',
	    lshifteq: '<<=',
	    rshifteq: '>>=',
	    rrshifteq: '>>>=',
	    bandeq: '&=',
	    boreq: '|=',
	    bxoreq: '^='
	  };
	  numeric.mathfuns = ['abs', 'acos', 'asin', 'atan', 'ceil', 'cos', 'exp', 'floor', 'log', 'round', 'sin', 'sqrt', 'tan', 'isNaN', 'isFinite'];
	  numeric.mathfuns2 = ['atan2', 'pow', 'max', 'min'];
	  numeric.ops1 = {
	    neg: '-',
	    not: '!',
	    bnot: '~',
	    clone: ''
	  };
	  numeric.mapreducers = {
	    any: ['if(xi) return true;', 'var accum = false;'],
	    all: ['if(!xi) return false;', 'var accum = true;'],
	    sum: ['accum += xi;', 'var accum = 0;'],
	    prod: ['accum *= xi;', 'var accum = 1;'],
	    norm2Squared: ['accum += xi*xi;', 'var accum = 0;'],
	    norminf: ['accum = max(accum,abs(xi));', 'var accum = 0, max = Math.max, abs = Math.abs;'],
	    norm1: ['accum += abs(xi)', 'var accum = 0, abs = Math.abs;'],
	    sup: ['accum = max(accum,xi);', 'var accum = -Infinity, max = Math.max;'],
	    inf: ['accum = min(accum,xi);', 'var accum = Infinity, min = Math.min;']
	  };

	  (function () {
	    var i, o;

	    for (i = 0; i < numeric.mathfuns2.length; ++i) {
	      o = numeric.mathfuns2[i];
	      numeric.ops2[o] = o;
	    }

	    for (i in numeric.ops2) {
	      if (numeric.ops2.hasOwnProperty(i)) {
	        o = numeric.ops2[i];
	        var code,
	            codeeq,
	            setup = '';

	        if (numeric.myIndexOf.call(numeric.mathfuns2, i) !== -1) {
	          setup = 'var ' + o + ' = Math.' + o + ';\n';

	          code = function (r, x, y) {
	            return r + ' = ' + o + '(' + x + ',' + y + ')';
	          };

	          codeeq = function (x, y) {
	            return x + ' = ' + o + '(' + x + ',' + y + ')';
	          };
	        } else {
	          code = function (r, x, y) {
	            return r + ' = ' + x + ' ' + o + ' ' + y;
	          };

	          if (numeric.opseq.hasOwnProperty(i + 'eq')) {
	            codeeq = function (x, y) {
	              return x + ' ' + o + '= ' + y;
	            };
	          } else {
	            codeeq = function (x, y) {
	              return x + ' = ' + x + ' ' + o + ' ' + y;
	            };
	          }
	        }

	        numeric[i + 'VV'] = numeric.pointwise2(['x[i]', 'y[i]'], code('ret[i]', 'x[i]', 'y[i]'), setup);
	        numeric[i + 'SV'] = numeric.pointwise2(['x', 'y[i]'], code('ret[i]', 'x', 'y[i]'), setup);
	        numeric[i + 'VS'] = numeric.pointwise2(['x[i]', 'y'], code('ret[i]', 'x[i]', 'y'), setup);
	        numeric[i] = Function('var n = arguments.length, i, x = arguments[0], y;\n' + 'var VV = numeric.' + i + 'VV, VS = numeric.' + i + 'VS, SV = numeric.' + i + 'SV;\n' + 'var dim = numeric.dim;\n' + 'for(i=1;i!==n;++i) { \n' + '  y = arguments[i];\n' + '  if(typeof x === "object") {\n' + '      if(typeof y === "object") x = numeric._biforeach2(x,y,dim(x),0,VV);\n' + '      else x = numeric._biforeach2(x,y,dim(x),0,VS);\n' + '  } else if(typeof y === "object") x = numeric._biforeach2(x,y,dim(y),0,SV);\n' + '  else ' + codeeq('x', 'y') + '\n' + '}\nreturn x;\n');
	        numeric[o] = numeric[i];
	        numeric[i + 'eqV'] = numeric.pointwise2(['ret[i]', 'x[i]'], codeeq('ret[i]', 'x[i]'), setup);
	        numeric[i + 'eqS'] = numeric.pointwise2(['ret[i]', 'x'], codeeq('ret[i]', 'x'), setup);
	        numeric[i + 'eq'] = Function('var n = arguments.length, i, x = arguments[0], y;\n' + 'var V = numeric.' + i + 'eqV, S = numeric.' + i + 'eqS\n' + 'var s = numeric.dim(x);\n' + 'for(i=1;i!==n;++i) { \n' + '  y = arguments[i];\n' + '  if(typeof y === "object") numeric._biforeach(x,y,s,0,V);\n' + '  else numeric._biforeach(x,y,s,0,S);\n' + '}\nreturn x;\n');
	      }
	    }

	    for (i = 0; i < numeric.mathfuns2.length; ++i) {
	      o = numeric.mathfuns2[i];
	      delete numeric.ops2[o];
	    }

	    for (i = 0; i < numeric.mathfuns.length; ++i) {
	      o = numeric.mathfuns[i];
	      numeric.ops1[o] = o;
	    }

	    for (i in numeric.ops1) {
	      if (numeric.ops1.hasOwnProperty(i)) {
	        setup = '';
	        o = numeric.ops1[i];

	        if (numeric.myIndexOf.call(numeric.mathfuns, i) !== -1) {
	          if (Math.hasOwnProperty(o)) setup = 'var ' + o + ' = Math.' + o + ';\n';
	        }

	        numeric[i + 'eqV'] = numeric.pointwise2(['ret[i]'], 'ret[i] = ' + o + '(ret[i]);', setup);
	        numeric[i + 'eq'] = Function('x', 'if(typeof x !== "object") return ' + o + 'x\n' + 'var i;\n' + 'var V = numeric.' + i + 'eqV;\n' + 'var s = numeric.dim(x);\n' + 'numeric._foreach(x,s,0,V);\n' + 'return x;\n');
	        numeric[i + 'V'] = numeric.pointwise2(['x[i]'], 'ret[i] = ' + o + '(x[i]);', setup);
	        numeric[i] = Function('x', 'if(typeof x !== "object") return ' + o + '(x)\n' + 'var i;\n' + 'var V = numeric.' + i + 'V;\n' + 'var s = numeric.dim(x);\n' + 'return numeric._foreach2(x,s,0,V);\n');
	      }
	    }

	    for (i = 0; i < numeric.mathfuns.length; ++i) {
	      o = numeric.mathfuns[i];
	      delete numeric.ops1[o];
	    }

	    for (i in numeric.mapreducers) {
	      if (numeric.mapreducers.hasOwnProperty(i)) {
	        o = numeric.mapreducers[i];
	        numeric[i + 'V'] = numeric.mapreduce2(o[0], o[1]);
	        numeric[i] = Function('x', 's', 'k', o[1] + 'if(typeof x !== "object") {' + '    xi = x;\n' + o[0] + ';\n' + '    return accum;\n' + '}' + 'if(typeof s === "undefined") s = numeric.dim(x);\n' + 'if(typeof k === "undefined") k = 0;\n' + 'if(k === s.length-1) return numeric.' + i + 'V(x);\n' + 'var xi;\n' + 'var n = x.length, i;\n' + 'for(i=n-1;i!==-1;--i) {\n' + '   xi = arguments.callee(x[i]);\n' + o[0] + ';\n' + '}\n' + 'return accum;\n');
	      }
	    }
	  })();

	  numeric.truncVV = numeric.pointwise(['x[i]', 'y[i]'], 'ret[i] = round(x[i]/y[i])*y[i];', 'var round = Math.round;');
	  numeric.truncVS = numeric.pointwise(['x[i]', 'y'], 'ret[i] = round(x[i]/y)*y;', 'var round = Math.round;');
	  numeric.truncSV = numeric.pointwise(['x', 'y[i]'], 'ret[i] = round(x/y[i])*y[i];', 'var round = Math.round;');

	  numeric.trunc = function trunc(x, y) {
	    if (typeof x === "object") {
	      if (typeof y === "object") return numeric.truncVV(x, y);
	      return numeric.truncVS(x, y);
	    }

	    if (typeof y === "object") return numeric.truncSV(x, y);
	    return Math.round(x / y) * y;
	  };

	  numeric.inv = function inv(x) {
	    var s = numeric.dim(x),
	        abs = Math.abs,
	        m = s[0],
	        n = s[1];
	    var A = numeric.clone(x),
	        Ai,
	        Aj;
	    var I = numeric.identity(m),
	        Ii,
	        Ij;
	    var i, j, k, x;

	    for (j = 0; j < n; ++j) {
	      var i0 = -1;
	      var v0 = -1;

	      for (i = j; i !== m; ++i) {
	        k = abs(A[i][j]);

	        if (k > v0) {
	          i0 = i;
	          v0 = k;
	        }
	      }

	      Aj = A[i0];
	      A[i0] = A[j];
	      A[j] = Aj;
	      Ij = I[i0];
	      I[i0] = I[j];
	      I[j] = Ij;
	      x = Aj[j];

	      for (k = j; k !== n; ++k) Aj[k] /= x;

	      for (k = n - 1; k !== -1; --k) Ij[k] /= x;

	      for (i = m - 1; i !== -1; --i) {
	        if (i !== j) {
	          Ai = A[i];
	          Ii = I[i];
	          x = Ai[j];

	          for (k = j + 1; k !== n; ++k) Ai[k] -= Aj[k] * x;

	          for (k = n - 1; k > 0; --k) {
	            Ii[k] -= Ij[k] * x;
	            --k;
	            Ii[k] -= Ij[k] * x;
	          }

	          if (k === 0) Ii[0] -= Ij[0] * x;
	        }
	      }
	    }

	    return I;
	  };

	  numeric.det = function det(x) {
	    var s = numeric.dim(x);

	    if (s.length !== 2 || s[0] !== s[1]) {
	      throw new Error('numeric: det() only works on square matrices');
	    }

	    var n = s[0],
	        ret = 1,
	        i,
	        j,
	        k,
	        A = numeric.clone(x),
	        Aj,
	        Ai,
	        alpha,
	        temp,
	        k1;

	    for (j = 0; j < n - 1; j++) {
	      k = j;

	      for (i = j + 1; i < n; i++) {
	        if (Math.abs(A[i][j]) > Math.abs(A[k][j])) {
	          k = i;
	        }
	      }

	      if (k !== j) {
	        temp = A[k];
	        A[k] = A[j];
	        A[j] = temp;
	        ret *= -1;
	      }

	      Aj = A[j];

	      for (i = j + 1; i < n; i++) {
	        Ai = A[i];
	        alpha = Ai[j] / Aj[j];

	        for (k = j + 1; k < n - 1; k += 2) {
	          k1 = k + 1;
	          Ai[k] -= Aj[k] * alpha;
	          Ai[k1] -= Aj[k1] * alpha;
	        }

	        if (k !== n) {
	          Ai[k] -= Aj[k] * alpha;
	        }
	      }

	      if (Aj[j] === 0) {
	        return 0;
	      }

	      ret *= Aj[j];
	    }

	    return ret * A[j][j];
	  };

	  numeric.transpose = function transpose(x) {
	    var i,
	        j,
	        m = x.length,
	        n = x[0].length,
	        ret = Array(n),
	        A0,
	        A1,
	        Bj;

	    for (j = 0; j < n; j++) ret[j] = Array(m);

	    for (i = m - 1; i >= 1; i -= 2) {
	      A1 = x[i];
	      A0 = x[i - 1];

	      for (j = n - 1; j >= 1; --j) {
	        Bj = ret[j];
	        Bj[i] = A1[j];
	        Bj[i - 1] = A0[j];
	        --j;
	        Bj = ret[j];
	        Bj[i] = A1[j];
	        Bj[i - 1] = A0[j];
	      }

	      if (j === 0) {
	        Bj = ret[0];
	        Bj[i] = A1[0];
	        Bj[i - 1] = A0[0];
	      }
	    }

	    if (i === 0) {
	      A0 = x[0];

	      for (j = n - 1; j >= 1; --j) {
	        ret[j][0] = A0[j];
	        --j;
	        ret[j][0] = A0[j];
	      }

	      if (j === 0) {
	        ret[0][0] = A0[0];
	      }
	    }

	    return ret;
	  };

	  numeric.negtranspose = function negtranspose(x) {
	    var i,
	        j,
	        m = x.length,
	        n = x[0].length,
	        ret = Array(n),
	        A0,
	        A1,
	        Bj;

	    for (j = 0; j < n; j++) ret[j] = Array(m);

	    for (i = m - 1; i >= 1; i -= 2) {
	      A1 = x[i];
	      A0 = x[i - 1];

	      for (j = n - 1; j >= 1; --j) {
	        Bj = ret[j];
	        Bj[i] = -A1[j];
	        Bj[i - 1] = -A0[j];
	        --j;
	        Bj = ret[j];
	        Bj[i] = -A1[j];
	        Bj[i - 1] = -A0[j];
	      }

	      if (j === 0) {
	        Bj = ret[0];
	        Bj[i] = -A1[0];
	        Bj[i - 1] = -A0[0];
	      }
	    }

	    if (i === 0) {
	      A0 = x[0];

	      for (j = n - 1; j >= 1; --j) {
	        ret[j][0] = -A0[j];
	        --j;
	        ret[j][0] = -A0[j];
	      }

	      if (j === 0) {
	        ret[0][0] = -A0[0];
	      }
	    }

	    return ret;
	  };

	  numeric._random = function _random(s, k) {
	    var i,
	        n = s[k],
	        ret = Array(n),
	        rnd;

	    if (k === s.length - 1) {
	      rnd = Math.random;

	      for (i = n - 1; i >= 1; i -= 2) {
	        ret[i] = rnd();
	        ret[i - 1] = rnd();
	      }

	      if (i === 0) {
	        ret[0] = rnd();
	      }

	      return ret;
	    }

	    for (i = n - 1; i >= 0; i--) ret[i] = _random(s, k + 1);

	    return ret;
	  };

	  numeric.random = function random(s) {
	    return numeric._random(s, 0);
	  };

	  numeric.norm2 = function norm2(x) {
	    return Math.sqrt(numeric.norm2Squared(x));
	  };

	  numeric.linspace = function linspace(a, b, n) {
	    if (typeof n === "undefined") n = Math.max(Math.round(b - a) + 1, 1);

	    if (n < 2) {
	      return n === 1 ? [a] : [];
	    }

	    var i,
	        ret = Array(n);
	    n--;

	    for (i = n; i >= 0; i--) {
	      ret[i] = (i * b + (n - i) * a) / n;
	    }

	    return ret;
	  };

	  numeric.getBlock = function getBlock(x, from, to) {
	    var s = numeric.dim(x);

	    function foo(x, k) {
	      var i,
	          a = from[k],
	          n = to[k] - a,
	          ret = Array(n);

	      if (k === s.length - 1) {
	        for (i = n; i >= 0; i--) {
	          ret[i] = x[i + a];
	        }

	        return ret;
	      }

	      for (i = n; i >= 0; i--) {
	        ret[i] = foo(x[i + a], k + 1);
	      }

	      return ret;
	    }

	    return foo(x, 0);
	  };

	  numeric.setBlock = function setBlock(x, from, to, B) {
	    var s = numeric.dim(x);

	    function foo(x, y, k) {
	      var i,
	          a = from[k],
	          n = to[k] - a;

	      if (k === s.length - 1) {
	        for (i = n; i >= 0; i--) {
	          x[i + a] = y[i];
	        }
	      }

	      for (i = n; i >= 0; i--) {
	        foo(x[i + a], y[i], k + 1);
	      }
	    }

	    foo(x, B, 0);
	    return x;
	  };

	  numeric.getRange = function getRange(A, I, J) {
	    var m = I.length,
	        n = J.length;
	    var i, j;
	    var B = Array(m),
	        Bi,
	        AI;

	    for (i = m - 1; i !== -1; --i) {
	      B[i] = Array(n);
	      Bi = B[i];
	      AI = A[I[i]];

	      for (j = n - 1; j !== -1; --j) Bi[j] = AI[J[j]];
	    }

	    return B;
	  };

	  numeric.blockMatrix = function blockMatrix(X) {
	    var s = numeric.dim(X);
	    if (s.length < 4) return numeric.blockMatrix([X]);
	    var m = s[0],
	        n = s[1],
	        M,
	        N,
	        i,
	        j,
	        Xij;
	    M = 0;
	    N = 0;

	    for (i = 0; i < m; ++i) M += X[i][0].length;

	    for (j = 0; j < n; ++j) N += X[0][j][0].length;

	    var Z = Array(M);

	    for (i = 0; i < M; ++i) Z[i] = Array(N);

	    var I = 0,
	        J,
	        ZI,
	        k,
	        l,
	        Xijk;

	    for (i = 0; i < m; ++i) {
	      J = N;

	      for (j = n - 1; j !== -1; --j) {
	        Xij = X[i][j];
	        J -= Xij[0].length;

	        for (k = Xij.length - 1; k !== -1; --k) {
	          Xijk = Xij[k];
	          ZI = Z[I + k];

	          for (l = Xijk.length - 1; l !== -1; --l) ZI[J + l] = Xijk[l];
	        }
	      }

	      I += X[i][0].length;
	    }

	    return Z;
	  };

	  numeric.tensor = function tensor(x, y) {
	    if (typeof x === "number" || typeof y === "number") return numeric.mul(x, y);
	    var s1 = numeric.dim(x),
	        s2 = numeric.dim(y);

	    if (s1.length !== 1 || s2.length !== 1) {
	      throw new Error('numeric: tensor product is only defined for vectors');
	    }

	    var m = s1[0],
	        n = s2[0],
	        A = Array(m),
	        Ai,
	        i,
	        j,
	        xi;

	    for (i = m - 1; i >= 0; i--) {
	      Ai = Array(n);
	      xi = x[i];

	      for (j = n - 1; j >= 3; --j) {
	        Ai[j] = xi * y[j];
	        --j;
	        Ai[j] = xi * y[j];
	        --j;
	        Ai[j] = xi * y[j];
	        --j;
	        Ai[j] = xi * y[j];
	      }

	      while (j >= 0) {
	        Ai[j] = xi * y[j];
	        --j;
	      }

	      A[i] = Ai;
	    }

	    return A;
	  }; // 3. The Tensor type T


	  numeric.T = function T(x, y) {
	    this.x = x;
	    this.y = y;
	  };

	  numeric.t = function t(x, y) {
	    return new numeric.T(x, y);
	  };

	  numeric.Tbinop = function Tbinop(rr, rc, cr, cc, setup) {
	    var io = numeric.indexOf;

	    if (typeof setup !== "string") {
	      var k;
	      setup = '';

	      for (k in numeric) {
	        if (numeric.hasOwnProperty(k) && (rr.indexOf(k) >= 0 || rc.indexOf(k) >= 0 || cr.indexOf(k) >= 0 || cc.indexOf(k) >= 0) && k.length > 1) {
	          setup += 'var ' + k + ' = numeric.' + k + ';\n';
	        }
	      }
	    }

	    return Function(['y'], 'var x = this;\n' + 'if(!(y instanceof numeric.T)) { y = new numeric.T(y); }\n' + setup + '\n' + 'if(x.y) {' + '  if(y.y) {' + '    return new numeric.T(' + cc + ');\n' + '  }\n' + '  return new numeric.T(' + cr + ');\n' + '}\n' + 'if(y.y) {\n' + '  return new numeric.T(' + rc + ');\n' + '}\n' + 'return new numeric.T(' + rr + ');\n');
	  };

	  numeric.T.prototype.add = numeric.Tbinop('add(x.x,y.x)', 'add(x.x,y.x),y.y', 'add(x.x,y.x),x.y', 'add(x.x,y.x),add(x.y,y.y)');
	  numeric.T.prototype.sub = numeric.Tbinop('sub(x.x,y.x)', 'sub(x.x,y.x),neg(y.y)', 'sub(x.x,y.x),x.y', 'sub(x.x,y.x),sub(x.y,y.y)');
	  numeric.T.prototype.mul = numeric.Tbinop('mul(x.x,y.x)', 'mul(x.x,y.x),mul(x.x,y.y)', 'mul(x.x,y.x),mul(x.y,y.x)', 'sub(mul(x.x,y.x),mul(x.y,y.y)),add(mul(x.x,y.y),mul(x.y,y.x))');

	  numeric.T.prototype.reciprocal = function reciprocal() {
	    var mul = numeric.mul,
	        div = numeric.div;

	    if (this.y) {
	      var d = numeric.add(mul(this.x, this.x), mul(this.y, this.y));
	      return new numeric.T(div(this.x, d), div(numeric.neg(this.y), d));
	    }

	    return new T(div(1, this.x));
	  };

	  numeric.T.prototype.div = function div(y) {
	    if (!(y instanceof numeric.T)) y = new numeric.T(y);

	    if (y.y) {
	      return this.mul(y.reciprocal());
	    }

	    var div = numeric.div;

	    if (this.y) {
	      return new numeric.T(div(this.x, y.x), div(this.y, y.x));
	    }

	    return new numeric.T(div(this.x, y.x));
	  };

	  numeric.T.prototype.dot = numeric.Tbinop('dot(x.x,y.x)', 'dot(x.x,y.x),dot(x.x,y.y)', 'dot(x.x,y.x),dot(x.y,y.x)', 'sub(dot(x.x,y.x),dot(x.y,y.y)),add(dot(x.x,y.y),dot(x.y,y.x))');

	  numeric.T.prototype.transpose = function transpose() {
	    var t = numeric.transpose,
	        x = this.x,
	        y = this.y;

	    if (y) {
	      return new numeric.T(t(x), t(y));
	    }

	    return new numeric.T(t(x));
	  };

	  numeric.T.prototype.transjugate = function transjugate() {
	    var t = numeric.transpose,
	        x = this.x,
	        y = this.y;

	    if (y) {
	      return new numeric.T(t(x), numeric.negtranspose(y));
	    }

	    return new numeric.T(t(x));
	  };

	  numeric.Tunop = function Tunop(r, c, s) {
	    if (typeof s !== "string") {
	      s = '';
	    }

	    return Function('var x = this;\n' + s + '\n' + 'if(x.y) {' + '  ' + c + ';\n' + '}\n' + r + ';\n');
	  };

	  numeric.T.prototype.exp = numeric.Tunop('return new numeric.T(ex)', 'return new numeric.T(mul(cos(x.y),ex),mul(sin(x.y),ex))', 'var ex = numeric.exp(x.x), cos = numeric.cos, sin = numeric.sin, mul = numeric.mul;');
	  numeric.T.prototype.conj = numeric.Tunop('return new numeric.T(x.x);', 'return new numeric.T(x.x,numeric.neg(x.y));');
	  numeric.T.prototype.neg = numeric.Tunop('return new numeric.T(neg(x.x));', 'return new numeric.T(neg(x.x),neg(x.y));', 'var neg = numeric.neg;');
	  numeric.T.prototype.sin = numeric.Tunop('return new numeric.T(numeric.sin(x.x))', 'return x.exp().sub(x.neg().exp()).div(new numeric.T(0,2));');
	  numeric.T.prototype.cos = numeric.Tunop('return new numeric.T(numeric.cos(x.x))', 'return x.exp().add(x.neg().exp()).div(2);');
	  numeric.T.prototype.abs = numeric.Tunop('return new numeric.T(numeric.abs(x.x));', 'return new numeric.T(numeric.sqrt(numeric.add(mul(x.x,x.x),mul(x.y,x.y))));', 'var mul = numeric.mul;');
	  numeric.T.prototype.log = numeric.Tunop('return new numeric.T(numeric.log(x.x));', 'var theta = new numeric.T(numeric.atan2(x.y,x.x)), r = x.abs();\n' + 'return new numeric.T(numeric.log(r.x),theta.x);');
	  numeric.T.prototype.norm2 = numeric.Tunop('return numeric.norm2(x.x);', 'var f = numeric.norm2Squared;\n' + 'return Math.sqrt(f(x.x)+f(x.y));');

	  numeric.T.prototype.inv = function inv() {
	    var A = this;

	    if (typeof A.y === "undefined") {
	      return new numeric.T(numeric.inv(A.x));
	    }

	    var n = A.x.length,
	        i,
	        j,
	        k;
	    var Rx = numeric.identity(n),
	        Ry = numeric.rep([n, n], 0);
	    var Ax = numeric.clone(A.x),
	        Ay = numeric.clone(A.y);
	    var Aix, Aiy, Ajx, Ajy, Rix, Riy, Rjx, Rjy;
	    var i, j, k, d, d1, ax, ay, bx, by, temp;

	    for (i = 0; i < n; i++) {
	      ax = Ax[i][i];
	      ay = Ay[i][i];
	      d = ax * ax + ay * ay;
	      k = i;

	      for (j = i + 1; j < n; j++) {
	        ax = Ax[j][i];
	        ay = Ay[j][i];
	        d1 = ax * ax + ay * ay;

	        if (d1 > d) {
	          k = j;
	          d = d1;
	        }
	      }

	      if (k !== i) {
	        temp = Ax[i];
	        Ax[i] = Ax[k];
	        Ax[k] = temp;
	        temp = Ay[i];
	        Ay[i] = Ay[k];
	        Ay[k] = temp;
	        temp = Rx[i];
	        Rx[i] = Rx[k];
	        Rx[k] = temp;
	        temp = Ry[i];
	        Ry[i] = Ry[k];
	        Ry[k] = temp;
	      }

	      Aix = Ax[i];
	      Aiy = Ay[i];
	      Rix = Rx[i];
	      Riy = Ry[i];
	      ax = Aix[i];
	      ay = Aiy[i];

	      for (j = i + 1; j < n; j++) {
	        bx = Aix[j];
	        by = Aiy[j];
	        Aix[j] = (bx * ax + by * ay) / d;
	        Aiy[j] = (by * ax - bx * ay) / d;
	      }

	      for (j = 0; j < n; j++) {
	        bx = Rix[j];
	        by = Riy[j];
	        Rix[j] = (bx * ax + by * ay) / d;
	        Riy[j] = (by * ax - bx * ay) / d;
	      }

	      for (j = i + 1; j < n; j++) {
	        Ajx = Ax[j];
	        Ajy = Ay[j];
	        Rjx = Rx[j];
	        Rjy = Ry[j];
	        ax = Ajx[i];
	        ay = Ajy[i];

	        for (k = i + 1; k < n; k++) {
	          bx = Aix[k];
	          by = Aiy[k];
	          Ajx[k] -= bx * ax - by * ay;
	          Ajy[k] -= by * ax + bx * ay;
	        }

	        for (k = 0; k < n; k++) {
	          bx = Rix[k];
	          by = Riy[k];
	          Rjx[k] -= bx * ax - by * ay;
	          Rjy[k] -= by * ax + bx * ay;
	        }
	      }
	    }

	    for (i = n - 1; i > 0; i--) {
	      Rix = Rx[i];
	      Riy = Ry[i];

	      for (j = i - 1; j >= 0; j--) {
	        Rjx = Rx[j];
	        Rjy = Ry[j];
	        ax = Ax[j][i];
	        ay = Ay[j][i];

	        for (k = n - 1; k >= 0; k--) {
	          bx = Rix[k];
	          by = Riy[k];
	          Rjx[k] -= ax * bx - ay * by;
	          Rjy[k] -= ax * by + ay * bx;
	        }
	      }
	    }

	    return new numeric.T(Rx, Ry);
	  };

	  numeric.T.prototype.get = function get(i) {
	    var x = this.x,
	        y = this.y,
	        k = 0,
	        ik,
	        n = i.length;

	    if (y) {
	      while (k < n) {
	        ik = i[k];
	        x = x[ik];
	        y = y[ik];
	        k++;
	      }

	      return new numeric.T(x, y);
	    }

	    while (k < n) {
	      ik = i[k];
	      x = x[ik];
	      k++;
	    }

	    return new numeric.T(x);
	  };

	  numeric.T.prototype.set = function set(i, v) {
	    var x = this.x,
	        y = this.y,
	        k = 0,
	        ik,
	        n = i.length,
	        vx = v.x,
	        vy = v.y;

	    if (n === 0) {
	      if (vy) {
	        this.y = vy;
	      } else if (y) {
	        this.y = undefined;
	      }

	      this.x = x;
	      return this;
	    }

	    if (vy) {
	      if (y) ; else {
	        y = numeric.rep(numeric.dim(x), 0);
	        this.y = y;
	      }

	      while (k < n - 1) {
	        ik = i[k];
	        x = x[ik];
	        y = y[ik];
	        k++;
	      }

	      ik = i[k];
	      x[ik] = vx;
	      y[ik] = vy;
	      return this;
	    }

	    if (y) {
	      while (k < n - 1) {
	        ik = i[k];
	        x = x[ik];
	        y = y[ik];
	        k++;
	      }

	      ik = i[k];
	      x[ik] = vx;
	      if (vx instanceof Array) y[ik] = numeric.rep(numeric.dim(vx), 0);else y[ik] = 0;
	      return this;
	    }

	    while (k < n - 1) {
	      ik = i[k];
	      x = x[ik];
	      k++;
	    }

	    ik = i[k];
	    x[ik] = vx;
	    return this;
	  };

	  numeric.T.prototype.getRows = function getRows(i0, i1) {
	    var n = i1 - i0 + 1,
	        j;
	    var rx = Array(n),
	        ry,
	        x = this.x,
	        y = this.y;

	    for (j = i0; j <= i1; j++) {
	      rx[j - i0] = x[j];
	    }

	    if (y) {
	      ry = Array(n);

	      for (j = i0; j <= i1; j++) {
	        ry[j - i0] = y[j];
	      }

	      return new numeric.T(rx, ry);
	    }

	    return new numeric.T(rx);
	  };

	  numeric.T.prototype.setRows = function setRows(i0, i1, A) {
	    var j;
	    var rx = this.x,
	        ry = this.y,
	        x = A.x,
	        y = A.y;

	    for (j = i0; j <= i1; j++) {
	      rx[j] = x[j - i0];
	    }

	    if (y) {
	      if (!ry) {
	        ry = numeric.rep(numeric.dim(rx), 0);
	        this.y = ry;
	      }

	      for (j = i0; j <= i1; j++) {
	        ry[j] = y[j - i0];
	      }
	    } else if (ry) {
	      for (j = i0; j <= i1; j++) {
	        ry[j] = numeric.rep([x[j - i0].length], 0);
	      }
	    }

	    return this;
	  };

	  numeric.T.prototype.getRow = function getRow(k) {
	    var x = this.x,
	        y = this.y;

	    if (y) {
	      return new numeric.T(x[k], y[k]);
	    }

	    return new numeric.T(x[k]);
	  };

	  numeric.T.prototype.setRow = function setRow(i, v) {
	    var rx = this.x,
	        ry = this.y,
	        x = v.x,
	        y = v.y;
	    rx[i] = x;

	    if (y) {
	      if (!ry) {
	        ry = numeric.rep(numeric.dim(rx), 0);
	        this.y = ry;
	      }

	      ry[i] = y;
	    } else if (ry) {
	      ry = numeric.rep([x.length], 0);
	    }

	    return this;
	  };

	  numeric.T.prototype.getBlock = function getBlock(from, to) {
	    var x = this.x,
	        y = this.y,
	        b = numeric.getBlock;

	    if (y) {
	      return new numeric.T(b(x, from, to), b(y, from, to));
	    }

	    return new numeric.T(b(x, from, to));
	  };

	  numeric.T.prototype.setBlock = function setBlock(from, to, A) {
	    if (!(A instanceof numeric.T)) A = new numeric.T(A);
	    var x = this.x,
	        y = this.y,
	        b = numeric.setBlock,
	        Ax = A.x,
	        Ay = A.y;

	    if (Ay) {
	      if (!y) {
	        this.y = numeric.rep(numeric.dim(this), 0);
	        y = this.y;
	      }

	      b(x, from, to, Ax);
	      b(y, from, to, Ay);
	      return this;
	    }

	    b(x, from, to, Ax);
	    if (y) b(y, from, to, numeric.rep(numeric.dim(Ax), 0));
	  };

	  numeric.T.rep = function rep(s, v) {
	    var T = numeric.T;
	    if (!(v instanceof T)) v = new T(v);
	    var x = v.x,
	        y = v.y,
	        r = numeric.rep;
	    if (y) return new T(r(s, x), r(s, y));
	    return new T(r(s, x));
	  };

	  numeric.T.diag = function diag(d) {
	    if (!(d instanceof numeric.T)) d = new numeric.T(d);
	    var x = d.x,
	        y = d.y,
	        diag = numeric.diag;
	    if (y) return new numeric.T(diag(x), diag(y));
	    return new numeric.T(diag(x));
	  };

	  numeric.T.eig = function eig() {
	    if (this.y) {
	      throw new Error('eig: not implemented for complex matrices.');
	    }

	    return numeric.eig(this.x);
	  };

	  numeric.T.identity = function identity(n) {
	    return new numeric.T(numeric.identity(n));
	  };

	  numeric.T.prototype.getDiag = function getDiag() {
	    var n = numeric;
	    var x = this.x,
	        y = this.y;

	    if (y) {
	      return new n.T(n.getDiag(x), n.getDiag(y));
	    }

	    return new n.T(n.getDiag(x));
	  }; // 4. Eigenvalues of real matrices


	  numeric.house = function house(x) {
	    var v = numeric.clone(x);
	    var s = x[0] >= 0 ? 1 : -1;
	    var alpha = s * numeric.norm2(x);
	    v[0] += alpha;
	    var foo = numeric.norm2(v);

	    if (foo === 0) {
	      /* this should not happen */
	      throw new Error('eig: internal error');
	    }

	    return numeric.div(v, foo);
	  };

	  numeric.toUpperHessenberg = function toUpperHessenberg(me) {
	    var s = numeric.dim(me);

	    if (s.length !== 2 || s[0] !== s[1]) {
	      throw new Error('numeric: toUpperHessenberg() only works on square matrices');
	    }

	    var m = s[0],
	        i,
	        j,
	        k,
	        x,
	        v,
	        A = numeric.clone(me),
	        B,
	        C,
	        Ai,
	        Ci,
	        Q = numeric.identity(m),
	        Qi;

	    for (j = 0; j < m - 2; j++) {
	      x = Array(m - j - 1);

	      for (i = j + 1; i < m; i++) {
	        x[i - j - 1] = A[i][j];
	      }

	      if (numeric.norm2(x) > 0) {
	        v = numeric.house(x);
	        B = numeric.getBlock(A, [j + 1, j], [m - 1, m - 1]);
	        C = numeric.tensor(v, numeric.dot(v, B));

	        for (i = j + 1; i < m; i++) {
	          Ai = A[i];
	          Ci = C[i - j - 1];

	          for (k = j; k < m; k++) Ai[k] -= 2 * Ci[k - j];
	        }

	        B = numeric.getBlock(A, [0, j + 1], [m - 1, m - 1]);
	        C = numeric.tensor(numeric.dot(B, v), v);

	        for (i = 0; i < m; i++) {
	          Ai = A[i];
	          Ci = C[i];

	          for (k = j + 1; k < m; k++) Ai[k] -= 2 * Ci[k - j - 1];
	        }

	        B = Array(m - j - 1);

	        for (i = j + 1; i < m; i++) B[i - j - 1] = Q[i];

	        C = numeric.tensor(v, numeric.dot(v, B));

	        for (i = j + 1; i < m; i++) {
	          Qi = Q[i];
	          Ci = C[i - j - 1];

	          for (k = 0; k < m; k++) Qi[k] -= 2 * Ci[k];
	        }
	      }
	    }

	    return {
	      H: A,
	      Q: Q
	    };
	  };

	  numeric.epsilon = 2.220446049250313e-16;

	  numeric.QRFrancis = function (H, maxiter) {
	    if (typeof maxiter === "undefined") {
	      maxiter = 10000;
	    }

	    H = numeric.clone(H);
	    var H0 = numeric.clone(H);
	    var s = numeric.dim(H),
	        m = s[0],
	        x,
	        v,
	        a,
	        b,
	        c,
	        d,
	        det,
	        tr,
	        Hloc,
	        Q = numeric.identity(m),
	        Qi,
	        Hi,
	        B,
	        C,
	        Ci,
	        i,
	        j,
	        k,
	        iter;

	    if (m < 3) {
	      return {
	        Q: Q,
	        B: [[0, m - 1]]
	      };
	    }

	    var epsilon = numeric.epsilon;

	    for (iter = 0; iter < maxiter; iter++) {
	      for (j = 0; j < m - 1; j++) {
	        if (Math.abs(H[j + 1][j]) < epsilon * (Math.abs(H[j][j]) + Math.abs(H[j + 1][j + 1]))) {
	          var QH1 = numeric.QRFrancis(numeric.getBlock(H, [0, 0], [j, j]), maxiter);
	          var QH2 = numeric.QRFrancis(numeric.getBlock(H, [j + 1, j + 1], [m - 1, m - 1]), maxiter);
	          B = Array(j + 1);

	          for (i = 0; i <= j; i++) {
	            B[i] = Q[i];
	          }

	          C = numeric.dot(QH1.Q, B);

	          for (i = 0; i <= j; i++) {
	            Q[i] = C[i];
	          }

	          B = Array(m - j - 1);

	          for (i = j + 1; i < m; i++) {
	            B[i - j - 1] = Q[i];
	          }

	          C = numeric.dot(QH2.Q, B);

	          for (i = j + 1; i < m; i++) {
	            Q[i] = C[i - j - 1];
	          }

	          return {
	            Q: Q,
	            B: QH1.B.concat(numeric.add(QH2.B, j + 1))
	          };
	        }
	      }

	      a = H[m - 2][m - 2];
	      b = H[m - 2][m - 1];
	      c = H[m - 1][m - 2];
	      d = H[m - 1][m - 1];
	      tr = a + d;
	      det = a * d - b * c;
	      Hloc = numeric.getBlock(H, [0, 0], [2, 2]);

	      if (tr * tr >= 4 * det) {
	        var s1, s2;
	        s1 = 0.5 * (tr + Math.sqrt(tr * tr - 4 * det));
	        s2 = 0.5 * (tr - Math.sqrt(tr * tr - 4 * det));
	        Hloc = numeric.add(numeric.sub(numeric.dot(Hloc, Hloc), numeric.mul(Hloc, s1 + s2)), numeric.diag(numeric.rep([3], s1 * s2)));
	      } else {
	        Hloc = numeric.add(numeric.sub(numeric.dot(Hloc, Hloc), numeric.mul(Hloc, tr)), numeric.diag(numeric.rep([3], det)));
	      }

	      x = [Hloc[0][0], Hloc[1][0], Hloc[2][0]];
	      v = numeric.house(x);
	      B = [H[0], H[1], H[2]];
	      C = numeric.tensor(v, numeric.dot(v, B));

	      for (i = 0; i < 3; i++) {
	        Hi = H[i];
	        Ci = C[i];

	        for (k = 0; k < m; k++) Hi[k] -= 2 * Ci[k];
	      }

	      B = numeric.getBlock(H, [0, 0], [m - 1, 2]);
	      C = numeric.tensor(numeric.dot(B, v), v);

	      for (i = 0; i < m; i++) {
	        Hi = H[i];
	        Ci = C[i];

	        for (k = 0; k < 3; k++) Hi[k] -= 2 * Ci[k];
	      }

	      B = [Q[0], Q[1], Q[2]];
	      C = numeric.tensor(v, numeric.dot(v, B));

	      for (i = 0; i < 3; i++) {
	        Qi = Q[i];
	        Ci = C[i];

	        for (k = 0; k < m; k++) Qi[k] -= 2 * Ci[k];
	      }

	      var J;

	      for (j = 0; j < m - 2; j++) {
	        for (k = j; k <= j + 1; k++) {
	          if (Math.abs(H[k + 1][k]) < epsilon * (Math.abs(H[k][k]) + Math.abs(H[k + 1][k + 1]))) {
	            var QH1 = numeric.QRFrancis(numeric.getBlock(H, [0, 0], [k, k]), maxiter);
	            var QH2 = numeric.QRFrancis(numeric.getBlock(H, [k + 1, k + 1], [m - 1, m - 1]), maxiter);
	            B = Array(k + 1);

	            for (i = 0; i <= k; i++) {
	              B[i] = Q[i];
	            }

	            C = numeric.dot(QH1.Q, B);

	            for (i = 0; i <= k; i++) {
	              Q[i] = C[i];
	            }

	            B = Array(m - k - 1);

	            for (i = k + 1; i < m; i++) {
	              B[i - k - 1] = Q[i];
	            }

	            C = numeric.dot(QH2.Q, B);

	            for (i = k + 1; i < m; i++) {
	              Q[i] = C[i - k - 1];
	            }

	            return {
	              Q: Q,
	              B: QH1.B.concat(numeric.add(QH2.B, k + 1))
	            };
	          }
	        }

	        J = Math.min(m - 1, j + 3);
	        x = Array(J - j);

	        for (i = j + 1; i <= J; i++) {
	          x[i - j - 1] = H[i][j];
	        }

	        v = numeric.house(x);
	        B = numeric.getBlock(H, [j + 1, j], [J, m - 1]);
	        C = numeric.tensor(v, numeric.dot(v, B));

	        for (i = j + 1; i <= J; i++) {
	          Hi = H[i];
	          Ci = C[i - j - 1];

	          for (k = j; k < m; k++) Hi[k] -= 2 * Ci[k - j];
	        }

	        B = numeric.getBlock(H, [0, j + 1], [m - 1, J]);
	        C = numeric.tensor(numeric.dot(B, v), v);

	        for (i = 0; i < m; i++) {
	          Hi = H[i];
	          Ci = C[i];

	          for (k = j + 1; k <= J; k++) Hi[k] -= 2 * Ci[k - j - 1];
	        }

	        B = Array(J - j);

	        for (i = j + 1; i <= J; i++) B[i - j - 1] = Q[i];

	        C = numeric.tensor(v, numeric.dot(v, B));

	        for (i = j + 1; i <= J; i++) {
	          Qi = Q[i];
	          Ci = C[i - j - 1];

	          for (k = 0; k < m; k++) Qi[k] -= 2 * Ci[k];
	        }
	      }
	    }

	    throw new Error('numeric: eigenvalue iteration does not converge -- increase maxiter?');
	  };

	  numeric.eig = function eig(A, maxiter) {
	    var QH = numeric.toUpperHessenberg(A);
	    var QB = numeric.QRFrancis(QH.H, maxiter);
	    var T = numeric.T;
	    var n = A.length,
	        i,
	        k,
	        B = QB.B,
	        H = numeric.dot(QB.Q, numeric.dot(QH.H, numeric.transpose(QB.Q)));
	    var Q = new T(numeric.dot(QB.Q, QH.Q)),
	        Q0;
	    var m = B.length,
	        j;
	    var a, b, c, d, p1, p2, disc, x, y, p, q, n1, n2;
	    var sqrt = Math.sqrt;

	    for (k = 0; k < m; k++) {
	      i = B[k][0];

	      if (i === B[k][1]) ; else {
	        j = i + 1;
	        a = H[i][i];
	        b = H[i][j];
	        c = H[j][i];
	        d = H[j][j];
	        if (b === 0 && c === 0) continue;
	        p1 = -a - d;
	        p2 = a * d - b * c;
	        disc = p1 * p1 - 4 * p2;

	        if (disc >= 0) {
	          if (p1 < 0) x = -0.5 * (p1 - sqrt(disc));else x = -0.5 * (p1 + sqrt(disc));
	          n1 = (a - x) * (a - x) + b * b;
	          n2 = c * c + (d - x) * (d - x);

	          if (n1 > n2) {
	            n1 = sqrt(n1);
	            p = (a - x) / n1;
	            q = b / n1;
	          } else {
	            n2 = sqrt(n2);
	            p = c / n2;
	            q = (d - x) / n2;
	          }

	          Q0 = new T([[q, -p], [p, q]]);
	          Q.setRows(i, j, Q0.dot(Q.getRows(i, j)));
	        } else {
	          x = -0.5 * p1;
	          y = 0.5 * sqrt(-disc);
	          n1 = (a - x) * (a - x) + b * b;
	          n2 = c * c + (d - x) * (d - x);

	          if (n1 > n2) {
	            n1 = sqrt(n1 + y * y);
	            p = (a - x) / n1;
	            q = b / n1;
	            x = 0;
	            y /= n1;
	          } else {
	            n2 = sqrt(n2 + y * y);
	            p = c / n2;
	            q = (d - x) / n2;
	            x = y / n2;
	            y = 0;
	          }

	          Q0 = new T([[q, -p], [p, q]], [[x, y], [y, -x]]);
	          Q.setRows(i, j, Q0.dot(Q.getRows(i, j)));
	        }
	      }
	    }

	    var R = Q.dot(A).dot(Q.transjugate()),
	        n = A.length,
	        E = numeric.T.identity(n);

	    for (j = 0; j < n; j++) {
	      if (j > 0) {
	        for (k = j - 1; k >= 0; k--) {
	          var Rk = R.get([k, k]),
	              Rj = R.get([j, j]);

	          if (numeric.neq(Rk.x, Rj.x) || numeric.neq(Rk.y, Rj.y)) {
	            x = R.getRow(k).getBlock([k], [j - 1]);
	            y = E.getRow(j).getBlock([k], [j - 1]);
	            E.set([j, k], R.get([k, j]).neg().sub(x.dot(y)).div(Rk.sub(Rj)));
	          } else {
	            E.setRow(j, E.getRow(k));
	            continue;
	          }
	        }
	      }
	    }

	    for (j = 0; j < n; j++) {
	      x = E.getRow(j);
	      E.setRow(j, x.div(x.norm2()));
	    }

	    E = E.transpose();
	    E = Q.transjugate().dot(E);
	    return {
	      lambda: R.getDiag(),
	      E: E
	    };
	  }; // 5. Compressed Column Storage matrices


	  numeric.ccsSparse = function ccsSparse(A) {
	    var m = A.length,
	        n,
	        foo,
	        i,
	        j,
	        counts = [];

	    for (i = m - 1; i !== -1; --i) {
	      foo = A[i];

	      for (j in foo) {
	        j = parseInt(j);

	        while (j >= counts.length) counts[counts.length] = 0;

	        if (foo[j] !== 0) counts[j]++;
	      }
	    }

	    var n = counts.length;
	    var Ai = Array(n + 1);
	    Ai[0] = 0;

	    for (i = 0; i < n; ++i) Ai[i + 1] = Ai[i] + counts[i];

	    var Aj = Array(Ai[n]),
	        Av = Array(Ai[n]);

	    for (i = m - 1; i !== -1; --i) {
	      foo = A[i];

	      for (j in foo) {
	        if (foo[j] !== 0) {
	          counts[j]--;
	          Aj[Ai[j] + counts[j]] = i;
	          Av[Ai[j] + counts[j]] = foo[j];
	        }
	      }
	    }

	    return [Ai, Aj, Av];
	  };

	  numeric.ccsFull = function ccsFull(A) {
	    var Ai = A[0],
	        Aj = A[1],
	        Av = A[2],
	        s = numeric.ccsDim(A),
	        m = s[0],
	        n = s[1],
	        i,
	        j,
	        j0,
	        j1;
	    var B = numeric.rep([m, n], 0);

	    for (i = 0; i < n; i++) {
	      j0 = Ai[i];
	      j1 = Ai[i + 1];

	      for (j = j0; j < j1; ++j) {
	        B[Aj[j]][i] = Av[j];
	      }
	    }

	    return B;
	  };

	  numeric.ccsTSolve = function ccsTSolve(A, b, x, bj, xj) {
	    var Ai = A[0],
	        Aj = A[1],
	        Av = A[2],
	        m = Ai.length - 1,
	        max = Math.max,
	        n = 0;
	    if (typeof bj === "undefined") x = numeric.rep([m], 0);
	    if (typeof bj === "undefined") bj = numeric.linspace(0, x.length - 1);
	    if (typeof xj === "undefined") xj = [];

	    function dfs(j) {
	      var k;
	      if (x[j] !== 0) return;
	      x[j] = 1;

	      for (k = Ai[j]; k < Ai[j + 1]; ++k) dfs(Aj[k]);

	      xj[n] = j;
	      ++n;
	    }

	    var i, j, j0, j1, k, l, a;

	    for (i = bj.length - 1; i !== -1; --i) {
	      dfs(bj[i]);
	    }

	    xj.length = n;

	    for (i = xj.length - 1; i !== -1; --i) {
	      x[xj[i]] = 0;
	    }

	    for (i = bj.length - 1; i !== -1; --i) {
	      j = bj[i];
	      x[j] = b[j];
	    }

	    for (i = xj.length - 1; i !== -1; --i) {
	      j = xj[i];
	      j0 = Ai[j];
	      j1 = max(Ai[j + 1], j0);

	      for (k = j0; k !== j1; ++k) {
	        if (Aj[k] === j) {
	          x[j] /= Av[k];
	          break;
	        }
	      }

	      a = x[j];

	      for (k = j0; k !== j1; ++k) {
	        l = Aj[k];
	        if (l !== j) x[l] -= a * Av[k];
	      }
	    }

	    return x;
	  };

	  numeric.ccsDFS = function ccsDFS(n) {
	    this.k = Array(n);
	    this.k1 = Array(n);
	    this.j = Array(n);
	  };

	  numeric.ccsDFS.prototype.dfs = function dfs(J, Ai, Aj, x, xj, Pinv) {
	    var m = 0,
	        foo,
	        n = xj.length;
	    var k = this.k,
	        k1 = this.k1,
	        j = this.j,
	        km,
	        k11;
	    if (x[J] !== 0) return;
	    x[J] = 1;
	    j[0] = J;
	    k[0] = km = Ai[J];
	    k1[0] = k11 = Ai[J + 1];

	    while (1) {
	      if (km >= k11) {
	        xj[n] = j[m];
	        if (m === 0) return;
	        ++n;
	        --m;
	        km = k[m];
	        k11 = k1[m];
	      } else {
	        foo = Pinv[Aj[km]];

	        if (x[foo] === 0) {
	          x[foo] = 1;
	          k[m] = km;
	          ++m;
	          j[m] = foo;
	          km = Ai[foo];
	          k1[m] = k11 = Ai[foo + 1];
	        } else ++km;
	      }
	    }
	  };

	  numeric.ccsLPSolve = function ccsLPSolve(A, B, x, xj, I, Pinv, dfs) {
	    var Ai = A[0],
	        Aj = A[1],
	        Av = A[2],
	        m = Ai.length - 1;
	    var Bi = B[0],
	        Bj = B[1],
	        Bv = B[2];
	    var i, i0, i1, j, j0, j1, k, l, a;
	    i0 = Bi[I];
	    i1 = Bi[I + 1];
	    xj.length = 0;

	    for (i = i0; i < i1; ++i) {
	      dfs.dfs(Pinv[Bj[i]], Ai, Aj, x, xj, Pinv);
	    }

	    for (i = xj.length - 1; i !== -1; --i) {
	      x[xj[i]] = 0;
	    }

	    for (i = i0; i !== i1; ++i) {
	      j = Pinv[Bj[i]];
	      x[j] = Bv[i];
	    }

	    for (i = xj.length - 1; i !== -1; --i) {
	      j = xj[i];
	      j0 = Ai[j];
	      j1 = Ai[j + 1];

	      for (k = j0; k < j1; ++k) {
	        if (Pinv[Aj[k]] === j) {
	          x[j] /= Av[k];
	          break;
	        }
	      }

	      a = x[j];

	      for (k = j0; k < j1; ++k) {
	        l = Pinv[Aj[k]];
	        if (l !== j) x[l] -= a * Av[k];
	      }
	    }

	    return x;
	  };

	  numeric.ccsLUP1 = function ccsLUP1(A, threshold) {
	    var m = A[0].length - 1;
	    var L = [numeric.rep([m + 1], 0), [], []],
	        U = [numeric.rep([m + 1], 0), [], []];
	    var Li = L[0],
	        Lj = L[1],
	        Lv = L[2],
	        Ui = U[0],
	        Uj = U[1],
	        Uv = U[2];
	    var x = numeric.rep([m], 0),
	        xj = numeric.rep([m], 0);
	    var i, j, k, a, e, c, d;
	    var sol = numeric.ccsLPSolve,
	        abs = Math.abs;
	    var P = numeric.linspace(0, m - 1),
	        Pinv = numeric.linspace(0, m - 1);
	    var dfs = new numeric.ccsDFS(m);

	    if (typeof threshold === "undefined") {
	      threshold = 1;
	    }

	    for (i = 0; i < m; ++i) {
	      sol(L, A, x, xj, i, Pinv, dfs);
	      a = -1;
	      e = -1;

	      for (j = xj.length - 1; j !== -1; --j) {
	        k = xj[j];
	        if (k <= i) continue;
	        c = abs(x[k]);

	        if (c > a) {
	          e = k;
	          a = c;
	        }
	      }

	      if (abs(x[i]) < threshold * a) {
	        j = P[i];
	        a = P[e];
	        P[i] = a;
	        Pinv[a] = i;
	        P[e] = j;
	        Pinv[j] = e;
	        a = x[i];
	        x[i] = x[e];
	        x[e] = a;
	      }

	      a = Li[i];
	      e = Ui[i];
	      d = x[i];
	      Lj[a] = P[i];
	      Lv[a] = 1;
	      ++a;

	      for (j = xj.length - 1; j !== -1; --j) {
	        k = xj[j];
	        c = x[k];
	        xj[j] = 0;
	        x[k] = 0;

	        if (k <= i) {
	          Uj[e] = k;
	          Uv[e] = c;
	          ++e;
	        } else {
	          Lj[a] = P[k];
	          Lv[a] = c / d;
	          ++a;
	        }
	      }

	      Li[i + 1] = a;
	      Ui[i + 1] = e;
	    }

	    for (j = Lj.length - 1; j !== -1; --j) {
	      Lj[j] = Pinv[Lj[j]];
	    }

	    return {
	      L: L,
	      U: U,
	      P: P,
	      Pinv: Pinv
	    };
	  };

	  numeric.ccsDFS0 = function ccsDFS0(n) {
	    this.k = Array(n);
	    this.k1 = Array(n);
	    this.j = Array(n);
	  };

	  numeric.ccsDFS0.prototype.dfs = function dfs(J, Ai, Aj, x, xj, Pinv, P) {
	    var m = 0,
	        foo,
	        n = xj.length;
	    var k = this.k,
	        k1 = this.k1,
	        j = this.j,
	        km,
	        k11;
	    if (x[J] !== 0) return;
	    x[J] = 1;
	    j[0] = J;
	    k[0] = km = Ai[Pinv[J]];
	    k1[0] = k11 = Ai[Pinv[J] + 1];

	    while (1) {
	      if (isNaN(km)) throw new Error("Ow!");

	      if (km >= k11) {
	        xj[n] = Pinv[j[m]];
	        if (m === 0) return;
	        ++n;
	        --m;
	        km = k[m];
	        k11 = k1[m];
	      } else {
	        foo = Aj[km];

	        if (x[foo] === 0) {
	          x[foo] = 1;
	          k[m] = km;
	          ++m;
	          j[m] = foo;
	          foo = Pinv[foo];
	          km = Ai[foo];
	          k1[m] = k11 = Ai[foo + 1];
	        } else ++km;
	      }
	    }
	  };

	  numeric.ccsLPSolve0 = function ccsLPSolve0(A, B, y, xj, I, Pinv, P, dfs) {
	    var Ai = A[0],
	        Aj = A[1],
	        Av = A[2],
	        m = Ai.length - 1;
	    var Bi = B[0],
	        Bj = B[1],
	        Bv = B[2];
	    var i, i0, i1, j, j0, j1, k, l, a;
	    i0 = Bi[I];
	    i1 = Bi[I + 1];
	    xj.length = 0;

	    for (i = i0; i < i1; ++i) {
	      dfs.dfs(Bj[i], Ai, Aj, y, xj, Pinv, P);
	    }

	    for (i = xj.length - 1; i !== -1; --i) {
	      j = xj[i];
	      y[P[j]] = 0;
	    }

	    for (i = i0; i !== i1; ++i) {
	      j = Bj[i];
	      y[j] = Bv[i];
	    }

	    for (i = xj.length - 1; i !== -1; --i) {
	      j = xj[i];
	      l = P[j];
	      j0 = Ai[j];
	      j1 = Ai[j + 1];

	      for (k = j0; k < j1; ++k) {
	        if (Aj[k] === l) {
	          y[l] /= Av[k];
	          break;
	        }
	      }

	      a = y[l];

	      for (k = j0; k < j1; ++k) y[Aj[k]] -= a * Av[k];

	      y[l] = a;
	    }
	  };

	  numeric.ccsLUP0 = function ccsLUP0(A, threshold) {
	    var m = A[0].length - 1;
	    var L = [numeric.rep([m + 1], 0), [], []],
	        U = [numeric.rep([m + 1], 0), [], []];
	    var Li = L[0],
	        Lj = L[1],
	        Lv = L[2],
	        Ui = U[0],
	        Uj = U[1],
	        Uv = U[2];
	    var y = numeric.rep([m], 0),
	        xj = numeric.rep([m], 0);
	    var i, j, k, a, e, c, d;
	    var sol = numeric.ccsLPSolve0,
	        abs = Math.abs;
	    var P = numeric.linspace(0, m - 1),
	        Pinv = numeric.linspace(0, m - 1);
	    var dfs = new numeric.ccsDFS0(m);

	    if (typeof threshold === "undefined") {
	      threshold = 1;
	    }

	    for (i = 0; i < m; ++i) {
	      sol(L, A, y, xj, i, Pinv, P, dfs);
	      a = -1;
	      e = -1;

	      for (j = xj.length - 1; j !== -1; --j) {
	        k = xj[j];
	        if (k <= i) continue;
	        c = abs(y[P[k]]);

	        if (c > a) {
	          e = k;
	          a = c;
	        }
	      }

	      if (abs(y[P[i]]) < threshold * a) {
	        j = P[i];
	        a = P[e];
	        P[i] = a;
	        Pinv[a] = i;
	        P[e] = j;
	        Pinv[j] = e;
	      }

	      a = Li[i];
	      e = Ui[i];
	      d = y[P[i]];
	      Lj[a] = P[i];
	      Lv[a] = 1;
	      ++a;

	      for (j = xj.length - 1; j !== -1; --j) {
	        k = xj[j];
	        c = y[P[k]];
	        xj[j] = 0;
	        y[P[k]] = 0;

	        if (k <= i) {
	          Uj[e] = k;
	          Uv[e] = c;
	          ++e;
	        } else {
	          Lj[a] = P[k];
	          Lv[a] = c / d;
	          ++a;
	        }
	      }

	      Li[i + 1] = a;
	      Ui[i + 1] = e;
	    }

	    for (j = Lj.length - 1; j !== -1; --j) {
	      Lj[j] = Pinv[Lj[j]];
	    }

	    return {
	      L: L,
	      U: U,
	      P: P,
	      Pinv: Pinv
	    };
	  };

	  numeric.ccsLUP = numeric.ccsLUP0;

	  numeric.ccsDim = function ccsDim(A) {
	    return [numeric.sup(A[1]) + 1, A[0].length - 1];
	  };

	  numeric.ccsGetBlock = function ccsGetBlock(A, i, j) {
	    var s = numeric.ccsDim(A),
	        m = s[0],
	        n = s[1];

	    if (typeof i === "undefined") {
	      i = numeric.linspace(0, m - 1);
	    } else if (typeof i === "number") {
	      i = [i];
	    }

	    if (typeof j === "undefined") {
	      j = numeric.linspace(0, n - 1);
	    } else if (typeof j === "number") {
	      j = [j];
	    }

	    var p,
	        P = i.length,
	        q,
	        Q = j.length,
	        r,
	        jq,
	        ip;
	    var Bi = numeric.rep([n], 0),
	        Bj = [],
	        Bv = [],
	        B = [Bi, Bj, Bv];
	    var Ai = A[0],
	        Aj = A[1],
	        Av = A[2];
	    var x = numeric.rep([m], 0),
	        count = 0,
	        flags = numeric.rep([m], 0);

	    for (q = 0; q < Q; ++q) {
	      jq = j[q];
	      var q0 = Ai[jq];
	      var q1 = Ai[jq + 1];

	      for (p = q0; p < q1; ++p) {
	        r = Aj[p];
	        flags[r] = 1;
	        x[r] = Av[p];
	      }

	      for (p = 0; p < P; ++p) {
	        ip = i[p];

	        if (flags[ip]) {
	          Bj[count] = p;
	          Bv[count] = x[i[p]];
	          ++count;
	        }
	      }

	      for (p = q0; p < q1; ++p) {
	        r = Aj[p];
	        flags[r] = 0;
	      }

	      Bi[q + 1] = count;
	    }

	    return B;
	  };

	  numeric.ccsDot = function ccsDot(A, B) {
	    var Ai = A[0],
	        Aj = A[1],
	        Av = A[2];
	    var Bi = B[0],
	        Bj = B[1],
	        Bv = B[2];
	    var sA = numeric.ccsDim(A),
	        sB = numeric.ccsDim(B);
	    var m = sA[0],
	        n = sA[1],
	        o = sB[1];
	    var x = numeric.rep([m], 0),
	        flags = numeric.rep([m], 0),
	        xj = Array(m);
	    var Ci = numeric.rep([o], 0),
	        Cj = [],
	        Cv = [],
	        C = [Ci, Cj, Cv];
	    var i, j, k, j0, j1, i0, i1, l, p, a, b;

	    for (k = 0; k !== o; ++k) {
	      j0 = Bi[k];
	      j1 = Bi[k + 1];
	      p = 0;

	      for (j = j0; j < j1; ++j) {
	        a = Bj[j];
	        b = Bv[j];
	        i0 = Ai[a];
	        i1 = Ai[a + 1];

	        for (i = i0; i < i1; ++i) {
	          l = Aj[i];

	          if (flags[l] === 0) {
	            xj[p] = l;
	            flags[l] = 1;
	            p = p + 1;
	          }

	          x[l] = x[l] + Av[i] * b;
	        }
	      }

	      j0 = Ci[k];
	      j1 = j0 + p;
	      Ci[k + 1] = j1;

	      for (j = p - 1; j !== -1; --j) {
	        b = j0 + j;
	        i = xj[j];
	        Cj[b] = i;
	        Cv[b] = x[i];
	        flags[i] = 0;
	        x[i] = 0;
	      }

	      Ci[k + 1] = Ci[k] + p;
	    }

	    return C;
	  };

	  numeric.ccsLUPSolve = function ccsLUPSolve(LUP, B) {
	    var L = LUP.L,
	        U = LUP.U,
	        P = LUP.P;
	    var Bi = B[0];
	    var flag = false;

	    if (typeof Bi !== "object") {
	      B = [[0, B.length], numeric.linspace(0, B.length - 1), B];
	      Bi = B[0];
	      flag = true;
	    }

	    var Bj = B[1],
	        Bv = B[2];
	    var n = L[0].length - 1,
	        m = Bi.length - 1;
	    var x = numeric.rep([n], 0),
	        xj = Array(n);
	    var b = numeric.rep([n], 0),
	        bj = Array(n);
	    var Xi = numeric.rep([m + 1], 0),
	        Xj = [],
	        Xv = [];
	    var sol = numeric.ccsTSolve;
	    var i,
	        j,
	        j0,
	        j1,
	        k,
	        J,
	        N = 0;

	    for (i = 0; i < m; ++i) {
	      k = 0;
	      j0 = Bi[i];
	      j1 = Bi[i + 1];

	      for (j = j0; j < j1; ++j) {
	        J = LUP.Pinv[Bj[j]];
	        bj[k] = J;
	        b[J] = Bv[j];
	        ++k;
	      }

	      bj.length = k;
	      sol(L, b, x, bj, xj);

	      for (j = bj.length - 1; j !== -1; --j) b[bj[j]] = 0;

	      sol(U, x, b, xj, bj);
	      if (flag) return b;

	      for (j = xj.length - 1; j !== -1; --j) x[xj[j]] = 0;

	      for (j = bj.length - 1; j !== -1; --j) {
	        J = bj[j];
	        Xj[N] = J;
	        Xv[N] = b[J];
	        b[J] = 0;
	        ++N;
	      }

	      Xi[i + 1] = N;
	    }

	    return [Xi, Xj, Xv];
	  };

	  numeric.ccsbinop = function ccsbinop(body, setup) {
	    if (typeof setup === "undefined") setup = '';
	    return Function('X', 'Y', 'var Xi = X[0], Xj = X[1], Xv = X[2];\n' + 'var Yi = Y[0], Yj = Y[1], Yv = Y[2];\n' + 'var n = Xi.length-1,m = Math.max(numeric.sup(Xj),numeric.sup(Yj))+1;\n' + 'var Zi = numeric.rep([n+1],0), Zj = [], Zv = [];\n' + 'var x = numeric.rep([m],0),y = numeric.rep([m],0);\n' + 'var xk,yk,zk;\n' + 'var i,j,j0,j1,k,p=0;\n' + setup + 'for(i=0;i<n;++i) {\n' + '  j0 = Xi[i]; j1 = Xi[i+1];\n' + '  for(j=j0;j!==j1;++j) {\n' + '    k = Xj[j];\n' + '    x[k] = 1;\n' + '    Zj[p] = k;\n' + '    ++p;\n' + '  }\n' + '  j0 = Yi[i]; j1 = Yi[i+1];\n' + '  for(j=j0;j!==j1;++j) {\n' + '    k = Yj[j];\n' + '    y[k] = Yv[j];\n' + '    if(x[k] === 0) {\n' + '      Zj[p] = k;\n' + '      ++p;\n' + '    }\n' + '  }\n' + '  Zi[i+1] = p;\n' + '  j0 = Xi[i]; j1 = Xi[i+1];\n' + '  for(j=j0;j!==j1;++j) x[Xj[j]] = Xv[j];\n' + '  j0 = Zi[i]; j1 = Zi[i+1];\n' + '  for(j=j0;j!==j1;++j) {\n' + '    k = Zj[j];\n' + '    xk = x[k];\n' + '    yk = y[k];\n' + body + '\n' + '    Zv[j] = zk;\n' + '  }\n' + '  j0 = Xi[i]; j1 = Xi[i+1];\n' + '  for(j=j0;j!==j1;++j) x[Xj[j]] = 0;\n' + '  j0 = Yi[i]; j1 = Yi[i+1];\n' + '  for(j=j0;j!==j1;++j) y[Yj[j]] = 0;\n' + '}\n' + 'return [Zi,Zj,Zv];');
	  };

	  (function () {
	    var k, A, B, C;

	    for (k in numeric.ops2) {
	      if (isFinite(eval('1' + numeric.ops2[k] + '0'))) A = '[Y[0],Y[1],numeric.' + k + '(X,Y[2])]';else A = 'NaN';
	      if (isFinite(eval('0' + numeric.ops2[k] + '1'))) B = '[X[0],X[1],numeric.' + k + '(X[2],Y)]';else B = 'NaN';
	      if (isFinite(eval('1' + numeric.ops2[k] + '0')) && isFinite(eval('0' + numeric.ops2[k] + '1'))) C = 'numeric.ccs' + k + 'MM(X,Y)';else C = 'NaN';
	      numeric['ccs' + k + 'MM'] = numeric.ccsbinop('zk = xk ' + numeric.ops2[k] + 'yk;');
	      numeric['ccs' + k] = Function('X', 'Y', 'if(typeof X === "number") return ' + A + ';\n' + 'if(typeof Y === "number") return ' + B + ';\n' + 'return ' + C + ';\n');
	    }
	  })();

	  numeric.ccsScatter = function ccsScatter(A) {
	    var Ai = A[0],
	        Aj = A[1],
	        Av = A[2];
	    var n = numeric.sup(Aj) + 1,
	        m = Ai.length;
	    var Ri = numeric.rep([n], 0),
	        Rj = Array(m),
	        Rv = Array(m);
	    var counts = numeric.rep([n], 0),
	        i;

	    for (i = 0; i < m; ++i) counts[Aj[i]]++;

	    for (i = 0; i < n; ++i) Ri[i + 1] = Ri[i] + counts[i];

	    var ptr = Ri.slice(0),
	        k,
	        Aii;

	    for (i = 0; i < m; ++i) {
	      Aii = Aj[i];
	      k = ptr[Aii];
	      Rj[k] = Ai[i];
	      Rv[k] = Av[i];
	      ptr[Aii] = ptr[Aii] + 1;
	    }

	    return [Ri, Rj, Rv];
	  };

	  numeric.ccsGather = function ccsGather(A) {
	    var Ai = A[0],
	        Aj = A[1],
	        Av = A[2];
	    var n = Ai.length - 1,
	        m = Aj.length;
	    var Ri = Array(m),
	        Rj = Array(m),
	        Rv = Array(m);
	    var i, j, j0, j1, p;
	    p = 0;

	    for (i = 0; i < n; ++i) {
	      j0 = Ai[i];
	      j1 = Ai[i + 1];

	      for (j = j0; j !== j1; ++j) {
	        Rj[p] = i;
	        Ri[p] = Aj[j];
	        Rv[p] = Av[j];
	        ++p;
	      }
	    }

	    return [Ri, Rj, Rv];
	  }; // The following sparse linear algebra routines are deprecated.


	  numeric.sdim = function dim(A, ret, k) {
	    if (typeof ret === "undefined") {
	      ret = [];
	    }

	    if (typeof A !== "object") return ret;

	    if (typeof k === "undefined") {
	      k = 0;
	    }

	    if (!(k in ret)) {
	      ret[k] = 0;
	    }

	    if (A.length > ret[k]) ret[k] = A.length;
	    var i;

	    for (i in A) {
	      if (A.hasOwnProperty(i)) dim(A[i], ret, k + 1);
	    }

	    return ret;
	  };

	  numeric.sclone = function clone(A, k, n) {
	    if (typeof k === "undefined") {
	      k = 0;
	    }

	    if (typeof n === "undefined") {
	      n = numeric.sdim(A).length;
	    }

	    var i,
	        ret = Array(A.length);

	    if (k === n - 1) {
	      for (i in A) {
	        if (A.hasOwnProperty(i)) ret[i] = A[i];
	      }

	      return ret;
	    }

	    for (i in A) {
	      if (A.hasOwnProperty(i)) ret[i] = clone(A[i], k + 1, n);
	    }

	    return ret;
	  };

	  numeric.sdiag = function diag(d) {
	    var n = d.length,
	        i,
	        ret = Array(n),
	        i1;

	    for (i = n - 1; i >= 1; i -= 2) {
	      i1 = i - 1;
	      ret[i] = [];
	      ret[i][i] = d[i];
	      ret[i1] = [];
	      ret[i1][i1] = d[i1];
	    }

	    if (i === 0) {
	      ret[0] = [];
	      ret[0][0] = d[i];
	    }

	    return ret;
	  };

	  numeric.sidentity = function identity(n) {
	    return numeric.sdiag(numeric.rep([n], 1));
	  };

	  numeric.stranspose = function transpose(A) {
	    var ret = [],
	        n = A.length,
	        i,
	        j,
	        Ai;

	    for (i in A) {
	      if (!A.hasOwnProperty(i)) continue;
	      Ai = A[i];

	      for (j in Ai) {
	        if (!Ai.hasOwnProperty(j)) continue;

	        if (typeof ret[j] !== "object") {
	          ret[j] = [];
	        }

	        ret[j][i] = Ai[j];
	      }
	    }

	    return ret;
	  };

	  numeric.sLUP = function LUP(A, tol) {
	    throw new Error("The function numeric.sLUP had a bug in it and has been removed. Please use the new numeric.ccsLUP function instead.");
	  };

	  numeric.sdotMM = function dotMM(A, B) {
	    var p = A.length,
	        q = B.length,
	        BT = numeric.stranspose(B),
	        r = BT.length,
	        Ai,
	        BTk;
	    var i, j, k, accum;
	    var ret = Array(p),
	        reti;

	    for (i = p - 1; i >= 0; i--) {
	      reti = [];
	      Ai = A[i];

	      for (k = r - 1; k >= 0; k--) {
	        accum = 0;
	        BTk = BT[k];

	        for (j in Ai) {
	          if (!Ai.hasOwnProperty(j)) continue;

	          if (j in BTk) {
	            accum += Ai[j] * BTk[j];
	          }
	        }

	        if (accum) reti[k] = accum;
	      }

	      ret[i] = reti;
	    }

	    return ret;
	  };

	  numeric.sdotMV = function dotMV(A, x) {
	    var p = A.length,
	        Ai,
	        i,
	        j;
	    var ret = Array(p),
	        accum;

	    for (i = p - 1; i >= 0; i--) {
	      Ai = A[i];
	      accum = 0;

	      for (j in Ai) {
	        if (!Ai.hasOwnProperty(j)) continue;
	        if (x[j]) accum += Ai[j] * x[j];
	      }

	      if (accum) ret[i] = accum;
	    }

	    return ret;
	  };

	  numeric.sdotVM = function dotMV(x, A) {
	    var i, j, Ai, alpha;
	    var ret = [];

	    for (i in x) {
	      if (!x.hasOwnProperty(i)) continue;
	      Ai = A[i];
	      alpha = x[i];

	      for (j in Ai) {
	        if (!Ai.hasOwnProperty(j)) continue;

	        if (!ret[j]) {
	          ret[j] = 0;
	        }

	        ret[j] += alpha * Ai[j];
	      }
	    }

	    return ret;
	  };

	  numeric.sdotVV = function dotVV(x, y) {
	    var i,
	        ret = 0;

	    for (i in x) {
	      if (x[i] && y[i]) ret += x[i] * y[i];
	    }

	    return ret;
	  };

	  numeric.sdot = function dot(A, B) {
	    var m = numeric.sdim(A).length,
	        n = numeric.sdim(B).length;
	    var k = m * 1000 + n;

	    switch (k) {
	      case 0:
	        return A * B;

	      case 1001:
	        return numeric.sdotVV(A, B);

	      case 2001:
	        return numeric.sdotMV(A, B);

	      case 1002:
	        return numeric.sdotVM(A, B);

	      case 2002:
	        return numeric.sdotMM(A, B);

	      default:
	        throw new Error('numeric.sdot not implemented for tensors of order ' + m + ' and ' + n);
	    }
	  };

	  numeric.sscatter = function scatter(V) {
	    var n = V[0].length,
	        Vij,
	        i,
	        j,
	        m = V.length,
	        A = [],
	        Aj;

	    for (i = n - 1; i >= 0; --i) {
	      if (!V[m - 1][i]) continue;
	      Aj = A;

	      for (j = 0; j < m - 2; j++) {
	        Vij = V[j][i];
	        if (!Aj[Vij]) Aj[Vij] = [];
	        Aj = Aj[Vij];
	      }

	      Aj[V[j][i]] = V[j + 1][i];
	    }

	    return A;
	  };

	  numeric.sgather = function gather(A, ret, k) {
	    if (typeof ret === "undefined") ret = [];
	    if (typeof k === "undefined") k = [];
	    var n, i, Ai;
	    n = k.length;

	    for (i in A) {
	      if (A.hasOwnProperty(i)) {
	        k[n] = parseInt(i);
	        Ai = A[i];

	        if (typeof Ai === "number") {
	          if (Ai) {
	            if (ret.length === 0) {
	              for (i = n + 1; i >= 0; --i) ret[i] = [];
	            }

	            for (i = n; i >= 0; --i) ret[i].push(k[i]);

	            ret[n + 1].push(Ai);
	          }
	        } else gather(Ai, ret, k);
	      }
	    }

	    if (k.length > n) k.pop();
	    return ret;
	  }; // 6. Coordinate matrices


	  numeric.cLU = function LU(A) {
	    var I = A[0],
	        J = A[1],
	        V = A[2];
	    var p = I.length,
	        m = 0,
	        i,
	        j,
	        k,
	        a,
	        b,
	        c;

	    for (i = 0; i < p; i++) if (I[i] > m) m = I[i];

	    m++;
	    var L = Array(m),
	        U = Array(m),
	        left = numeric.rep([m], Infinity),
	        right = numeric.rep([m], -Infinity);
	    var Ui, Uj, alpha;

	    for (k = 0; k < p; k++) {
	      i = I[k];
	      j = J[k];
	      if (j < left[i]) left[i] = j;
	      if (j > right[i]) right[i] = j;
	    }

	    for (i = 0; i < m - 1; i++) {
	      if (right[i] > right[i + 1]) right[i + 1] = right[i];
	    }

	    for (i = m - 1; i >= 1; i--) {
	      if (left[i] < left[i - 1]) left[i - 1] = left[i];
	    }

	    var countL = 0,
	        countU = 0;

	    for (i = 0; i < m; i++) {
	      U[i] = numeric.rep([right[i] - left[i] + 1], 0);
	      L[i] = numeric.rep([i - left[i]], 0);
	      countL += i - left[i] + 1;
	      countU += right[i] - i + 1;
	    }

	    for (k = 0; k < p; k++) {
	      i = I[k];
	      U[i][J[k] - left[i]] = V[k];
	    }

	    for (i = 0; i < m - 1; i++) {
	      a = i - left[i];
	      Ui = U[i];

	      for (j = i + 1; left[j] <= i && j < m; j++) {
	        b = i - left[j];
	        c = right[i] - i;
	        Uj = U[j];
	        alpha = Uj[b] / Ui[a];

	        if (alpha) {
	          for (k = 1; k <= c; k++) {
	            Uj[k + b] -= alpha * Ui[k + a];
	          }

	          L[j][i - left[j]] = alpha;
	        }
	      }
	    }

	    var Ui = [],
	        Uj = [],
	        Uv = [],
	        Li = [],
	        Lj = [],
	        Lv = [];
	    var p, q, foo;
	    p = 0;
	    q = 0;

	    for (i = 0; i < m; i++) {
	      a = left[i];
	      b = right[i];
	      foo = U[i];

	      for (j = i; j <= b; j++) {
	        if (foo[j - a]) {
	          Ui[p] = i;
	          Uj[p] = j;
	          Uv[p] = foo[j - a];
	          p++;
	        }
	      }

	      foo = L[i];

	      for (j = a; j < i; j++) {
	        if (foo[j - a]) {
	          Li[q] = i;
	          Lj[q] = j;
	          Lv[q] = foo[j - a];
	          q++;
	        }
	      }

	      Li[q] = i;
	      Lj[q] = i;
	      Lv[q] = 1;
	      q++;
	    }

	    return {
	      U: [Ui, Uj, Uv],
	      L: [Li, Lj, Lv]
	    };
	  };

	  numeric.cLUsolve = function LUsolve(lu, b) {
	    var L = lu.L,
	        U = lu.U,
	        ret = numeric.clone(b);
	    var Li = L[0],
	        Lj = L[1],
	        Lv = L[2];
	    var Ui = U[0],
	        Uj = U[1],
	        Uv = U[2];
	    var p = Ui.length,
	        q = Li.length;
	    var m = ret.length,
	        i,
	        k;
	    k = 0;

	    for (i = 0; i < m; i++) {
	      while (Lj[k] < i) {
	        ret[i] -= Lv[k] * ret[Lj[k]];
	        k++;
	      }

	      k++;
	    }

	    k = p - 1;

	    for (i = m - 1; i >= 0; i--) {
	      while (Uj[k] > i) {
	        ret[i] -= Uv[k] * ret[Uj[k]];
	        k--;
	      }

	      ret[i] /= Uv[k];
	      k--;
	    }

	    return ret;
	  };

	  numeric.cgrid = function grid(n, shape) {
	    if (typeof n === "number") n = [n, n];
	    var ret = numeric.rep(n, -1);
	    var i, j, count;

	    if (typeof shape !== "function") {
	      switch (shape) {
	        case 'L':
	          shape = function (i, j) {
	            return i >= n[0] / 2 || j < n[1] / 2;
	          };

	          break;

	        default:
	          shape = function (i, j) {
	            return true;
	          };

	          break;
	      }
	    }

	    count = 0;

	    for (i = 1; i < n[0] - 1; i++) for (j = 1; j < n[1] - 1; j++) if (shape(i, j)) {
	      ret[i][j] = count;
	      count++;
	    }

	    return ret;
	  };

	  numeric.cdelsq = function delsq(g) {
	    var dir = [[-1, 0], [0, -1], [0, 1], [1, 0]];
	    var s = numeric.dim(g),
	        m = s[0],
	        n = s[1],
	        i,
	        j,
	        k,
	        p,
	        q;
	    var Li = [],
	        Lj = [],
	        Lv = [];

	    for (i = 1; i < m - 1; i++) for (j = 1; j < n - 1; j++) {
	      if (g[i][j] < 0) continue;

	      for (k = 0; k < 4; k++) {
	        p = i + dir[k][0];
	        q = j + dir[k][1];
	        if (g[p][q] < 0) continue;
	        Li.push(g[i][j]);
	        Lj.push(g[p][q]);
	        Lv.push(-1);
	      }

	      Li.push(g[i][j]);
	      Lj.push(g[i][j]);
	      Lv.push(4);
	    }

	    return [Li, Lj, Lv];
	  };

	  numeric.cdotMV = function dotMV(A, x) {
	    var ret,
	        Ai = A[0],
	        Aj = A[1],
	        Av = A[2],
	        k,
	        p = Ai.length,
	        N;
	    N = 0;

	    for (k = 0; k < p; k++) {
	      if (Ai[k] > N) N = Ai[k];
	    }

	    N++;
	    ret = numeric.rep([N], 0);

	    for (k = 0; k < p; k++) {
	      ret[Ai[k]] += Av[k] * x[Aj[k]];
	    }

	    return ret;
	  }; // 7. Splines


	  numeric.Spline = function Spline(x, yl, yr, kl, kr) {
	    this.x = x;
	    this.yl = yl;
	    this.yr = yr;
	    this.kl = kl;
	    this.kr = kr;
	  };

	  numeric.Spline.prototype._at = function _at(x1, p) {
	    var x = this.x;
	    var yl = this.yl;
	    var yr = this.yr;
	    var kl = this.kl;
	    var kr = this.kr;
	    var x1, a, b, t;
	    var add = numeric.add,
	        sub = numeric.sub,
	        mul = numeric.mul;
	    a = sub(mul(kl[p], x[p + 1] - x[p]), sub(yr[p + 1], yl[p]));
	    b = add(mul(kr[p + 1], x[p] - x[p + 1]), sub(yr[p + 1], yl[p]));
	    t = (x1 - x[p]) / (x[p + 1] - x[p]);
	    var s = t * (1 - t);
	    return add(add(add(mul(1 - t, yl[p]), mul(t, yr[p + 1])), mul(a, s * (1 - t))), mul(b, s * t));
	  };

	  numeric.Spline.prototype.at = function at(x0) {
	    if (typeof x0 === "number") {
	      var x = this.x;
	      var n = x.length;
	      var p,
	          q,
	          mid,
	          floor = Math.floor;
	      p = 0;
	      q = n - 1;

	      while (q - p > 1) {
	        mid = floor((p + q) / 2);
	        if (x[mid] <= x0) p = mid;else q = mid;
	      }

	      return this._at(x0, p);
	    }

	    var n = x0.length,
	        i,
	        ret = Array(n);

	    for (i = n - 1; i !== -1; --i) ret[i] = this.at(x0[i]);

	    return ret;
	  };

	  numeric.Spline.prototype.diff = function diff() {
	    var x = this.x;
	    var yl = this.yl;
	    var yr = this.yr;
	    var kl = this.kl;
	    var kr = this.kr;
	    var n = yl.length;
	    var i, dx, dy;
	    var zl = kl,
	        zr = kr,
	        pl = Array(n),
	        pr = Array(n);
	    var add = numeric.add,
	        mul = numeric.mul,
	        div = numeric.div,
	        sub = numeric.sub;

	    for (i = n - 1; i !== -1; --i) {
	      dx = x[i + 1] - x[i];
	      dy = sub(yr[i + 1], yl[i]);
	      pl[i] = div(add(mul(dy, 6), mul(kl[i], -4 * dx), mul(kr[i + 1], -2 * dx)), dx * dx);
	      pr[i + 1] = div(add(mul(dy, -6), mul(kl[i], 2 * dx), mul(kr[i + 1], 4 * dx)), dx * dx);
	    }

	    return new numeric.Spline(x, zl, zr, pl, pr);
	  };

	  numeric.Spline.prototype.roots = function roots() {
	    function sqr(x) {
	      return x * x;
	    }

	    var ret = [];
	    var x = this.x,
	        yl = this.yl,
	        yr = this.yr,
	        kl = this.kl,
	        kr = this.kr;

	    if (typeof yl[0] === "number") {
	      yl = [yl];
	      yr = [yr];
	      kl = [kl];
	      kr = [kr];
	    }

	    var m = yl.length,
	        n = x.length - 1,
	        i,
	        j,
	        k;
	    var ai,
	        bi,
	        ci,
	        di,
	        ret = Array(m),
	        ri,
	        k0,
	        k1,
	        y0,
	        y1,
	        A,
	        B,
	        D,
	        dx,
	        cx,
	        stops,
	        z0,
	        z1,
	        zm,
	        t0,
	        t1,
	        tm;
	    var sqrt = Math.sqrt;

	    for (i = 0; i !== m; ++i) {
	      ai = yl[i];
	      bi = yr[i];
	      ci = kl[i];
	      di = kr[i];
	      ri = [];

	      for (j = 0; j !== n; j++) {
	        if (j > 0 && bi[j] * ai[j] < 0) ri.push(x[j]);
	        dx = x[j + 1] - x[j];
	        cx = x[j];
	        y0 = ai[j];
	        y1 = bi[j + 1];
	        k0 = ci[j] / dx;
	        k1 = di[j + 1] / dx;
	        D = sqr(k0 - k1 + 3 * (y0 - y1)) + 12 * k1 * y0;
	        A = k1 + 3 * y0 + 2 * k0 - 3 * y1;
	        B = 3 * (k1 + k0 + 2 * (y0 - y1));

	        if (D <= 0) {
	          z0 = A / B;
	          if (z0 > x[j] && z0 < x[j + 1]) stops = [x[j], z0, x[j + 1]];else stops = [x[j], x[j + 1]];
	        } else {
	          z0 = (A - sqrt(D)) / B;
	          z1 = (A + sqrt(D)) / B;
	          stops = [x[j]];
	          if (z0 > x[j] && z0 < x[j + 1]) stops.push(z0);
	          if (z1 > x[j] && z1 < x[j + 1]) stops.push(z1);
	          stops.push(x[j + 1]);
	        }

	        t0 = stops[0];
	        z0 = this._at(t0, j);

	        for (k = 0; k < stops.length - 1; k++) {
	          t1 = stops[k + 1];
	          z1 = this._at(t1, j);

	          if (z0 === 0) {
	            ri.push(t0);
	            t0 = t1;
	            z0 = z1;
	            continue;
	          }

	          if (z1 === 0 || z0 * z1 > 0) {
	            t0 = t1;
	            z0 = z1;
	            continue;
	          }

	          var side = 0;

	          while (1) {
	            tm = (z0 * t1 - z1 * t0) / (z0 - z1);

	            if (tm <= t0 || tm >= t1) {
	              break;
	            }

	            zm = this._at(tm, j);

	            if (zm * z1 > 0) {
	              t1 = tm;
	              z1 = zm;
	              if (side === -1) z0 *= 0.5;
	              side = -1;
	            } else if (zm * z0 > 0) {
	              t0 = tm;
	              z0 = zm;
	              if (side === 1) z1 *= 0.5;
	              side = 1;
	            } else break;
	          }

	          ri.push(tm);
	          t0 = stops[k + 1];
	          z0 = this._at(t0, j);
	        }

	        if (z1 === 0) ri.push(t1);
	      }

	      ret[i] = ri;
	    }

	    if (typeof this.yl[0] === "number") return ret[0];
	    return ret;
	  };

	  numeric.spline = function spline(x, y, k1, kn) {
	    var n = x.length,
	        b = [],
	        dx = [],
	        dy = [];
	    var i;
	    var sub = numeric.sub,
	        mul = numeric.mul,
	        add = numeric.add;

	    for (i = n - 2; i >= 0; i--) {
	      dx[i] = x[i + 1] - x[i];
	      dy[i] = sub(y[i + 1], y[i]);
	    }

	    if (typeof k1 === "string" || typeof kn === "string") {
	      k1 = kn = "periodic";
	    } // Build sparse tridiagonal system


	    var T = [[], [], []];

	    switch (typeof k1) {
	      case "undefined":
	        b[0] = mul(3 / (dx[0] * dx[0]), dy[0]);
	        T[0].push(0, 0);
	        T[1].push(0, 1);
	        T[2].push(2 / dx[0], 1 / dx[0]);
	        break;

	      case "string":
	        b[0] = add(mul(3 / (dx[n - 2] * dx[n - 2]), dy[n - 2]), mul(3 / (dx[0] * dx[0]), dy[0]));
	        T[0].push(0, 0, 0);
	        T[1].push(n - 2, 0, 1);
	        T[2].push(1 / dx[n - 2], 2 / dx[n - 2] + 2 / dx[0], 1 / dx[0]);
	        break;

	      default:
	        b[0] = k1;
	        T[0].push(0);
	        T[1].push(0);
	        T[2].push(1);
	        break;
	    }

	    for (i = 1; i < n - 1; i++) {
	      b[i] = add(mul(3 / (dx[i - 1] * dx[i - 1]), dy[i - 1]), mul(3 / (dx[i] * dx[i]), dy[i]));
	      T[0].push(i, i, i);
	      T[1].push(i - 1, i, i + 1);
	      T[2].push(1 / dx[i - 1], 2 / dx[i - 1] + 2 / dx[i], 1 / dx[i]);
	    }

	    switch (typeof kn) {
	      case "undefined":
	        b[n - 1] = mul(3 / (dx[n - 2] * dx[n - 2]), dy[n - 2]);
	        T[0].push(n - 1, n - 1);
	        T[1].push(n - 2, n - 1);
	        T[2].push(1 / dx[n - 2], 2 / dx[n - 2]);
	        break;

	      case "string":
	        T[1][T[1].length - 1] = 0;
	        break;

	      default:
	        b[n - 1] = kn;
	        T[0].push(n - 1);
	        T[1].push(n - 1);
	        T[2].push(1);
	        break;
	    }

	    if (typeof b[0] !== "number") b = numeric.transpose(b);else b = [b];
	    var k = Array(b.length);

	    if (typeof k1 === "string") {
	      for (i = k.length - 1; i !== -1; --i) {
	        k[i] = numeric.ccsLUPSolve(numeric.ccsLUP(numeric.ccsScatter(T)), b[i]);
	        k[i][n - 1] = k[i][0];
	      }
	    } else {
	      for (i = k.length - 1; i !== -1; --i) {
	        k[i] = numeric.cLUsolve(numeric.cLU(T), b[i]);
	      }
	    }

	    if (typeof y[0] === "number") k = k[0];else k = numeric.transpose(k);
	    return new numeric.Spline(x, y, y, k, k);
	  }; // 8. FFT


	  numeric.fftpow2 = function fftpow2(x, y) {
	    var n = x.length;
	    if (n === 1) return;
	    var cos = Math.cos,
	        sin = Math.sin,
	        i,
	        j;
	    var xe = Array(n / 2),
	        ye = Array(n / 2),
	        xo = Array(n / 2),
	        yo = Array(n / 2);
	    j = n / 2;

	    for (i = n - 1; i !== -1; --i) {
	      --j;
	      xo[j] = x[i];
	      yo[j] = y[i];
	      --i;
	      xe[j] = x[i];
	      ye[j] = y[i];
	    }

	    fftpow2(xe, ye);
	    fftpow2(xo, yo);
	    j = n / 2;
	    var t,
	        k = -6.2831853071795864769252867665590057683943387987502116419 / n,
	        ci,
	        si;

	    for (i = n - 1; i !== -1; --i) {
	      --j;
	      if (j === -1) j = n / 2 - 1;
	      t = k * i;
	      ci = cos(t);
	      si = sin(t);
	      x[i] = xe[j] + ci * xo[j] - si * yo[j];
	      y[i] = ye[j] + ci * yo[j] + si * xo[j];
	    }
	  };

	  numeric._ifftpow2 = function _ifftpow2(x, y) {
	    var n = x.length;
	    if (n === 1) return;
	    var cos = Math.cos,
	        sin = Math.sin,
	        i,
	        j;
	    var xe = Array(n / 2),
	        ye = Array(n / 2),
	        xo = Array(n / 2),
	        yo = Array(n / 2);
	    j = n / 2;

	    for (i = n - 1; i !== -1; --i) {
	      --j;
	      xo[j] = x[i];
	      yo[j] = y[i];
	      --i;
	      xe[j] = x[i];
	      ye[j] = y[i];
	    }

	    _ifftpow2(xe, ye);

	    _ifftpow2(xo, yo);

	    j = n / 2;
	    var t,
	        k = 6.2831853071795864769252867665590057683943387987502116419 / n,
	        ci,
	        si;

	    for (i = n - 1; i !== -1; --i) {
	      --j;
	      if (j === -1) j = n / 2 - 1;
	      t = k * i;
	      ci = cos(t);
	      si = sin(t);
	      x[i] = xe[j] + ci * xo[j] - si * yo[j];
	      y[i] = ye[j] + ci * yo[j] + si * xo[j];
	    }
	  };

	  numeric.ifftpow2 = function ifftpow2(x, y) {
	    numeric._ifftpow2(x, y);

	    numeric.diveq(x, x.length);
	    numeric.diveq(y, y.length);
	  };

	  numeric.convpow2 = function convpow2(ax, ay, bx, by) {
	    numeric.fftpow2(ax, ay);
	    numeric.fftpow2(bx, by);
	    var i,
	        n = ax.length,
	        axi,
	        bxi,
	        ayi,
	        byi;

	    for (i = n - 1; i !== -1; --i) {
	      axi = ax[i];
	      ayi = ay[i];
	      bxi = bx[i];
	      byi = by[i];
	      ax[i] = axi * bxi - ayi * byi;
	      ay[i] = axi * byi + ayi * bxi;
	    }

	    numeric.ifftpow2(ax, ay);
	  };

	  numeric.T.prototype.fft = function fft() {
	    var x = this.x,
	        y = this.y;
	    var n = x.length,
	        log = Math.log,
	        log2 = log(2),
	        p = Math.ceil(log(2 * n - 1) / log2),
	        m = Math.pow(2, p);
	    var cx = numeric.rep([m], 0),
	        cy = numeric.rep([m], 0),
	        cos = Math.cos,
	        sin = Math.sin;
	    var k,
	        c = -3.141592653589793238462643383279502884197169399375105820 / n,
	        t;
	    var a = numeric.rep([m], 0),
	        b = numeric.rep([m], 0);

	    for (k = 0; k < n; k++) a[k] = x[k];

	    if (typeof y !== "undefined") for (k = 0; k < n; k++) b[k] = y[k];
	    cx[0] = 1;

	    for (k = 1; k <= m / 2; k++) {
	      t = c * k * k;
	      cx[k] = cos(t);
	      cy[k] = sin(t);
	      cx[m - k] = cos(t);
	      cy[m - k] = sin(t);
	    }

	    var X = new numeric.T(a, b),
	        Y = new numeric.T(cx, cy);
	    X = X.mul(Y);
	    numeric.convpow2(X.x, X.y, numeric.clone(Y.x), numeric.neg(Y.y));
	    X = X.mul(Y);
	    X.x.length = n;
	    X.y.length = n;
	    return X;
	  };

	  numeric.T.prototype.ifft = function ifft() {
	    var x = this.x,
	        y = this.y;
	    var n = x.length,
	        log = Math.log,
	        log2 = log(2),
	        p = Math.ceil(log(2 * n - 1) / log2),
	        m = Math.pow(2, p);
	    var cx = numeric.rep([m], 0),
	        cy = numeric.rep([m], 0),
	        cos = Math.cos,
	        sin = Math.sin;
	    var k,
	        c = 3.141592653589793238462643383279502884197169399375105820 / n,
	        t;
	    var a = numeric.rep([m], 0),
	        b = numeric.rep([m], 0);

	    for (k = 0; k < n; k++) a[k] = x[k];

	    if (typeof y !== "undefined") for (k = 0; k < n; k++) b[k] = y[k];
	    cx[0] = 1;

	    for (k = 1; k <= m / 2; k++) {
	      t = c * k * k;
	      cx[k] = cos(t);
	      cy[k] = sin(t);
	      cx[m - k] = cos(t);
	      cy[m - k] = sin(t);
	    }

	    var X = new numeric.T(a, b),
	        Y = new numeric.T(cx, cy);
	    X = X.mul(Y);
	    numeric.convpow2(X.x, X.y, numeric.clone(Y.x), numeric.neg(Y.y));
	    X = X.mul(Y);
	    X.x.length = n;
	    X.y.length = n;
	    return X.div(n);
	  }; //9. Unconstrained optimization


	  numeric.gradient = function gradient(f, x) {
	    var n = x.length;
	    var f0 = f(x);
	    if (isNaN(f0)) throw new Error('gradient: f(x) is a NaN!');
	    var max = Math.max;
	    var i,
	        x0 = numeric.clone(x),
	        f1,
	        f2,
	        J = Array(n);
	    var div = numeric.div,
	        sub = numeric.sub,
	        errest,
	        max = Math.max,
	        eps = 1e-3,
	        abs = Math.abs,
	        min = Math.min;
	    var t0,
	        t1,
	        t2,
	        it = 0,
	        d1,
	        d2,
	        N;

	    for (i = 0; i < n; i++) {
	      var h = max(1e-6 * f0, 1e-8);

	      while (1) {
	        ++it;

	        if (it > 20) {
	          throw new Error("Numerical gradient fails");
	        }

	        x0[i] = x[i] + h;
	        f1 = f(x0);
	        x0[i] = x[i] - h;
	        f2 = f(x0);
	        x0[i] = x[i];

	        if (isNaN(f1) || isNaN(f2)) {
	          h /= 16;
	          continue;
	        }

	        J[i] = (f1 - f2) / (2 * h);
	        t0 = x[i] - h;
	        t1 = x[i];
	        t2 = x[i] + h;
	        d1 = (f1 - f0) / h;
	        d2 = (f0 - f2) / h;
	        N = max(abs(J[i]), abs(f0), abs(f1), abs(f2), abs(t0), abs(t1), abs(t2), 1e-8);
	        errest = min(max(abs(d1 - J[i]), abs(d2 - J[i]), abs(d1 - d2)) / N, h / N);

	        if (errest > eps) {
	          h /= 16;
	        } else break;
	      }
	    }

	    return J;
	  };

	  numeric.uncmin = function uncmin(f, x0, tol, gradient, maxit, callback, options) {
	    var grad = numeric.gradient;

	    if (typeof options === "undefined") {
	      options = {};
	    }

	    if (typeof tol === "undefined") {
	      tol = 1e-8;
	    }

	    if (typeof gradient === "undefined") {
	      gradient = function (x) {
	        return grad(f, x);
	      };
	    }

	    if (typeof maxit === "undefined") maxit = 1000;
	    x0 = numeric.clone(x0);
	    var n = x0.length;
	    var f0 = f(x0),
	        f1,
	        df0;
	    if (isNaN(f0)) throw new Error('uncmin: f(x0) is a NaN!');
	    var max = Math.max,
	        norm2 = numeric.norm2;
	    tol = max(tol, numeric.epsilon);
	    var step,
	        g0,
	        g1,
	        H1 = options.Hinv || numeric.identity(n);
	    var dot = numeric.dot,
	        inv = numeric.inv,
	        sub = numeric.sub,
	        add = numeric.add,
	        ten = numeric.tensor,
	        div = numeric.div,
	        mul = numeric.mul;
	    var all = numeric.all,
	        isfinite = numeric.isFinite,
	        neg = numeric.neg;
	    var it = 0,
	        s,
	        x1,
	        y,
	        Hy,
	        ys,
	        t,
	        nstep;
	    var msg = "";
	    g0 = gradient(x0);

	    while (it < maxit) {
	      if (typeof callback === "function") {
	        if (callback(it, x0, f0, g0, H1)) {
	          msg = "Callback returned true";
	          break;
	        }
	      }

	      if (!all(isfinite(g0))) {
	        msg = "Gradient has Infinity or NaN";
	        break;
	      }

	      step = neg(dot(H1, g0));

	      if (!all(isfinite(step))) {
	        msg = "Search direction has Infinity or NaN";
	        break;
	      }

	      nstep = norm2(step);

	      if (nstep < tol) {
	        msg = "Newton step smaller than tol";
	        break;
	      }

	      t = 1;
	      df0 = dot(g0, step); // line search

	      x1 = x0;

	      while (it < maxit) {
	        if (t * nstep < tol) {
	          break;
	        }

	        s = mul(step, t);
	        x1 = add(x0, s);
	        f1 = f(x1);

	        if (f1 - f0 >= 0.1 * t * df0 || isNaN(f1)) {
	          t *= 0.5;
	          ++it;
	          continue;
	        }

	        break;
	      }

	      if (t * nstep < tol) {
	        msg = "Line search step size smaller than tol";
	        break;
	      }

	      if (it === maxit) {
	        msg = "maxit reached during line search";
	        break;
	      }

	      g1 = gradient(x1);
	      y = sub(g1, g0);
	      ys = dot(y, s);
	      Hy = dot(H1, y);
	      H1 = sub(add(H1, mul((ys + dot(y, Hy)) / (ys * ys), ten(s, s))), div(add(ten(Hy, s), ten(s, Hy)), ys));
	      x0 = x1;
	      f0 = f1;
	      g0 = g1;
	      ++it;
	    }

	    return {
	      solution: x0,
	      f: f0,
	      gradient: g0,
	      invHessian: H1,
	      iterations: it,
	      message: msg
	    };
	  }; // 10. Ode solver (Dormand-Prince)


	  numeric.Dopri = function Dopri(x, y, f, ymid, iterations, msg, events) {
	    this.x = x;
	    this.y = y;
	    this.f = f;
	    this.ymid = ymid;
	    this.iterations = iterations;
	    this.events = events;
	    this.message = msg;
	  };

	  numeric.Dopri.prototype._at = function _at(xi, j) {
	    function sqr(x) {
	      return x * x;
	    }

	    var sol = this;
	    var xs = sol.x;
	    var ys = sol.y;
	    var k1 = sol.f;
	    var ymid = sol.ymid;
	    var n = xs.length;
	    var x0, x1, xh, y0, y1, yh, xi;
	    var h;
	    var c = 0.5;
	    var add = numeric.add,
	        mul = numeric.mul,
	        sub = numeric.sub,
	        p,
	        q,
	        w;
	    x0 = xs[j];
	    x1 = xs[j + 1];
	    y0 = ys[j];
	    y1 = ys[j + 1];
	    h = x1 - x0;
	    xh = x0 + c * h;
	    yh = ymid[j];
	    p = sub(k1[j], mul(y0, 1 / (x0 - xh) + 2 / (x0 - x1)));
	    q = sub(k1[j + 1], mul(y1, 1 / (x1 - xh) + 2 / (x1 - x0)));
	    w = [sqr(xi - x1) * (xi - xh) / sqr(x0 - x1) / (x0 - xh), sqr(xi - x0) * sqr(xi - x1) / sqr(x0 - xh) / sqr(x1 - xh), sqr(xi - x0) * (xi - xh) / sqr(x1 - x0) / (x1 - xh), (xi - x0) * sqr(xi - x1) * (xi - xh) / sqr(x0 - x1) / (x0 - xh), (xi - x1) * sqr(xi - x0) * (xi - xh) / sqr(x0 - x1) / (x1 - xh)];
	    return add(add(add(add(mul(y0, w[0]), mul(yh, w[1])), mul(y1, w[2])), mul(p, w[3])), mul(q, w[4]));
	  };

	  numeric.Dopri.prototype.at = function at(x) {
	    var i,
	        j,
	        k,
	        floor = Math.floor;

	    if (typeof x !== "number") {
	      var n = x.length,
	          ret = Array(n);

	      for (i = n - 1; i !== -1; --i) {
	        ret[i] = this.at(x[i]);
	      }

	      return ret;
	    }

	    var x0 = this.x;
	    i = 0;
	    j = x0.length - 1;

	    while (j - i > 1) {
	      k = floor(0.5 * (i + j));
	      if (x0[k] <= x) i = k;else j = k;
	    }

	    return this._at(x, i);
	  };

	  numeric.dopri = function dopri(x0, x1, y0, f, tol, maxit, event) {
	    if (typeof tol === "undefined") {
	      tol = 1e-6;
	    }

	    if (typeof maxit === "undefined") {
	      maxit = 1000;
	    }

	    var xs = [x0],
	        ys = [y0],
	        k1 = [f(x0, y0)],
	        k2,
	        k3,
	        k4,
	        k5,
	        k6,
	        k7,
	        ymid = [];
	    var A2 = 1 / 5;
	    var A3 = [3 / 40, 9 / 40];
	    var A4 = [44 / 45, -56 / 15, 32 / 9];
	    var A5 = [19372 / 6561, -25360 / 2187, 64448 / 6561, -212 / 729];
	    var A6 = [9017 / 3168, -355 / 33, 46732 / 5247, 49 / 176, -5103 / 18656];
	    var b = [35 / 384, 0, 500 / 1113, 125 / 192, -2187 / 6784, 11 / 84];
	    var bm = [0.5 * 6025192743 / 30085553152, 0, 0.5 * 51252292925 / 65400821598, 0.5 * -2691868925 / 45128329728, 0.5 * 187940372067 / 1594534317056, 0.5 * -1776094331 / 19743644256, 0.5 * 11237099 / 235043384];
	    var c = [1 / 5, 3 / 10, 4 / 5, 8 / 9, 1, 1];
	    var e = [-71 / 57600, 0, 71 / 16695, -71 / 1920, 17253 / 339200, -22 / 525, 1 / 40];
	    var i = 0,
	        er,
	        j;
	    var h = (x1 - x0) / 10;
	    var it = 0;
	    var add = numeric.add,
	        mul = numeric.mul,
	        y1,
	        erinf;
	    var min = Math.min,
	        abs = Math.abs,
	        norminf = numeric.norminf,
	        pow = Math.pow;
	    var any = numeric.any,
	        lt = numeric.lt,
	        and = numeric.and,
	        sub = numeric.sub;
	    var e0, e1, ev;
	    var ret = new numeric.Dopri(xs, ys, k1, ymid, -1, "");
	    if (typeof event === "function") e0 = event(x0, y0);

	    while (x0 < x1 && it < maxit) {
	      ++it;
	      if (x0 + h > x1) h = x1 - x0;
	      k2 = f(x0 + c[0] * h, add(y0, mul(A2 * h, k1[i])));
	      k3 = f(x0 + c[1] * h, add(add(y0, mul(A3[0] * h, k1[i])), mul(A3[1] * h, k2)));
	      k4 = f(x0 + c[2] * h, add(add(add(y0, mul(A4[0] * h, k1[i])), mul(A4[1] * h, k2)), mul(A4[2] * h, k3)));
	      k5 = f(x0 + c[3] * h, add(add(add(add(y0, mul(A5[0] * h, k1[i])), mul(A5[1] * h, k2)), mul(A5[2] * h, k3)), mul(A5[3] * h, k4)));
	      k6 = f(x0 + c[4] * h, add(add(add(add(add(y0, mul(A6[0] * h, k1[i])), mul(A6[1] * h, k2)), mul(A6[2] * h, k3)), mul(A6[3] * h, k4)), mul(A6[4] * h, k5)));
	      y1 = add(add(add(add(add(y0, mul(k1[i], h * b[0])), mul(k3, h * b[2])), mul(k4, h * b[3])), mul(k5, h * b[4])), mul(k6, h * b[5]));
	      k7 = f(x0 + h, y1);
	      er = add(add(add(add(add(mul(k1[i], h * e[0]), mul(k3, h * e[2])), mul(k4, h * e[3])), mul(k5, h * e[4])), mul(k6, h * e[5])), mul(k7, h * e[6]));
	      if (typeof er === "number") erinf = abs(er);else erinf = norminf(er);

	      if (erinf > tol) {
	        // reject
	        h = 0.2 * h * pow(tol / erinf, 0.25);

	        if (x0 + h === x0) {
	          ret.msg = "Step size became too small";
	          break;
	        }

	        continue;
	      }

	      ymid[i] = add(add(add(add(add(add(y0, mul(k1[i], h * bm[0])), mul(k3, h * bm[2])), mul(k4, h * bm[3])), mul(k5, h * bm[4])), mul(k6, h * bm[5])), mul(k7, h * bm[6]));
	      ++i;
	      xs[i] = x0 + h;
	      ys[i] = y1;
	      k1[i] = k7;

	      if (typeof event === "function") {
	        var yi,
	            xl = x0,
	            xr = x0 + 0.5 * h,
	            xi;
	        e1 = event(xr, ymid[i - 1]);
	        ev = and(lt(e0, 0), lt(0, e1));

	        if (!any(ev)) {
	          xl = xr;
	          xr = x0 + h;
	          e0 = e1;
	          e1 = event(xr, y1);
	          ev = and(lt(e0, 0), lt(0, e1));
	        }

	        if (any(ev)) {
	          var en, ei;
	          var side = 0,
	              sl = 1.0,
	              sr = 1.0;

	          while (1) {
	            if (typeof e0 === "number") xi = (sr * e1 * xl - sl * e0 * xr) / (sr * e1 - sl * e0);else {
	              xi = xr;

	              for (j = e0.length - 1; j !== -1; --j) {
	                if (e0[j] < 0 && e1[j] > 0) xi = min(xi, (sr * e1[j] * xl - sl * e0[j] * xr) / (sr * e1[j] - sl * e0[j]));
	              }
	            }
	            if (xi <= xl || xi >= xr) break;
	            yi = ret._at(xi, i - 1);
	            ei = event(xi, yi);
	            en = and(lt(e0, 0), lt(0, ei));

	            if (any(en)) {
	              xr = xi;
	              e1 = ei;
	              ev = en;
	              sr = 1.0;
	              if (side === -1) sl *= 0.5;else sl = 1.0;
	              side = -1;
	            } else {
	              xl = xi;
	              e0 = ei;
	              sl = 1.0;
	              if (side === 1) sr *= 0.5;else sr = 1.0;
	              side = 1;
	            }
	          }

	          y1 = ret._at(0.5 * (x0 + xi), i - 1);
	          ret.f[i] = f(xi, yi);
	          ret.x[i] = xi;
	          ret.y[i] = yi;
	          ret.ymid[i - 1] = y1;
	          ret.events = ev;
	          ret.iterations = it;
	          return ret;
	        }
	      }

	      x0 += h;
	      y0 = y1;
	      e0 = e1;
	      h = min(0.8 * h * pow(tol / erinf, 0.25), 4 * h);
	    }

	    ret.iterations = it;
	    return ret;
	  }; // 11. Ax = b


	  numeric.LU = function (A, fast) {
	    fast = fast || false;
	    var abs = Math.abs;
	    var i, j, k, absAjk, Akk, Ak, Pk, Ai;
	    var max;
	    var n = A.length,
	        n1 = n - 1;
	    var P = new Array(n);
	    if (!fast) A = numeric.clone(A);

	    for (k = 0; k < n; ++k) {
	      Pk = k;
	      Ak = A[k];
	      max = abs(Ak[k]);

	      for (j = k + 1; j < n; ++j) {
	        absAjk = abs(A[j][k]);

	        if (max < absAjk) {
	          max = absAjk;
	          Pk = j;
	        }
	      }

	      P[k] = Pk;

	      if (Pk != k) {
	        A[k] = A[Pk];
	        A[Pk] = Ak;
	        Ak = A[k];
	      }

	      Akk = Ak[k];

	      for (i = k + 1; i < n; ++i) {
	        A[i][k] /= Akk;
	      }

	      for (i = k + 1; i < n; ++i) {
	        Ai = A[i];

	        for (j = k + 1; j < n1; ++j) {
	          Ai[j] -= Ai[k] * Ak[j];
	          ++j;
	          Ai[j] -= Ai[k] * Ak[j];
	        }

	        if (j === n1) Ai[j] -= Ai[k] * Ak[j];
	      }
	    }

	    return {
	      LU: A,
	      P: P
	    };
	  };

	  numeric.LUsolve = function LUsolve(LUP, b) {
	    var i, j;
	    var LU = LUP.LU;
	    var n = LU.length;
	    var x = numeric.clone(b);
	    var P = LUP.P;
	    var Pi, LUi, tmp;

	    for (i = n - 1; i !== -1; --i) x[i] = b[i];

	    for (i = 0; i < n; ++i) {
	      Pi = P[i];

	      if (P[i] !== i) {
	        tmp = x[i];
	        x[i] = x[Pi];
	        x[Pi] = tmp;
	      }

	      LUi = LU[i];

	      for (j = 0; j < i; ++j) {
	        x[i] -= x[j] * LUi[j];
	      }
	    }

	    for (i = n - 1; i >= 0; --i) {
	      LUi = LU[i];

	      for (j = i + 1; j < n; ++j) {
	        x[i] -= x[j] * LUi[j];
	      }

	      x[i] /= LUi[i];
	    }

	    return x;
	  };

	  numeric.solve = function solve(A, b, fast) {
	    return numeric.LUsolve(numeric.LU(A, fast), b);
	  }; // 12. Linear programming


	  numeric.echelonize = function echelonize(A) {
	    var s = numeric.dim(A),
	        m = s[0],
	        n = s[1];
	    var I = numeric.identity(m);
	    var P = Array(m);
	    var i, j, k, l, Ai, Ii, Z, a;
	    var abs = Math.abs;
	    var diveq = numeric.diveq;
	    A = numeric.clone(A);

	    for (i = 0; i < m; ++i) {
	      k = 0;
	      Ai = A[i];
	      Ii = I[i];

	      for (j = 1; j < n; ++j) if (abs(Ai[k]) < abs(Ai[j])) k = j;

	      P[i] = k;
	      diveq(Ii, Ai[k]);
	      diveq(Ai, Ai[k]);

	      for (j = 0; j < m; ++j) if (j !== i) {
	        Z = A[j];
	        a = Z[k];

	        for (l = n - 1; l !== -1; --l) Z[l] -= Ai[l] * a;

	        Z = I[j];

	        for (l = m - 1; l !== -1; --l) Z[l] -= Ii[l] * a;
	      }
	    }

	    return {
	      I: I,
	      A: A,
	      P: P
	    };
	  };

	  numeric.__solveLP = function __solveLP(c, A, b, tol, maxit, x, flag) {
	    var sum = numeric.sum,
	        log = numeric.log,
	        mul = numeric.mul,
	        sub = numeric.sub,
	        dot = numeric.dot,
	        div = numeric.div,
	        add = numeric.add;
	    var m = c.length,
	        n = b.length,
	        y;
	    var unbounded = false,
	        i0 = 0;
	    var alpha = 1.0;
	    var AT = numeric.transpose(A),
	        svd = numeric.svd,
	        transpose = numeric.transpose,
	        leq = numeric.leq,
	        sqrt = Math.sqrt,
	        abs = Math.abs;
	    var muleq = numeric.muleq;
	    var norm = numeric.norminf,
	        any = numeric.any,
	        min = Math.min;
	    var all = numeric.all,
	        gt = numeric.gt;
	    var p = Array(m),
	        A0 = Array(n),
	        e = numeric.rep([n], 1),
	        H;
	    var solve = numeric.solve,
	        z = sub(b, dot(A, x)),
	        count;
	    var dotcc = dot(c, c);
	    var g;

	    for (count = i0; count < maxit; ++count) {
	      var i, d;

	      for (i = n - 1; i !== -1; --i) A0[i] = div(A[i], z[i]);

	      var A1 = transpose(A0);

	      for (i = m - 1; i !== -1; --i) p[i] =
	      /*x[i]+*/
	      sum(A1[i]);

	      alpha = 0.25 * abs(dotcc / dot(c, p));
	      var a1 = 100 * sqrt(dotcc / dot(p, p));
	      if (!isFinite(alpha) || alpha > a1) alpha = a1;
	      g = add(c, mul(alpha, p));
	      H = dot(A1, A0);

	      for (i = m - 1; i !== -1; --i) H[i][i] += 1;

	      d = solve(H, div(g, alpha), true);
	      var t0 = div(z, dot(A, d));
	      var t = 1.0;

	      for (i = n - 1; i !== -1; --i) if (t0[i] < 0) t = min(t, -0.999 * t0[i]);

	      y = sub(x, mul(d, t));
	      z = sub(b, dot(A, y));
	      if (!all(gt(z, 0))) return {
	        solution: x,
	        message: "",
	        iterations: count
	      };
	      x = y;
	      if (alpha < tol) return {
	        solution: y,
	        message: "",
	        iterations: count
	      };

	      if (flag) {
	        var s = dot(c, g),
	            Ag = dot(A, g);
	        unbounded = true;

	        for (i = n - 1; i !== -1; --i) if (s * Ag[i] < 0) {
	          unbounded = false;
	          break;
	        }
	      } else {
	        if (x[m - 1] >= 0) unbounded = false;else unbounded = true;
	      }

	      if (unbounded) return {
	        solution: y,
	        message: "Unbounded",
	        iterations: count
	      };
	    }

	    return {
	      solution: x,
	      message: "maximum iteration count exceeded",
	      iterations: count
	    };
	  };

	  numeric._solveLP = function _solveLP(c, A, b, tol, maxit) {
	    var m = c.length,
	        n = b.length,
	        y;
	    var sum = numeric.sum,
	        log = numeric.log,
	        mul = numeric.mul,
	        sub = numeric.sub,
	        dot = numeric.dot,
	        div = numeric.div,
	        add = numeric.add;
	    var c0 = numeric.rep([m], 0).concat([1]);
	    var J = numeric.rep([n, 1], -1);
	    var A0 = numeric.blockMatrix([[A, J]]);
	    var b0 = b;
	    var y = numeric.rep([m], 0).concat(Math.max(0, numeric.sup(numeric.neg(b))) + 1);

	    var x0 = numeric.__solveLP(c0, A0, b0, tol, maxit, y, false);

	    var x = numeric.clone(x0.solution);
	    x.length = m;
	    var foo = numeric.inf(sub(b, dot(A, x)));

	    if (foo < 0) {
	      return {
	        solution: NaN,
	        message: "Infeasible",
	        iterations: x0.iterations
	      };
	    }

	    var ret = numeric.__solveLP(c, A, b, tol, maxit - x0.iterations, x, true);

	    ret.iterations += x0.iterations;
	    return ret;
	  };

	  numeric.solveLP = function solveLP(c, A, b, Aeq, beq, tol, maxit) {
	    if (typeof maxit === "undefined") maxit = 1000;
	    if (typeof tol === "undefined") tol = numeric.epsilon;
	    if (typeof Aeq === "undefined") return numeric._solveLP(c, A, b, tol, maxit);
	    var m = Aeq.length,
	        n = Aeq[0].length,
	        o = A.length;
	    var B = numeric.echelonize(Aeq);
	    var flags = numeric.rep([n], 0);
	    var P = B.P;
	    var Q = [];
	    var i;

	    for (i = P.length - 1; i !== -1; --i) flags[P[i]] = 1;

	    for (i = n - 1; i !== -1; --i) if (flags[i] === 0) Q.push(i);

	    var g = numeric.getRange;
	    var I = numeric.linspace(0, m - 1),
	        J = numeric.linspace(0, o - 1);
	    var Aeq2 = g(Aeq, I, Q),
	        A1 = g(A, J, P),
	        A2 = g(A, J, Q),
	        dot = numeric.dot,
	        sub = numeric.sub;
	    var A3 = dot(A1, B.I);
	    var A4 = sub(A2, dot(A3, Aeq2)),
	        b4 = sub(b, dot(A3, beq));
	    var c1 = Array(P.length),
	        c2 = Array(Q.length);

	    for (i = P.length - 1; i !== -1; --i) c1[i] = c[P[i]];

	    for (i = Q.length - 1; i !== -1; --i) c2[i] = c[Q[i]];

	    var c4 = sub(c2, dot(c1, dot(B.I, Aeq2)));

	    var S = numeric._solveLP(c4, A4, b4, tol, maxit);

	    var x2 = S.solution;
	    if (x2 !== x2) return S;
	    var x1 = dot(B.I, sub(beq, dot(Aeq2, x2)));
	    var x = Array(c.length);

	    for (i = P.length - 1; i !== -1; --i) x[P[i]] = x1[i];

	    for (i = Q.length - 1; i !== -1; --i) x[Q[i]] = x2[i];

	    return {
	      solution: x,
	      message: S.message,
	      iterations: S.iterations
	    };
	  };

	  numeric.MPStoLP = function MPStoLP(MPS) {
	    if (MPS instanceof String) {
	      MPS.split('\n');
	    }

	    var state = 0;
	    var states = ['Initial state', 'NAME', 'ROWS', 'COLUMNS', 'RHS', 'BOUNDS', 'ENDATA'];
	    var n = MPS.length;
	    var i,
	        j,
	        z,
	        N = 0,
	        rows = {},
	        sign = [],
	        rl = 0,
	        vars = {},
	        nv = 0;
	    var name;
	    var c = [],
	        A = [],
	        b = [];

	    function err(e) {
	      throw new Error('MPStoLP: ' + e + '\nLine ' + i + ': ' + MPS[i] + '\nCurrent state: ' + states[state] + '\n');
	    }

	    for (i = 0; i < n; ++i) {
	      z = MPS[i];
	      var w0 = z.match(/\S*/g);
	      var w = [];

	      for (j = 0; j < w0.length; ++j) if (w0[j] !== "") w.push(w0[j]);

	      if (w.length === 0) continue;

	      for (j = 0; j < states.length; ++j) if (z.substr(0, states[j].length) === states[j]) break;

	      if (j < states.length) {
	        state = j;

	        if (j === 1) {
	          name = w[1];
	        }

	        if (j === 6) return {
	          name: name,
	          c: c,
	          A: numeric.transpose(A),
	          b: b,
	          rows: rows,
	          vars: vars
	        };
	        continue;
	      }

	      switch (state) {
	        case 0:
	        case 1:
	          err('Unexpected line');

	        case 2:
	          switch (w[0]) {
	            case 'N':
	              if (N === 0) N = w[1];else err('Two or more N rows');
	              break;

	            case 'L':
	              rows[w[1]] = rl;
	              sign[rl] = 1;
	              b[rl] = 0;
	              ++rl;
	              break;

	            case 'G':
	              rows[w[1]] = rl;
	              sign[rl] = -1;
	              b[rl] = 0;
	              ++rl;
	              break;

	            case 'E':
	              rows[w[1]] = rl;
	              sign[rl] = 0;
	              b[rl] = 0;
	              ++rl;
	              break;

	            default:
	              err('Parse error ' + numeric.prettyPrint(w));
	          }

	          break;

	        case 3:
	          if (!vars.hasOwnProperty(w[0])) {
	            vars[w[0]] = nv;
	            c[nv] = 0;
	            A[nv] = numeric.rep([rl], 0);
	            ++nv;
	          }

	          var p = vars[w[0]];

	          for (j = 1; j < w.length; j += 2) {
	            if (w[j] === N) {
	              c[p] = parseFloat(w[j + 1]);
	              continue;
	            }

	            var q = rows[w[j]];
	            A[p][q] = (sign[q] < 0 ? -1 : 1) * parseFloat(w[j + 1]);
	          }

	          break;

	        case 4:
	          for (j = 1; j < w.length; j += 2) b[rows[w[j]]] = (sign[rows[w[j]]] < 0 ? -1 : 1) * parseFloat(w[j + 1]);

	          break;

	        case 5:
	          /*FIXME*/
	          break;

	        case 6:
	          err('Internal error');
	      }
	    }

	    err('Reached end of file without ENDATA');
	  }; // seedrandom.js version 2.0.
	  // Author: David Bau 4/2/2011
	  //
	  // Defines a method Math.seedrandom() that, when called, substitutes
	  // an explicitly seeded RC4-based algorithm for Math.random().  Also
	  // supports automatic seeding from local or network sources of entropy.
	  //
	  // Usage:
	  //
	  //   <script src=http://davidbau.com/encode/seedrandom-min.js></script>
	  //
	  //   Math.seedrandom('yipee'); Sets Math.random to a function that is
	  //                             initialized using the given explicit seed.
	  //
	  //   Math.seedrandom();        Sets Math.random to a function that is
	  //                             seeded using the current time, dom state,
	  //                             and other accumulated local entropy.
	  //                             The generated seed string is returned.
	  //
	  //   Math.seedrandom('yowza', true);
	  //                             Seeds using the given explicit seed mixed
	  //                             together with accumulated entropy.
	  //
	  //   <script src="http://bit.ly/srandom-512"></script>
	  //                             Seeds using physical random bits downloaded
	  //                             from random.org.
	  //
	  //   <script src="https://jsonlib.appspot.com/urandom?callback=Math.seedrandom">
	  //   </script>                 Seeds using urandom bits from call.jsonlib.com,
	  //                             which is faster than random.org.
	  //
	  // Examples:
	  //
	  //   Math.seedrandom("hello");            // Use "hello" as the seed.
	  //   document.write(Math.random());       // Always 0.5463663768140734
	  //   document.write(Math.random());       // Always 0.43973793770592234
	  //   var rng1 = Math.random;              // Remember the current prng.
	  //
	  //   var autoseed = Math.seedrandom();    // New prng with an automatic seed.
	  //   document.write(Math.random());       // Pretty much unpredictable.
	  //
	  //   Math.random = rng1;                  // Continue "hello" prng sequence.
	  //   document.write(Math.random());       // Always 0.554769432473455
	  //
	  //   Math.seedrandom(autoseed);           // Restart at the previous seed.
	  //   document.write(Math.random());       // Repeat the 'unpredictable' value.
	  //
	  // Notes:
	  //
	  // Each time seedrandom('arg') is called, entropy from the passed seed
	  // is accumulated in a pool to help generate future seeds for the
	  // zero-argument form of Math.seedrandom, so entropy can be injected over
	  // time by calling seedrandom with explicit data repeatedly.
	  //
	  // On speed - This javascript implementation of Math.random() is about
	  // 3-10x slower than the built-in Math.random() because it is not native
	  // code, but this is typically fast enough anyway.  Seeding is more expensive,
	  // especially if you use auto-seeding.  Some details (timings on Chrome 4):
	  //
	  // Our Math.random()            - avg less than 0.002 milliseconds per call
	  // seedrandom('explicit')       - avg less than 0.5 milliseconds per call
	  // seedrandom('explicit', true) - avg less than 2 milliseconds per call
	  // seedrandom()                 - avg about 38 milliseconds per call
	  //
	  // LICENSE (BSD):
	  //
	  // Copyright 2010 David Bau, all rights reserved.
	  //
	  // Redistribution and use in source and binary forms, with or without
	  // modification, are permitted provided that the following conditions are met:
	  // 
	  //   1. Redistributions of source code must retain the above copyright
	  //      notice, this list of conditions and the following disclaimer.
	  //
	  //   2. Redistributions in binary form must reproduce the above copyright
	  //      notice, this list of conditions and the following disclaimer in the
	  //      documentation and/or other materials provided with the distribution.
	  // 
	  //   3. Neither the name of this module nor the names of its contributors may
	  //      be used to endorse or promote products derived from this software
	  //      without specific prior written permission.
	  // 
	  // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	  // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	  // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	  // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
	  // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	  // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
	  // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	  // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	  // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	  // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	  //

	  /**
	   * All code is in an anonymous closure to keep the global namespace clean.
	   *
	   * @param {number=} overflow 
	   * @param {number=} startdenom
	   */
	  // Patched by Seb so that seedrandom.js does not pollute the Math object.
	  // My tests suggest that doing Math.trouble = 1 makes Math lookups about 5%
	  // slower.


	  numeric.seedrandom = {
	    pow: Math.pow,
	    random: Math.random
	  };

	  (function (pool, math, width, chunks, significance, overflow, startdenom) {
	    //
	    // seedrandom()
	    // This is the seedrandom function described above.
	    //
	    math['seedrandom'] = function seedrandom(seed, use_entropy) {
	      var key = [];
	      var arc4; // Flatten the seed string or build one from local entropy if needed.

	      seed = mixkey(flatten(use_entropy ? [seed, pool] : arguments.length ? seed : [new Date().getTime(), pool, window], 3), key); // Use the seed to initialize an ARC4 generator.

	      arc4 = new ARC4(key); // Mix the randomness into accumulated entropy.

	      mixkey(arc4.S, pool); // Override Math.random
	      // This function returns a random double in [0, 1) that contains
	      // randomness in every bit of the mantissa of the IEEE 754 value.

	      math['random'] = function random() {
	        // Closure to return a random double:
	        var n = arc4.g(chunks); // Start with a numerator n < 2 ^ 48

	        var d = startdenom; //   and denominator d = 2 ^ 48.

	        var x = 0; //   and no 'extra last byte'.

	        while (n < significance) {
	          // Fill up all significant digits by
	          n = (n + x) * width; //   shifting numerator and

	          d *= width; //   denominator and generating a

	          x = arc4.g(1); //   new least-significant-byte.
	        }

	        while (n >= overflow) {
	          // To avoid rounding up, before adding
	          n /= 2; //   last byte, shift everything

	          d /= 2; //   right using integer math until

	          x >>>= 1; //   we have exactly the desired bits.
	        }

	        return (n + x) / d; // Form the number within [0, 1).
	      }; // Return the seed that was used


	      return seed;
	    }; //
	    // ARC4
	    //
	    // An ARC4 implementation.  The constructor takes a key in the form of
	    // an array of at most (width) integers that should be 0 <= x < (width).
	    //
	    // The g(count) method returns a pseudorandom integer that concatenates
	    // the next (count) outputs from ARC4.  Its return value is a number x
	    // that is in the range 0 <= x < (width ^ count).
	    //

	    /** @constructor */


	    function ARC4(key) {
	      var t,
	          u,
	          me = this,
	          keylen = key.length;
	      var i = 0,
	          j = me.i = me.j = me.m = 0;
	      me.S = [];
	      me.c = []; // The empty key [] is treated as [0].

	      if (!keylen) {
	        key = [keylen++];
	      } // Set up S using the standard key scheduling algorithm.


	      while (i < width) {
	        me.S[i] = i++;
	      }

	      for (i = 0; i < width; i++) {
	        t = me.S[i];
	        j = lowbits(j + t + key[i % keylen]);
	        u = me.S[j];
	        me.S[i] = u;
	        me.S[j] = t;
	      } // The "g" method returns the next (count) outputs as one number.


	      me.g = function getnext(count) {
	        var s = me.S;
	        var i = lowbits(me.i + 1);
	        var t = s[i];
	        var j = lowbits(me.j + t);
	        var u = s[j];
	        s[i] = u;
	        s[j] = t;
	        var r = s[lowbits(t + u)];

	        while (--count) {
	          i = lowbits(i + 1);
	          t = s[i];
	          j = lowbits(j + t);
	          u = s[j];
	          s[i] = u;
	          s[j] = t;
	          r = r * width + s[lowbits(t + u)];
	        }

	        me.i = i;
	        me.j = j;
	        return r;
	      }; // For robust unpredictability discard an initial batch of values.
	      // See http://www.rsa.com/rsalabs/node.asp?id=2009


	      me.g(width);
	    } //
	    // flatten()
	    // Converts an object tree to nested arrays of strings.
	    //

	    /** @param {Object=} result 
	      * @param {string=} prop
	      * @param {string=} typ */


	    function flatten(obj, depth, result, prop, typ) {
	      result = [];
	      typ = typeof obj;

	      if (depth && typ == 'object') {
	        for (prop in obj) {
	          if (prop.indexOf('S') < 5) {
	            // Avoid FF3 bug (local/sessionStorage)
	            try {
	              result.push(flatten(obj[prop], depth - 1));
	            } catch (e) {}
	          }
	        }
	      }

	      return result.length ? result : obj + (typ != 'string' ? '\0' : '');
	    } //
	    // mixkey()
	    // Mixes a string seed into a key that is an array of integers, and
	    // returns a shortened string seed that is equivalent to the result key.
	    //

	    /** @param {number=} smear 
	      * @param {number=} j */


	    function mixkey(seed, key, smear, j) {
	      seed += ''; // Ensure the seed is a string

	      smear = 0;

	      for (j = 0; j < seed.length; j++) {
	        key[lowbits(j)] = lowbits((smear ^= key[lowbits(j)] * 19) + seed.charCodeAt(j));
	      }

	      seed = '';

	      for (j in key) {
	        seed += String.fromCharCode(key[j]);
	      }

	      return seed;
	    } //
	    // lowbits()
	    // A quick "n mod width" for width a power of 2.
	    //


	    function lowbits(n) {
	      return n & width - 1;
	    } //
	    // The following constants are related to IEEE 754 limits.
	    //


	    startdenom = math.pow(width, chunks);
	    significance = math.pow(2, significance);
	    overflow = significance * 2; //
	    // When seedrandom.js is loaded, we immediately mix a few bits
	    // from the built-in RNG into the entropy pool.  Because we do
	    // not want to intefere with determinstic PRNG state later,
	    // seedrandom will not call math.random on its own again after
	    // initialization.
	    //

	    mixkey(math.random(), pool); // End anonymous scope, and pass initial values.
	  })([], // pool: entropy pool starts empty
	  numeric.seedrandom, // math: package containing random, pow, and seedrandom
	  256, // width: each RC4 output is 0 <= x < 256
	  6, // chunks: at least six RC4 outputs for each double
	  52 // significance: there are 52 significant digits in a double
	  );
	  /* This file is a slightly modified version of quadprog.js from Alberto Santini.
	   * It has been slightly modified by SÃ©bastien Loisel to make sure that it handles
	   * 0-based Arrays instead of 1-based Arrays.
	   * License is in resources/LICENSE.quadprog */


	  (function (exports) {
	    function base0to1(A) {
	      if (typeof A !== "object") {
	        return A;
	      }

	      var ret = [],
	          i,
	          n = A.length;

	      for (i = 0; i < n; i++) ret[i + 1] = base0to1(A[i]);

	      return ret;
	    }

	    function base1to0(A) {
	      if (typeof A !== "object") {
	        return A;
	      }

	      var ret = [],
	          i,
	          n = A.length;

	      for (i = 1; i < n; i++) ret[i - 1] = base1to0(A[i]);

	      return ret;
	    }

	    function dpori(a, lda, n) {
	      var i, j, k, kp1, t;

	      for (k = 1; k <= n; k = k + 1) {
	        a[k][k] = 1 / a[k][k];
	        t = -a[k][k]; //~ dscal(k - 1, t, a[1][k], 1);

	        for (i = 1; i < k; i = i + 1) {
	          a[i][k] = t * a[i][k];
	        }

	        kp1 = k + 1;

	        if (n < kp1) {
	          break;
	        }

	        for (j = kp1; j <= n; j = j + 1) {
	          t = a[k][j];
	          a[k][j] = 0; //~ daxpy(k, t, a[1][k], 1, a[1][j], 1);

	          for (i = 1; i <= k; i = i + 1) {
	            a[i][j] = a[i][j] + t * a[i][k];
	          }
	        }
	      }
	    }

	    function dposl(a, lda, n, b) {
	      var i, k, kb, t;

	      for (k = 1; k <= n; k = k + 1) {
	        //~ t = ddot(k - 1, a[1][k], 1, b[1], 1);
	        t = 0;

	        for (i = 1; i < k; i = i + 1) {
	          t = t + a[i][k] * b[i];
	        }

	        b[k] = (b[k] - t) / a[k][k];
	      }

	      for (kb = 1; kb <= n; kb = kb + 1) {
	        k = n + 1 - kb;
	        b[k] = b[k] / a[k][k];
	        t = -b[k]; //~ daxpy(k - 1, t, a[1][k], 1, b[1], 1);

	        for (i = 1; i < k; i = i + 1) {
	          b[i] = b[i] + t * a[i][k];
	        }
	      }
	    }

	    function dpofa(a, lda, n, info) {
	      var i, j, jm1, k, t, s;

	      for (j = 1; j <= n; j = j + 1) {
	        info[1] = j;
	        s = 0;
	        jm1 = j - 1;

	        if (jm1 < 1) {
	          s = a[j][j] - s;

	          if (s <= 0) {
	            break;
	          }

	          a[j][j] = Math.sqrt(s);
	        } else {
	          for (k = 1; k <= jm1; k = k + 1) {
	            //~ t = a[k][j] - ddot(k - 1, a[1][k], 1, a[1][j], 1);
	            t = a[k][j];

	            for (i = 1; i < k; i = i + 1) {
	              t = t - a[i][j] * a[i][k];
	            }

	            t = t / a[k][k];
	            a[k][j] = t;
	            s = s + t * t;
	          }

	          s = a[j][j] - s;

	          if (s <= 0) {
	            break;
	          }

	          a[j][j] = Math.sqrt(s);
	        }

	        info[1] = 0;
	      }
	    }

	    function qpgen2(dmat, dvec, fddmat, n, sol, crval, amat, bvec, fdamat, q, meq, iact, nact, iter, work, ierr) {
	      var i, j, l, l1, info, it1, iwzv, iwrv, iwrm, iwsv, iwuv, nvl, r, iwnbv, temp, sum, t1, tt, gc, gs, nu, t1inf, t2min, vsmall, tmpa, tmpb, go;
	      r = Math.min(n, q);
	      l = 2 * n + r * (r + 5) / 2 + 2 * q + 1;
	      vsmall = 1.0e-60;

	      do {
	        vsmall = vsmall + vsmall;
	        tmpa = 1 + 0.1 * vsmall;
	        tmpb = 1 + 0.2 * vsmall;
	      } while (tmpa <= 1 || tmpb <= 1);

	      for (i = 1; i <= n; i = i + 1) {
	        work[i] = dvec[i];
	      }

	      for (i = n + 1; i <= l; i = i + 1) {
	        work[i] = 0;
	      }

	      for (i = 1; i <= q; i = i + 1) {
	        iact[i] = 0;
	      }

	      info = [];

	      if (ierr[1] === 0) {
	        dpofa(dmat, fddmat, n, info);

	        if (info[1] !== 0) {
	          ierr[1] = 2;
	          return;
	        }

	        dposl(dmat, fddmat, n, dvec);
	        dpori(dmat, fddmat, n);
	      } else {
	        for (j = 1; j <= n; j = j + 1) {
	          sol[j] = 0;

	          for (i = 1; i <= j; i = i + 1) {
	            sol[j] = sol[j] + dmat[i][j] * dvec[i];
	          }
	        }

	        for (j = 1; j <= n; j = j + 1) {
	          dvec[j] = 0;

	          for (i = j; i <= n; i = i + 1) {
	            dvec[j] = dvec[j] + dmat[j][i] * sol[i];
	          }
	        }
	      }

	      crval[1] = 0;

	      for (j = 1; j <= n; j = j + 1) {
	        sol[j] = dvec[j];
	        crval[1] = crval[1] + work[j] * sol[j];
	        work[j] = 0;

	        for (i = j + 1; i <= n; i = i + 1) {
	          dmat[i][j] = 0;
	        }
	      }

	      crval[1] = -crval[1] / 2;
	      ierr[1] = 0;
	      iwzv = n;
	      iwrv = iwzv + n;
	      iwuv = iwrv + r;
	      iwrm = iwuv + r + 1;
	      iwsv = iwrm + r * (r + 1) / 2;
	      iwnbv = iwsv + q;

	      for (i = 1; i <= q; i = i + 1) {
	        sum = 0;

	        for (j = 1; j <= n; j = j + 1) {
	          sum = sum + amat[j][i] * amat[j][i];
	        }

	        work[iwnbv + i] = Math.sqrt(sum);
	      }

	      nact = 0;
	      iter[1] = 0;
	      iter[2] = 0;

	      function fn_goto_50() {
	        iter[1] = iter[1] + 1;
	        l = iwsv;

	        for (i = 1; i <= q; i = i + 1) {
	          l = l + 1;
	          sum = -bvec[i];

	          for (j = 1; j <= n; j = j + 1) {
	            sum = sum + amat[j][i] * sol[j];
	          }

	          if (Math.abs(sum) < vsmall) {
	            sum = 0;
	          }

	          if (i > meq) {
	            work[l] = sum;
	          } else {
	            work[l] = -Math.abs(sum);

	            if (sum > 0) {
	              for (j = 1; j <= n; j = j + 1) {
	                amat[j][i] = -amat[j][i];
	              }

	              bvec[i] = -bvec[i];
	            }
	          }
	        }

	        for (i = 1; i <= nact; i = i + 1) {
	          work[iwsv + iact[i]] = 0;
	        }

	        nvl = 0;
	        temp = 0;

	        for (i = 1; i <= q; i = i + 1) {
	          if (work[iwsv + i] < temp * work[iwnbv + i]) {
	            nvl = i;
	            temp = work[iwsv + i] / work[iwnbv + i];
	          }
	        }

	        if (nvl === 0) {
	          return 999;
	        }

	        return 0;
	      }

	      function fn_goto_55() {
	        for (i = 1; i <= n; i = i + 1) {
	          sum = 0;

	          for (j = 1; j <= n; j = j + 1) {
	            sum = sum + dmat[j][i] * amat[j][nvl];
	          }

	          work[i] = sum;
	        }

	        l1 = iwzv;

	        for (i = 1; i <= n; i = i + 1) {
	          work[l1 + i] = 0;
	        }

	        for (j = nact + 1; j <= n; j = j + 1) {
	          for (i = 1; i <= n; i = i + 1) {
	            work[l1 + i] = work[l1 + i] + dmat[i][j] * work[j];
	          }
	        }

	        t1inf = true;

	        for (i = nact; i >= 1; i = i - 1) {
	          sum = work[i];
	          l = iwrm + i * (i + 3) / 2;
	          l1 = l - i;

	          for (j = i + 1; j <= nact; j = j + 1) {
	            sum = sum - work[l] * work[iwrv + j];
	            l = l + j;
	          }

	          sum = sum / work[l1];
	          work[iwrv + i] = sum;

	          if (iact[i] < meq) {
	            // continue;
	            break;
	          }

	          if (sum < 0) {
	            // continue;
	            break;
	          }

	          t1inf = false;
	          it1 = i;
	        }

	        if (!t1inf) {
	          t1 = work[iwuv + it1] / work[iwrv + it1];

	          for (i = 1; i <= nact; i = i + 1) {
	            if (iact[i] < meq) {
	              // continue;
	              break;
	            }

	            if (work[iwrv + i] < 0) {
	              // continue;
	              break;
	            }

	            temp = work[iwuv + i] / work[iwrv + i];

	            if (temp < t1) {
	              t1 = temp;
	              it1 = i;
	            }
	          }
	        }

	        sum = 0;

	        for (i = iwzv + 1; i <= iwzv + n; i = i + 1) {
	          sum = sum + work[i] * work[i];
	        }

	        if (Math.abs(sum) <= vsmall) {
	          if (t1inf) {
	            ierr[1] = 1; // GOTO 999

	            return 999;
	          } else {
	            for (i = 1; i <= nact; i = i + 1) {
	              work[iwuv + i] = work[iwuv + i] - t1 * work[iwrv + i];
	            }

	            work[iwuv + nact + 1] = work[iwuv + nact + 1] + t1; // GOTO 700

	            return 700;
	          }
	        } else {
	          sum = 0;

	          for (i = 1; i <= n; i = i + 1) {
	            sum = sum + work[iwzv + i] * amat[i][nvl];
	          }

	          tt = -work[iwsv + nvl] / sum;
	          t2min = true;

	          if (!t1inf) {
	            if (t1 < tt) {
	              tt = t1;
	              t2min = false;
	            }
	          }

	          for (i = 1; i <= n; i = i + 1) {
	            sol[i] = sol[i] + tt * work[iwzv + i];

	            if (Math.abs(sol[i]) < vsmall) {
	              sol[i] = 0;
	            }
	          }

	          crval[1] = crval[1] + tt * sum * (tt / 2 + work[iwuv + nact + 1]);

	          for (i = 1; i <= nact; i = i + 1) {
	            work[iwuv + i] = work[iwuv + i] - tt * work[iwrv + i];
	          }

	          work[iwuv + nact + 1] = work[iwuv + nact + 1] + tt;

	          if (t2min) {
	            nact = nact + 1;
	            iact[nact] = nvl;
	            l = iwrm + (nact - 1) * nact / 2 + 1;

	            for (i = 1; i <= nact - 1; i = i + 1) {
	              work[l] = work[i];
	              l = l + 1;
	            }

	            if (nact === n) {
	              work[l] = work[n];
	            } else {
	              for (i = n; i >= nact + 1; i = i - 1) {
	                if (work[i] === 0) {
	                  // continue;
	                  break;
	                }

	                gc = Math.max(Math.abs(work[i - 1]), Math.abs(work[i]));
	                gs = Math.min(Math.abs(work[i - 1]), Math.abs(work[i]));

	                if (work[i - 1] >= 0) {
	                  temp = Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
	                } else {
	                  temp = -Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
	                }

	                gc = work[i - 1] / temp;
	                gs = work[i] / temp;

	                if (gc === 1) {
	                  // continue;
	                  break;
	                }

	                if (gc === 0) {
	                  work[i - 1] = gs * temp;

	                  for (j = 1; j <= n; j = j + 1) {
	                    temp = dmat[j][i - 1];
	                    dmat[j][i - 1] = dmat[j][i];
	                    dmat[j][i] = temp;
	                  }
	                } else {
	                  work[i - 1] = temp;
	                  nu = gs / (1 + gc);

	                  for (j = 1; j <= n; j = j + 1) {
	                    temp = gc * dmat[j][i - 1] + gs * dmat[j][i];
	                    dmat[j][i] = nu * (dmat[j][i - 1] + temp) - dmat[j][i];
	                    dmat[j][i - 1] = temp;
	                  }
	                }
	              }

	              work[l] = work[nact];
	            }
	          } else {
	            sum = -bvec[nvl];

	            for (j = 1; j <= n; j = j + 1) {
	              sum = sum + sol[j] * amat[j][nvl];
	            }

	            if (nvl > meq) {
	              work[iwsv + nvl] = sum;
	            } else {
	              work[iwsv + nvl] = -Math.abs(sum);

	              if (sum > 0) {
	                for (j = 1; j <= n; j = j + 1) {
	                  amat[j][nvl] = -amat[j][nvl];
	                }

	                bvec[nvl] = -bvec[nvl];
	              }
	            } // GOTO 700


	            return 700;
	          }
	        }

	        return 0;
	      }

	      function fn_goto_797() {
	        l = iwrm + it1 * (it1 + 1) / 2 + 1;
	        l1 = l + it1;

	        if (work[l1] === 0) {
	          // GOTO 798
	          return 798;
	        }

	        gc = Math.max(Math.abs(work[l1 - 1]), Math.abs(work[l1]));
	        gs = Math.min(Math.abs(work[l1 - 1]), Math.abs(work[l1]));

	        if (work[l1 - 1] >= 0) {
	          temp = Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
	        } else {
	          temp = -Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
	        }

	        gc = work[l1 - 1] / temp;
	        gs = work[l1] / temp;

	        if (gc === 1) {
	          // GOTO 798
	          return 798;
	        }

	        if (gc === 0) {
	          for (i = it1 + 1; i <= nact; i = i + 1) {
	            temp = work[l1 - 1];
	            work[l1 - 1] = work[l1];
	            work[l1] = temp;
	            l1 = l1 + i;
	          }

	          for (i = 1; i <= n; i = i + 1) {
	            temp = dmat[i][it1];
	            dmat[i][it1] = dmat[i][it1 + 1];
	            dmat[i][it1 + 1] = temp;
	          }
	        } else {
	          nu = gs / (1 + gc);

	          for (i = it1 + 1; i <= nact; i = i + 1) {
	            temp = gc * work[l1 - 1] + gs * work[l1];
	            work[l1] = nu * (work[l1 - 1] + temp) - work[l1];
	            work[l1 - 1] = temp;
	            l1 = l1 + i;
	          }

	          for (i = 1; i <= n; i = i + 1) {
	            temp = gc * dmat[i][it1] + gs * dmat[i][it1 + 1];
	            dmat[i][it1 + 1] = nu * (dmat[i][it1] + temp) - dmat[i][it1 + 1];
	            dmat[i][it1] = temp;
	          }
	        }

	        return 0;
	      }

	      function fn_goto_798() {
	        l1 = l - it1;

	        for (i = 1; i <= it1; i = i + 1) {
	          work[l1] = work[l];
	          l = l + 1;
	          l1 = l1 + 1;
	        }

	        work[iwuv + it1] = work[iwuv + it1 + 1];
	        iact[it1] = iact[it1 + 1];
	        it1 = it1 + 1;

	        if (it1 < nact) {
	          // GOTO 797
	          return 797;
	        }

	        return 0;
	      }

	      function fn_goto_799() {
	        work[iwuv + nact] = work[iwuv + nact + 1];
	        work[iwuv + nact + 1] = 0;
	        iact[nact] = 0;
	        nact = nact - 1;
	        iter[2] = iter[2] + 1;
	        return 0;
	      }

	      go = 0;

	      while (true) {
	        go = fn_goto_50();

	        if (go === 999) {
	          return;
	        }

	        while (true) {
	          go = fn_goto_55();

	          if (go === 0) {
	            break;
	          }

	          if (go === 999) {
	            return;
	          }

	          if (go === 700) {
	            if (it1 === nact) {
	              fn_goto_799();
	            } else {
	              while (true) {
	                fn_goto_797();
	                go = fn_goto_798();

	                if (go !== 797) {
	                  break;
	                }
	              }

	              fn_goto_799();
	            }
	          }
	        }
	      }
	    }

	    function solveQP(Dmat, dvec, Amat, bvec, meq, factorized) {
	      Dmat = base0to1(Dmat);
	      dvec = base0to1(dvec);
	      Amat = base0to1(Amat);
	      var i,
	          n,
	          q,
	          nact,
	          r,
	          crval = [],
	          iact = [],
	          sol = [],
	          work = [],
	          iter = [],
	          message;
	      meq = meq || 0;
	      factorized = factorized ? base0to1(factorized) : [undefined, 0];
	      bvec = bvec ? base0to1(bvec) : []; // In Fortran the array index starts from 1

	      n = Dmat.length - 1;
	      q = Amat[1].length - 1;

	      if (!bvec) {
	        for (i = 1; i <= q; i = i + 1) {
	          bvec[i] = 0;
	        }
	      }

	      for (i = 1; i <= q; i = i + 1) {
	        iact[i] = 0;
	      }

	      nact = 0;
	      r = Math.min(n, q);

	      for (i = 1; i <= n; i = i + 1) {
	        sol[i] = 0;
	      }

	      crval[1] = 0;

	      for (i = 1; i <= 2 * n + r * (r + 5) / 2 + 2 * q + 1; i = i + 1) {
	        work[i] = 0;
	      }

	      for (i = 1; i <= 2; i = i + 1) {
	        iter[i] = 0;
	      }

	      qpgen2(Dmat, dvec, n, n, sol, crval, Amat, bvec, n, q, meq, iact, nact, iter, work, factorized);
	      message = "";

	      if (factorized[1] === 1) {
	        message = "constraints are inconsistent, no solution!";
	      }

	      if (factorized[1] === 2) {
	        message = "matrix D in quadratic function is not positive definite!";
	      }

	      return {
	        solution: base1to0(sol),
	        value: base1to0(crval),
	        unconstrained_solution: base1to0(dvec),
	        iterations: base1to0(iter),
	        iact: base1to0(iact),
	        message: message
	      };
	    }

	    exports.solveQP = solveQP;
	  })(numeric);
	  /*
	  Shanti Rao sent me this routine by private email. I had to modify it
	  slightly to work on Arrays instead of using a Matrix object.
	  It is apparently translated from http://stitchpanorama.sourceforge.net/Python/svd.py
	  */


	  numeric.svd = function svd(A) {
	    var temp; //Compute the thin SVD from G. H. Golub and C. Reinsch, Numer. Math. 14, 403-420 (1970)

	    var prec = numeric.epsilon; //Math.pow(2,-52) // assumes double prec

	    var tolerance = 1.e-64 / prec;
	    var itmax = 50;
	    var c = 0;
	    var i = 0;
	    var j = 0;
	    var k = 0;
	    var l = 0;
	    var u = numeric.clone(A);
	    var m = u.length;
	    var n = u[0].length;
	    if (m < n) throw "Need more rows than columns";
	    var e = new Array(n);
	    var q = new Array(n);

	    for (i = 0; i < n; i++) e[i] = q[i] = 0.0;

	    var v = numeric.rep([n, n], 0); //	v.zero();

	    function pythag(a, b) {
	      a = Math.abs(a);
	      b = Math.abs(b);
	      if (a > b) return a * Math.sqrt(1.0 + b * b / a / a);else if (b == 0.0) return a;
	      return b * Math.sqrt(1.0 + a * a / b / b);
	    } //Householder's reduction to bidiagonal form


	    var f = 0.0;
	    var g = 0.0;
	    var h = 0.0;
	    var x = 0.0;
	    var y = 0.0;
	    var z = 0.0;
	    var s = 0.0;

	    for (i = 0; i < n; i++) {
	      e[i] = g;
	      s = 0.0;
	      l = i + 1;

	      for (j = i; j < m; j++) s += u[j][i] * u[j][i];

	      if (s <= tolerance) g = 0.0;else {
	        f = u[i][i];
	        g = Math.sqrt(s);
	        if (f >= 0.0) g = -g;
	        h = f * g - s;
	        u[i][i] = f - g;

	        for (j = l; j < n; j++) {
	          s = 0.0;

	          for (k = i; k < m; k++) s += u[k][i] * u[k][j];

	          f = s / h;

	          for (k = i; k < m; k++) u[k][j] += f * u[k][i];
	        }
	      }
	      q[i] = g;
	      s = 0.0;

	      for (j = l; j < n; j++) s = s + u[i][j] * u[i][j];

	      if (s <= tolerance) g = 0.0;else {
	        f = u[i][i + 1];
	        g = Math.sqrt(s);
	        if (f >= 0.0) g = -g;
	        h = f * g - s;
	        u[i][i + 1] = f - g;

	        for (j = l; j < n; j++) e[j] = u[i][j] / h;

	        for (j = l; j < m; j++) {
	          s = 0.0;

	          for (k = l; k < n; k++) s += u[j][k] * u[i][k];

	          for (k = l; k < n; k++) u[j][k] += s * e[k];
	        }
	      }
	      y = Math.abs(q[i]) + Math.abs(e[i]);
	      if (y > x) x = y;
	    } // accumulation of right hand gtransformations


	    for (i = n - 1; i != -1; i += -1) {
	      if (g != 0.0) {
	        h = g * u[i][i + 1];

	        for (j = l; j < n; j++) v[j][i] = u[i][j] / h;

	        for (j = l; j < n; j++) {
	          s = 0.0;

	          for (k = l; k < n; k++) s += u[i][k] * v[k][j];

	          for (k = l; k < n; k++) v[k][j] += s * v[k][i];
	        }
	      }

	      for (j = l; j < n; j++) {
	        v[i][j] = 0;
	        v[j][i] = 0;
	      }

	      v[i][i] = 1;
	      g = e[i];
	      l = i;
	    } // accumulation of left hand transformations


	    for (i = n - 1; i != -1; i += -1) {
	      l = i + 1;
	      g = q[i];

	      for (j = l; j < n; j++) u[i][j] = 0;

	      if (g != 0.0) {
	        h = u[i][i] * g;

	        for (j = l; j < n; j++) {
	          s = 0.0;

	          for (k = l; k < m; k++) s += u[k][i] * u[k][j];

	          f = s / h;

	          for (k = i; k < m; k++) u[k][j] += f * u[k][i];
	        }

	        for (j = i; j < m; j++) u[j][i] = u[j][i] / g;
	      } else for (j = i; j < m; j++) u[j][i] = 0;

	      u[i][i] += 1;
	    } // diagonalization of the bidiagonal form


	    prec = prec * x;

	    for (k = n - 1; k != -1; k += -1) {
	      for (var iteration = 0; iteration < itmax; iteration++) {
	        // test f splitting
	        var test_convergence = false;

	        for (l = k; l != -1; l += -1) {
	          if (Math.abs(e[l]) <= prec) {
	            test_convergence = true;
	            break;
	          }

	          if (Math.abs(q[l - 1]) <= prec) break;
	        }

	        if (!test_convergence) {
	          // cancellation of e[l] if l>0
	          c = 0.0;
	          s = 1.0;
	          var l1 = l - 1;

	          for (i = l; i < k + 1; i++) {
	            f = s * e[i];
	            e[i] = c * e[i];
	            if (Math.abs(f) <= prec) break;
	            g = q[i];
	            h = pythag(f, g);
	            q[i] = h;
	            c = g / h;
	            s = -f / h;

	            for (j = 0; j < m; j++) {
	              y = u[j][l1];
	              z = u[j][i];
	              u[j][l1] = y * c + z * s;
	              u[j][i] = -y * s + z * c;
	            }
	          }
	        } // test f convergence


	        z = q[k];

	        if (l == k) {
	          //convergence
	          if (z < 0.0) {
	            //q[k] is made non-negative
	            q[k] = -z;

	            for (j = 0; j < n; j++) v[j][k] = -v[j][k];
	          }

	          break; //break out of iteration loop and move on to next k value
	        }

	        if (iteration >= itmax - 1) throw 'Error: no convergence.'; // shift from bottom 2x2 minor

	        x = q[l];
	        y = q[k - 1];
	        g = e[k - 1];
	        h = e[k];
	        f = ((y - z) * (y + z) + (g - h) * (g + h)) / (2.0 * h * y);
	        g = pythag(f, 1.0);
	        if (f < 0.0) f = ((x - z) * (x + z) + h * (y / (f - g) - h)) / x;else f = ((x - z) * (x + z) + h * (y / (f + g) - h)) / x; // next QR transformation

	        c = 1.0;
	        s = 1.0;

	        for (i = l + 1; i < k + 1; i++) {
	          g = e[i];
	          y = q[i];
	          h = s * g;
	          g = c * g;
	          z = pythag(f, h);
	          e[i - 1] = z;
	          c = f / z;
	          s = h / z;
	          f = x * c + g * s;
	          g = -x * s + g * c;
	          h = y * s;
	          y = y * c;

	          for (j = 0; j < n; j++) {
	            x = v[j][i - 1];
	            z = v[j][i];
	            v[j][i - 1] = x * c + z * s;
	            v[j][i] = -x * s + z * c;
	          }

	          z = pythag(f, h);
	          q[i - 1] = z;
	          c = f / z;
	          s = h / z;
	          f = c * g + s * y;
	          x = -s * g + c * y;

	          for (j = 0; j < m; j++) {
	            y = u[j][i - 1];
	            z = u[j][i];
	            u[j][i - 1] = y * c + z * s;
	            u[j][i] = -y * s + z * c;
	          }
	        }

	        e[l] = 0.0;
	        e[k] = f;
	        q[k] = x;
	      }
	    } //vt= transpose(v)
	    //return (u,q,vt)


	    for (i = 0; i < q.length; i++) if (q[i] < prec) q[i] = 0; //sort eigenvalues	


	    for (i = 0; i < n; i++) {
	      //writeln(q)
	      for (j = i - 1; j >= 0; j--) {
	        if (q[j] < q[i]) {
	          //  writeln(i,'-',j)
	          c = q[j];
	          q[j] = q[i];
	          q[i] = c;

	          for (k = 0; k < u.length; k++) {
	            temp = u[k][i];
	            u[k][i] = u[k][j];
	            u[k][j] = temp;
	          }

	          for (k = 0; k < v.length; k++) {
	            temp = v[k][i];
	            v[k][i] = v[k][j];
	            v[k][j] = temp;
	          } //	   u.swapCols(i,j)
	          //	   v.swapCols(i,j)


	          i = j;
	        }
	      }
	    }

	    return {
	      U: u,
	      S: q,
	      V: v
	    };
	  };
	});

	var H = {
		name: "hydrogen",
		symbol: "H",
		type: "other-nonmetal",
		number: 1,
		mass: 1.008,
		period: 1,
		group: 1,
		melting: 14.01,
		boiling: 20.28,
		density: 0.00008988,
		electronegativity: 2.2,
		radius: 25,
		valence: 1,
		specificheat: 14.304,
		comment: ""
	};
	var He = {
		name: "helium",
		symbol: "He",
		type: "noble-gas",
		number: 2,
		mass: 4.002602,
		period: 1,
		group: 18,
		melting: 0.95,
		boiling: 4.22,
		density: 0.0001785,
		electronegativity: "",
		radius: 31,
		valence: 2,
		specificheat: 5.193,
		comment: ""
	};
	var Li = {
		name: "lithium",
		symbol: "Li",
		type: "alkali-metal",
		number: 3,
		mass: 6.94,
		period: 2,
		group: 1,
		melting: 453.69,
		boiling: 1560,
		density: 0.534,
		electronegativity: 0.98,
		radius: 145,
		valence: 1,
		specificheat: 3.582,
		comment: ""
	};
	var Be = {
		name: "beryllium",
		symbol: "Be",
		type: "alkaline-earth",
		number: 4,
		mass: 9.012,
		period: 2,
		group: 2,
		melting: 1560,
		boiling: 2742,
		density: 1.85,
		electronegativity: 1.57,
		radius: 105,
		valence: 2,
		specificheat: 1.825,
		comment: ""
	};
	var B = {
		name: "boron",
		symbol: "B",
		type: "metalloid",
		number: 5,
		mass: 10.81,
		period: 2,
		group: 13,
		melting: 2349,
		boiling: 4200,
		density: 2.34,
		electronegativity: 2.04,
		radius: "",
		valence: "",
		specificheat: 1.026,
		comment: ""
	};
	var C = {
		name: "carbon",
		symbol: "C",
		type: "other-nonmetal",
		number: 6,
		mass: 12.011,
		period: 2,
		group: 14,
		melting: 3800,
		boiling: 4300,
		density: 2.267,
		electronegativity: 2.55,
		radius: "",
		valence: "",
		specificheat: 0.709,
		comment: ""
	};
	var N = {
		name: "nitrogen",
		symbol: "N",
		type: "other-nonmetal",
		number: 7,
		mass: 14.007,
		period: 2,
		group: 15,
		melting: 63.15,
		boiling: 77.36,
		density: 0.0012506,
		electronegativity: 3.04,
		radius: "",
		valence: "",
		specificheat: 1.04,
		comment: ""
	};
	var O = {
		name: "oxygen",
		symbol: "O",
		type: "other-nonmetal",
		number: 8,
		mass: 15.999,
		period: 2,
		group: 16,
		melting: 54.36,
		boiling: 90.2,
		density: 0.001429,
		electronegativity: 3.44,
		radius: "",
		valence: "",
		specificheat: 0.918,
		comment: ""
	};
	var F = {
		name: "fluorine",
		symbol: "F",
		type: "halogen",
		number: 9,
		mass: 18.998,
		period: 2,
		group: 17,
		melting: 53.53,
		boiling: 85.03,
		density: 0.001696,
		electronegativity: 3.98,
		radius: "",
		valence: "",
		specificheat: 0.824,
		comment: ""
	};
	var Ne = {
		name: "neon",
		symbol: "Ne",
		type: "noble-gas",
		number: 10,
		mass: 20.1797,
		period: 2,
		group: 18,
		melting: 24.56,
		boiling: 27.07,
		density: 0.0008999,
		electronegativity: "",
		radius: "",
		valence: "",
		specificheat: 1.03,
		comment: ""
	};
	var Na = {
		name: "sodium",
		symbol: "Na",
		type: "alkali-metal",
		number: 11,
		mass: 22.989,
		period: 3,
		group: 1,
		melting: 370.87,
		boiling: 1156,
		density: 0.971,
		electronegativity: 0.93,
		radius: "",
		valence: "",
		specificheat: 1.228,
		comment: ""
	};
	var Mg = {
		name: "magnesium",
		symbol: "Mg",
		type: "alkaline-earth",
		number: 12,
		mass: 24.305,
		period: 3,
		group: 2,
		melting: 923,
		boiling: 1363,
		density: 1.738,
		electronegativity: 1.31,
		radius: "",
		valence: "",
		specificheat: 1.023,
		comment: ""
	};
	var Al = {
		name: "aluminium",
		symbol: "Al",
		type: "post-transition-metal",
		number: 13,
		mass: 26.982,
		period: 3,
		group: 13,
		melting: 933.47,
		boiling: 2792,
		density: 2.698,
		electronegativity: 1.61,
		radius: "",
		valence: "",
		specificheat: 0.897,
		comment: ""
	};
	var Si = {
		name: "silicon",
		symbol: "Si",
		type: "metalloid",
		number: 14,
		mass: 28.085,
		period: 3,
		group: 14,
		melting: 1687,
		boiling: 3538,
		density: 2.3296,
		electronegativity: 1.9,
		radius: "",
		valence: "",
		specificheat: 0.705,
		comment: ""
	};
	var P = {
		name: "phosphorus",
		symbol: "P",
		type: "other-nonmetal",
		number: 15,
		mass: 30.974,
		period: 3,
		group: 15,
		melting: 317.3,
		boiling: 550,
		density: 1.82,
		electronegativity: 2.19,
		radius: "",
		valence: "",
		specificheat: 0.769,
		comment: ""
	};
	var S = {
		name: "sulfur",
		symbol: "S",
		type: "other-nonmetal",
		number: 16,
		mass: 32.06,
		period: 3,
		group: 16,
		melting: 388.36,
		boiling: 717.87,
		density: 2.067,
		electronegativity: 2.58,
		radius: "",
		valence: "",
		specificheat: 0.71,
		comment: ""
	};
	var Cl = {
		name: "chlorine",
		symbol: "Cl",
		type: "halogen",
		number: 17,
		mass: 35.45,
		period: 3,
		group: 17,
		melting: 171.6,
		boiling: 239.11,
		density: 0.003214,
		electronegativity: 3.16,
		radius: "",
		valence: "",
		specificheat: 0.479,
		comment: ""
	};
	var Ar = {
		name: "argon",
		symbol: "Ar",
		type: "noble-gas",
		number: 18,
		mass: 39.948,
		period: 3,
		group: 18,
		melting: 83.8,
		boiling: 87.3,
		density: 0.0017837,
		electronegativity: "",
		radius: "",
		valence: "",
		specificheat: 0.52,
		comment: ""
	};
	var K = {
		name: "potassium",
		symbol: "K",
		type: "alkali-metal",
		number: 19,
		mass: 39.0983,
		period: 4,
		group: 1,
		melting: 336.53,
		boiling: 1032,
		density: 0.862,
		electronegativity: 0.82,
		radius: "",
		valence: "",
		specificheat: 0.757,
		comment: ""
	};
	var Ca = {
		name: "calcium",
		symbol: "Ca",
		type: "alkaline-earth",
		number: 20,
		mass: 40.078,
		period: 4,
		group: 2,
		melting: 1115,
		boiling: 1757,
		density: 1.54,
		electronegativity: 1,
		radius: "",
		valence: "",
		specificheat: 0.647,
		comment: ""
	};
	var Sc = {
		name: "scandium",
		symbol: "Sc",
		type: "transition-metal",
		number: 21,
		mass: 44.956,
		period: 4,
		group: 3,
		melting: 1814,
		boiling: 3109,
		density: 2.989,
		electronegativity: 1.36,
		radius: "",
		valence: "",
		specificheat: 0.568,
		comment: ""
	};
	var Ti = {
		name: "titanium",
		symbol: "Ti",
		type: "transition-metal",
		number: 22,
		mass: 47.867,
		period: 4,
		group: 4,
		melting: 1941,
		boiling: 3560,
		density: 4.54,
		electronegativity: 1.54,
		radius: "",
		valence: "",
		specificheat: 0.523,
		comment: ""
	};
	var V = {
		name: "vandium",
		symbol: "V",
		type: "transition-metal",
		number: 23,
		mass: 50.9415,
		period: 4,
		group: 5,
		melting: 2183,
		boiling: 3680,
		density: 6.11,
		electronegativity: 1.63,
		radius: "",
		valence: "",
		specificheat: 0.489,
		comment: ""
	};
	var Cr = {
		name: "chromium",
		symbol: "Cr",
		type: "transition-metal",
		number: 24,
		mass: 51.9961,
		period: 4,
		group: 6,
		melting: 2180,
		boiling: 2944,
		density: 7.15,
		electronegativity: 1.66,
		radius: "",
		valence: "",
		specificheat: 0.449,
		comment: ""
	};
	var Mn = {
		name: "manganese",
		symbol: "Mn",
		type: "transition-metal",
		number: 25,
		mass: 54.938,
		period: 4,
		group: 7,
		melting: 1519,
		boiling: 2334,
		density: 7.44,
		electronegativity: 1.55,
		radius: "",
		valence: "",
		specificheat: 0.479,
		comment: ""
	};
	var Fe = {
		name: "iron",
		symbol: "Fe",
		type: "transition-metal",
		number: 26,
		mass: 55.845,
		period: 4,
		group: 8,
		melting: 1811,
		boiling: 3134,
		density: 7.874,
		electronegativity: 1.83,
		radius: "",
		valence: "",
		specificheat: 0.449,
		comment: ""
	};
	var Co = {
		name: "cobalt",
		symbol: "Co",
		type: "transition-metal",
		number: 27,
		mass: 58.933,
		period: 4,
		group: 9,
		melting: 1768,
		boiling: 3200,
		density: 8.86,
		electronegativity: 1.88,
		radius: "",
		valence: "",
		specificheat: 0.421,
		comment: ""
	};
	var Ni = {
		name: "nickel",
		symbol: "Ni",
		type: "transition-metal",
		number: 28,
		mass: 58.6934,
		period: 4,
		group: 10,
		melting: 1728,
		boiling: 3186,
		density: 8.912,
		electronegativity: 1.91,
		radius: "",
		valence: "",
		specificheat: 0.444,
		comment: ""
	};
	var Cu = {
		name: "copper",
		symbol: "Cu",
		type: "transition-metal",
		number: 29,
		mass: 63.546,
		period: 4,
		group: 11,
		melting: 1357.77,
		boiling: 2835,
		density: 8.96,
		electronegativity: 1.9,
		radius: "",
		valence: "",
		specificheat: 0.385,
		comment: ""
	};
	var Zn = {
		name: "zinc",
		symbol: "Zn",
		type: "transition-metal",
		number: 30,
		mass: 65.38,
		period: 4,
		group: 12,
		melting: 692.88,
		boiling: 1180,
		density: 7.134,
		electronegativity: 1.65,
		radius: "",
		valence: "",
		specificheat: 0.388,
		comment: ""
	};
	var Ga = {
		name: "gallium",
		symbol: "Ga",
		type: "post-transition-metal",
		number: 31,
		mass: 69.723,
		period: 4,
		group: 13,
		melting: 302.9146,
		boiling: 2477,
		density: 5.907,
		electronegativity: 1.81,
		radius: "",
		valence: "",
		specificheat: 0.371,
		comment: ""
	};
	var Ge = {
		name: "germanium",
		symbol: "Ge",
		type: "metalloid",
		number: 32,
		mass: 72.63,
		period: 4,
		group: 14,
		melting: 1211.4,
		boiling: 3106,
		density: 5.323,
		electronegativity: 2.01,
		radius: "",
		valence: "",
		specificheat: 0.32,
		comment: ""
	};
	var As = {
		name: "arsenic",
		symbol: "As",
		type: "metalloid",
		number: 33,
		mass: 74.921,
		period: 4,
		group: 15,
		melting: 1090,
		boiling: 887,
		density: 5.776,
		electronegativity: 2.18,
		radius: "",
		valence: "",
		specificheat: 0.329,
		comment: ""
	};
	var Se = {
		name: "selenium",
		symbol: "Se",
		type: "other-nonmetal",
		number: 34,
		mass: 78.971,
		period: 4,
		group: 16,
		melting: 453,
		boiling: 958,
		density: 4.809,
		electronegativity: 2.55,
		radius: "",
		valence: "",
		specificheat: 0.321,
		comment: ""
	};
	var Br = {
		name: "bromine",
		symbol: "Br",
		type: "halogen",
		number: 35,
		mass: 79.904,
		period: 4,
		group: 17,
		melting: 265.8,
		boiling: 332,
		density: 3.122,
		electronegativity: 2.96,
		radius: "",
		valence: "",
		specificheat: 0.474,
		comment: ""
	};
	var Kr = {
		name: "krypton",
		symbol: "Kr",
		type: "noble-gas",
		number: 36,
		mass: 83.798,
		period: 4,
		group: 18,
		melting: 115.79,
		boiling: 119.93,
		density: 0.003733,
		electronegativity: 3,
		radius: "",
		valence: "",
		specificheat: 0.248,
		comment: ""
	};
	var Rb = {
		name: "rubidium",
		symbol: "Rb",
		type: "alkali-metal",
		number: 37,
		mass: 85.4678,
		period: 5,
		group: 1,
		melting: 312.46,
		boiling: 961,
		density: 1.532,
		electronegativity: 0.82,
		radius: "",
		valence: "",
		specificheat: 0.363,
		comment: ""
	};
	var Sr = {
		name: "strontium",
		symbol: "Sr",
		type: "alkaline-earth",
		number: 38,
		mass: 87.62,
		period: 5,
		group: 2,
		melting: 1050,
		boiling: 1655,
		density: 2.64,
		electronegativity: 0.95,
		radius: "",
		valence: "",
		specificheat: 0.301,
		comment: ""
	};
	var Y = {
		name: "yttrium",
		symbol: "Y",
		type: "transition-metal",
		number: 39,
		mass: 88.906,
		period: 5,
		group: 3,
		melting: 1799,
		boiling: 3609,
		density: 4.469,
		electronegativity: 1.22,
		radius: "",
		valence: "",
		specificheat: 0.298,
		comment: ""
	};
	var Zr = {
		name: "zirconium",
		symbol: "Zr",
		type: "transition-metal",
		number: 40,
		mass: 91.224,
		period: 5,
		group: 4,
		melting: 2128,
		boiling: 4682,
		density: 6.506,
		electronegativity: 1.33,
		radius: "",
		valence: "",
		specificheat: 0.278,
		comment: ""
	};
	var Nb = {
		name: "niobium",
		symbol: "Nb",
		type: "transition-metal",
		number: 41,
		mass: 92.9064,
		period: 5,
		group: 5,
		melting: 2750,
		boiling: 5017,
		density: 8.57,
		electronegativity: 1.6,
		radius: "",
		valence: "",
		specificheat: 0.265,
		comment: ""
	};
	var Mo = {
		name: "molybdenum",
		symbol: "Mo",
		type: "transition-metal",
		number: 42,
		mass: 95.95,
		period: 5,
		group: 6,
		melting: 2896,
		boiling: 4912,
		density: 10.28,
		electronegativity: 2.16,
		radius: "",
		valence: "",
		specificheat: 0.251,
		comment: ""
	};
	var Tc = {
		name: "technetium",
		symbol: "Tc",
		type: "transition-metal",
		number: 43,
		mass: 97,
		period: 5,
		group: 7,
		melting: 2430,
		boiling: 4538,
		density: 11.5,
		electronegativity: 1.9,
		radius: "",
		valence: "",
		specificheat: 0.63,
		comment: ""
	};
	var Ru = {
		name: "ruthenium",
		symbol: "Ru",
		type: "transition-metal",
		number: 44,
		mass: 101.07,
		period: 5,
		group: 8,
		melting: 2607,
		boiling: 4423,
		density: 12.37,
		electronegativity: 2.2,
		radius: "",
		valence: "",
		specificheat: 0.238,
		comment: ""
	};
	var Rh = {
		name: "rhodium",
		symbol: "Rh",
		type: "transition-metal",
		number: 45,
		mass: 102.9055,
		period: 5,
		group: 9,
		melting: 2237,
		boiling: 3968,
		density: 12.41,
		electronegativity: 2.28,
		radius: "",
		valence: "",
		specificheat: 0.243,
		comment: ""
	};
	var Pd = {
		name: "palladium",
		symbol: "Pd",
		type: "transition-metal",
		number: 46,
		mass: 106.42,
		period: 5,
		group: 10,
		melting: 1828.05,
		boiling: 3236,
		density: 12.02,
		electronegativity: 2.2,
		radius: "",
		valence: "",
		specificheat: 0.244,
		comment: ""
	};
	var Ag = {
		name: "silver",
		symbol: "Ag",
		type: "transition-metal",
		number: 47,
		mass: 107.8682,
		period: 5,
		group: 11,
		melting: 1234.93,
		boiling: 2435,
		density: 10.501,
		electronegativity: 1.93,
		radius: "",
		valence: "",
		specificheat: 0.235,
		comment: ""
	};
	var Cd = {
		name: "cadmium",
		symbol: "Cd",
		type: "transition-metal",
		number: 48,
		mass: 112.414,
		period: 5,
		group: 12,
		melting: 594.22,
		boiling: 1040,
		density: 8.69,
		electronegativity: 1.69,
		radius: "",
		valence: "",
		specificheat: 0.232,
		comment: ""
	};
	var In = {
		name: "indium",
		symbol: "In",
		type: "post-transition-metal",
		number: 49,
		mass: 114.818,
		period: 5,
		group: 13,
		melting: 429.75,
		boiling: 2345,
		density: 7.31,
		electronegativity: 1.78,
		radius: "",
		valence: "",
		specificheat: 0.233,
		comment: ""
	};
	var Sn = {
		name: "tin",
		symbol: "Sn",
		type: "post-transition-metal",
		number: 50,
		mass: 118.71,
		period: 5,
		group: 14,
		melting: 505.08,
		boiling: 2875,
		density: 7.287,
		electronegativity: 1.96,
		radius: "",
		valence: "",
		specificheat: 0.228,
		comment: ""
	};
	var Sb = {
		name: "antimony",
		symbol: "Sb",
		type: "metalloid",
		number: 51,
		mass: 121.76,
		period: 5,
		group: 15,
		melting: 903.78,
		boiling: 1860,
		density: 6.685,
		electronegativity: 2.05,
		radius: "",
		valence: "",
		specificheat: 0.207,
		comment: ""
	};
	var Te = {
		name: "tellurium",
		symbol: "Te",
		type: "metalloid",
		number: 52,
		mass: 127.6,
		period: 5,
		group: 16,
		melting: 722.66,
		boiling: 1261,
		density: 6.232,
		electronegativity: 2.1,
		radius: "",
		valence: "",
		specificheat: 0.202,
		comment: ""
	};
	var I = {
		name: "iodine",
		symbol: "I",
		type: "halogen",
		number: 53,
		mass: 126.90447,
		period: 5,
		group: 17,
		melting: 386.85,
		boiling: 457.4,
		density: 4.93,
		electronegativity: 2.66,
		radius: "",
		valence: "",
		specificheat: 0.214,
		comment: ""
	};
	var Xe = {
		name: "xenon",
		symbol: "Xe",
		type: "noble-gas",
		number: 54,
		mass: 131.293,
		period: 5,
		group: 18,
		melting: 161.4,
		boiling: 165.03,
		density: 0.005887,
		electronegativity: 2.6,
		radius: "",
		valence: "",
		specificheat: 0.158,
		comment: ""
	};
	var Cs = {
		name: "caesium",
		symbol: "Cs",
		type: "alkali-metal",
		number: 55,
		mass: 132.9055,
		period: 6,
		group: 1,
		melting: 301.59,
		boiling: 944,
		density: 1.873,
		electronegativity: 0.79,
		radius: "",
		valence: "",
		specificheat: 0.242,
		comment: ""
	};
	var Ba = {
		name: "barium",
		symbol: "Ba",
		type: "alkaline-earth",
		number: 56,
		mass: 137.327,
		period: 6,
		group: 2,
		melting: 1000,
		boiling: 2170,
		density: 3.594,
		electronegativity: 0.89,
		radius: "",
		valence: "",
		specificheat: 0.204,
		comment: ""
	};
	var La = {
		name: "Lanthanum",
		symbol: "La",
		type: "lanthanoid",
		number: 57,
		mass: 138.9055,
		period: 6,
		group: "",
		melting: 1193,
		boiling: 3737,
		density: 6.145,
		electronegativity: 1.1,
		radius: "",
		valence: "",
		specificheat: 0.195,
		comment: ""
	};
	var Ce = {
		name: "cerium",
		symbol: "Ce",
		type: "lanthanoid",
		number: 58,
		mass: 140.116,
		period: 6,
		group: "",
		melting: 1068,
		boiling: 3716,
		density: 6.77,
		electronegativity: 1.12,
		radius: "",
		valence: "",
		specificheat: 0.192,
		comment: ""
	};
	var Pr = {
		name: "praseodymium",
		symbol: "Pr",
		type: "lanthanoid",
		number: 59,
		mass: 140.90766,
		period: 6,
		group: "",
		melting: 1208,
		boiling: 3793,
		density: 6.773,
		electronegativity: 1.13,
		radius: "",
		valence: "",
		specificheat: 0.193,
		comment: ""
	};
	var Nd = {
		name: "neodymium",
		symbol: "Nd",
		type: "lanthanoid",
		number: 60,
		mass: 144.242,
		period: 6,
		group: "",
		melting: 1297,
		boiling: 3347,
		density: 7.007,
		electronegativity: 1.14,
		radius: "",
		valence: "",
		specificheat: 0.19,
		comment: ""
	};
	var Pm = {
		name: "promethium",
		symbol: "Pm",
		type: "lanthanoid",
		number: 61,
		mass: 145,
		period: 6,
		group: "",
		melting: 1315,
		boiling: 3273,
		density: 7.26,
		electronegativity: 1.13,
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var Sm = {
		name: "samarium",
		symbol: "Sm",
		type: "lanthanoid",
		number: 62,
		mass: 150.36,
		period: 6,
		group: "",
		melting: 1345,
		boiling: 2067,
		density: 7.52,
		electronegativity: 1.17,
		radius: "",
		valence: "",
		specificheat: 0.197,
		comment: ""
	};
	var Eu = {
		name: "europium",
		symbol: "Eu",
		type: "lanthanoid",
		number: 63,
		mass: 151.964,
		period: 6,
		group: "",
		melting: 1099,
		boiling: 1802,
		density: 5.243,
		electronegativity: 1.2,
		radius: "",
		valence: "",
		specificheat: 0.182,
		comment: ""
	};
	var Gd = {
		name: "gadolinium",
		symbol: "Gd",
		type: "lanthanoid",
		number: 64,
		mass: 157.25,
		period: 6,
		group: "",
		melting: 1585,
		boiling: 3546,
		density: 7.895,
		electronegativity: 1.2,
		radius: "",
		valence: "",
		specificheat: 0.236,
		comment: ""
	};
	var Tb = {
		name: "terbium",
		symbol: "Tb",
		type: "lanthanoid",
		number: 65,
		mass: 158.92535,
		period: 6,
		group: "",
		melting: 1629,
		boiling: 3503,
		density: 8.229,
		electronegativity: 1.2,
		radius: "",
		valence: "",
		specificheat: 0.182,
		comment: ""
	};
	var Dy = {
		name: "dysprosium",
		symbol: "Dy",
		type: "lanthanoid",
		number: 66,
		mass: 162.5,
		period: 6,
		group: "",
		melting: 1680,
		boiling: 2840,
		density: 8.55,
		electronegativity: 1.22,
		radius: "",
		valence: "",
		specificheat: 0.17,
		comment: ""
	};
	var Ho = {
		name: "holmium",
		symbol: "Ho",
		type: "lanthanoid",
		number: 67,
		mass: 164.93033,
		period: 6,
		group: "",
		melting: 1734,
		boiling: 2993,
		density: 8.795,
		electronegativity: 1.23,
		radius: "",
		valence: "",
		specificheat: 0.165,
		comment: ""
	};
	var Er = {
		name: "erbium",
		symbol: "Er",
		type: "lanthanoid",
		number: 68,
		mass: 167.259,
		period: 6,
		group: "",
		melting: 1802,
		boiling: 3141,
		density: 9.066,
		electronegativity: 1.24,
		radius: "",
		valence: "",
		specificheat: 0.168,
		comment: ""
	};
	var Tm = {
		name: "thulium",
		symbol: "Tm",
		type: "lanthanoid",
		number: 69,
		mass: 168.9342,
		period: 6,
		group: "",
		melting: 1818,
		boiling: 2223,
		density: 9.321,
		electronegativity: 1.25,
		radius: "",
		valence: "",
		specificheat: 0.16,
		comment: ""
	};
	var Yb = {
		name: "ytterbium",
		symbol: "Yb",
		type: "lanthanoid",
		number: 70,
		mass: 173.045,
		period: 6,
		group: "",
		melting: 1097,
		boiling: 1469,
		density: 6.965,
		electronegativity: 1.1,
		radius: "",
		valence: "",
		specificheat: 0.155,
		comment: ""
	};
	var Lu = {
		name: "lutetium",
		symbol: "Lu",
		type: "lanthanoid",
		number: 71,
		mass: 174.9668,
		period: 6,
		group: 3,
		melting: 1925,
		boiling: 3675,
		density: 9.84,
		electronegativity: 1.27,
		radius: "",
		valence: "",
		specificheat: 0.154,
		comment: ""
	};
	var Hf = {
		name: "hafnium",
		symbol: "Hf",
		type: "transition-metal",
		number: 72,
		mass: 178.49,
		period: 6,
		group: 4,
		melting: 2506,
		boiling: 4876,
		density: 13.31,
		electronegativity: 1.3,
		radius: "",
		valence: "",
		specificheat: 0.1444,
		comment: ""
	};
	var Ta = {
		name: "tantalum",
		symbol: "Ta",
		type: "transition-metal",
		number: 73,
		mass: 180.94788,
		period: 6,
		group: 5,
		melting: 3290,
		boiling: 5731,
		density: 16.654,
		electronegativity: 1.5,
		radius: "",
		valence: "",
		specificheat: 0.14,
		comment: ""
	};
	var W = {
		name: "tungsten",
		symbol: "W",
		type: "transition-metal",
		number: 74,
		mass: 183.84,
		period: 6,
		group: 6,
		melting: 3290,
		boiling: 5731,
		density: 16.654,
		electronegativity: 1.5,
		radius: "",
		valence: "",
		specificheat: 0.14,
		comment: ""
	};
	var Re = {
		name: "rhenium",
		symbol: "Re",
		type: "transition-metal",
		number: 75,
		mass: 186.207,
		period: 6,
		group: 7,
		melting: 3459,
		boiling: 5869,
		density: 21.02,
		electronegativity: 1.9,
		radius: "",
		valence: "",
		specificheat: 1.37,
		comment: ""
	};
	var Os = {
		name: "osmium",
		symbol: "Os",
		type: "transition-metal",
		number: 76,
		mass: 190.23,
		period: 6,
		group: 8,
		melting: 3306,
		boiling: 5285,
		density: 22.61,
		electronegativity: 2.2,
		radius: "",
		valence: "",
		specificheat: 0.13,
		comment: ""
	};
	var Ir = {
		name: "iridium",
		symbol: "Ir",
		type: "transition-metal",
		number: 77,
		mass: 192.217,
		period: 6,
		group: 9,
		melting: 2719,
		boiling: 4701,
		density: 22.56,
		electronegativity: 2.2,
		radius: "",
		valence: "",
		specificheat: 0.131,
		comment: ""
	};
	var Pt = {
		name: "platinum",
		symbol: "Pt",
		type: "transition-metal",
		number: 78,
		mass: 195.084,
		period: 6,
		group: 10,
		melting: 2041.4,
		boiling: 4098,
		density: 21.46,
		electronegativity: 2.28,
		radius: "",
		valence: "",
		specificheat: 0.133,
		comment: ""
	};
	var Au = {
		name: "gold",
		symbol: "Au",
		type: "transition-metal",
		number: 79,
		mass: 196.966569,
		period: 6,
		group: 11,
		melting: 1337.33,
		boiling: 3129,
		density: 19.282,
		electronegativity: 2.54,
		radius: "",
		valence: "",
		specificheat: 0.129,
		comment: ""
	};
	var Hg = {
		name: "mercury",
		symbol: "Hg",
		type: "transition-metal",
		number: 80,
		mass: 200.592,
		period: 6,
		group: 12,
		melting: 234.43,
		boiling: 629.88,
		density: 13.5336,
		electronegativity: 2,
		radius: "",
		valence: "",
		specificheat: 0.14,
		comment: ""
	};
	var Tl = {
		name: "thalium",
		symbol: "Tl",
		type: "post-transition-metal",
		number: 81,
		mass: 204.38,
		period: 6,
		group: 13,
		melting: 577,
		boiling: 1746,
		density: 11.85,
		electronegativity: 1.62,
		radius: "",
		valence: "",
		specificheat: 0.129,
		comment: ""
	};
	var Pb = {
		name: "lead",
		symbol: "Pb",
		type: "post-transition-metal",
		number: 82,
		mass: 207.2,
		period: 6,
		group: 14,
		melting: 600.61,
		boiling: 2022,
		density: 11.342,
		electronegativity: 1.87,
		radius: "",
		valence: "",
		specificheat: 0.129,
		comment: ""
	};
	var Bi = {
		name: "bismuth",
		symbol: "Bi",
		type: "post-transition-metal",
		number: 83,
		mass: 208.9804,
		period: 6,
		group: 15,
		melting: 544.7,
		boiling: 1837,
		density: 9.807,
		electronegativity: 2.02,
		radius: "",
		valence: "",
		specificheat: 0.122,
		comment: ""
	};
	var Po = {
		name: "polonium",
		symbol: "Po",
		type: "metalloid",
		number: 84,
		mass: 209,
		period: 6,
		group: 16,
		melting: 527,
		boiling: 1235,
		density: 9.32,
		electronegativity: 2,
		radius: "",
		valence: "",
		specificheat: 0.125,
		comment: ""
	};
	var At = {
		name: "astatine",
		symbol: "At",
		type: "halogen",
		number: 85,
		mass: 210,
		period: 6,
		group: 17,
		melting: 575,
		boiling: 610,
		density: 7,
		electronegativity: 2.2,
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var Rn = {
		name: "radon",
		symbol: "Rn",
		type: "noble-gas",
		number: 86,
		mass: 222,
		period: 6,
		group: 18,
		melting: 202,
		boiling: 211.3,
		density: 0.00973,
		electronegativity: 2.2,
		radius: "",
		valence: "",
		specificheat: 0.094,
		comment: ""
	};
	var Fr = {
		name: "francium",
		symbol: "Fr",
		type: "alkali-metal",
		number: 87,
		mass: 223,
		period: 7,
		group: 1,
		melting: 300,
		boiling: 950,
		density: 1.87,
		electronegativity: 0.7,
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var Ra = {
		name: "radium",
		symbol: "Ra",
		type: "alkaline-earth",
		number: 88,
		mass: 226,
		period: 7,
		group: 2,
		melting: 973,
		boiling: 2010,
		density: 5.5,
		electronegativity: 0.9,
		radius: "",
		valence: "",
		specificheat: 0.094,
		comment: ""
	};
	var Ac = {
		name: "actinium",
		symbol: "Ac",
		type: "actinoid",
		number: 89,
		mass: 227,
		period: 7,
		group: "",
		melting: 1323,
		boiling: 3471,
		density: 10.07,
		electronegativity: 1.1,
		radius: "",
		valence: "",
		specificheat: 0.12,
		comment: ""
	};
	var Th = {
		name: "thorium",
		symbol: "Th",
		type: "actinoid",
		number: 90,
		mass: 232.0377,
		period: 7,
		group: "",
		melting: 2115,
		boiling: 5061,
		density: 11.72,
		electronegativity: 1.3,
		radius: "",
		valence: "",
		specificheat: 0.113,
		comment: ""
	};
	var Pa = {
		name: "protactinium",
		symbol: "Pa",
		type: "actinoid",
		number: 91,
		mass: 231.03588,
		period: 7,
		group: "",
		melting: 1841,
		boiling: 4300,
		density: 15.37,
		electronegativity: 1.5,
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var U = {
		name: "uranium",
		symbol: "U",
		type: "actinoid",
		number: 92,
		mass: 238.02891,
		period: 7,
		group: "",
		melting: 1405.3,
		boiling: 4404,
		density: 18.95,
		electronegativity: 1.38,
		radius: "",
		valence: "",
		specificheat: 0.116,
		comment: ""
	};
	var Np = {
		name: "neptunium",
		symbol: "Np",
		type: "actinoid",
		number: 93,
		mass: 237,
		period: 7,
		group: "",
		melting: 917,
		boiling: 4273,
		density: 20.45,
		electronegativity: 1.36,
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var Pu = {
		name: "plutonium",
		symbol: "Pu",
		type: "actinoid",
		number: 94,
		mass: 244,
		period: 7,
		group: "",
		melting: 912.5,
		boiling: 3501,
		density: 19.84,
		electronegativity: 1.28,
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var Am = {
		name: "americium",
		symbol: "Am",
		type: "actinoid",
		number: 95,
		mass: 243,
		period: 7,
		group: "",
		melting: 1449,
		boiling: 2880,
		density: 13.69,
		electronegativity: 1.13,
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var Cm = {
		name: "curium",
		symbol: "Cm",
		type: "actinoid",
		number: 96,
		mass: 247,
		period: 7,
		group: "",
		melting: 1613,
		boiling: 3383,
		density: 13.51,
		electronegativity: 1.28,
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var Bk = {
		name: "berkelium",
		symbol: "Bk",
		type: "actinoid",
		number: 97,
		mass: 247,
		period: 7,
		group: "",
		melting: 1259,
		boiling: 2900,
		density: 14.79,
		electronegativity: 1.3,
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var Cf = {
		name: "californium",
		symbol: "Cf",
		type: "actinoid",
		number: 98,
		mass: 251,
		period: 7,
		group: "",
		melting: 1173,
		boiling: 1743,
		density: 15.1,
		electronegativity: 1.3,
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var Es = {
		name: "einsteinium",
		symbol: "Es",
		type: "actinoid",
		number: 99,
		mass: 252,
		period: 7,
		group: "",
		melting: 1133,
		boiling: 1269,
		density: 8.84,
		electronegativity: 1.3,
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var Fm = {
		name: "fermium",
		symbol: "Fm",
		type: "actinoid",
		number: 100,
		mass: 257,
		period: 7,
		group: "",
		melting: 1125,
		boiling: "",
		density: "",
		electronegativity: 1.3,
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var Md = {
		name: "mendelevium",
		symbol: "Md",
		type: "actinoid",
		number: 101,
		mass: 258,
		period: 7,
		group: "",
		melting: 1100,
		boiling: "",
		density: "",
		electronegativity: 1.3,
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var No = {
		name: "nobelium",
		symbol: "No",
		type: "actinoid",
		number: 102,
		mass: 259,
		period: 7,
		group: "",
		melting: 1100,
		boiling: "",
		density: "",
		electronegativity: 1.3,
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var Lr = {
		name: "lawrencium",
		symbol: "Lr",
		type: "actinoid",
		number: 103,
		mass: 262,
		period: 7,
		group: 3,
		melting: 1900,
		boiling: "",
		density: "",
		electronegativity: 1.3,
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var Rf = {
		name: "rutherforium",
		symbol: "Rf",
		type: "transition-metal",
		number: 104,
		mass: 267,
		period: 7,
		group: 4,
		melting: 2400,
		boiling: 5800,
		density: 23.2,
		electronegativity: "",
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var Db = {
		name: "dubnium",
		symbol: "Db",
		type: "transition-metal",
		number: 105,
		mass: 270,
		period: 7,
		group: 5,
		melting: "",
		boiling: "",
		density: 29.3,
		electronegativity: "",
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var Sg = {
		name: "seaborgium",
		symbol: "Sg",
		type: "transition-metal",
		number: 106,
		mass: 269,
		period: 7,
		group: 6,
		melting: "",
		boiling: "",
		density: 35,
		electronegativity: "",
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var Bh = {
		name: "bohrium",
		symbol: "Bh",
		type: "transition-metal",
		number: 107,
		mass: 270,
		period: 7,
		group: 7,
		melting: "",
		boiling: "",
		density: 37.1,
		electronegativity: "",
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var Hs = {
		name: "hassium",
		symbol: "Hs",
		type: "transition-metal",
		number: 108,
		mass: 270,
		period: 7,
		group: 8,
		melting: "",
		boiling: "",
		density: 40.7,
		electronegativity: "",
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var Mt = {
		name: "meitnerium",
		symbol: "Mt",
		type: "transition-metal",
		number: 109,
		mass: 278,
		period: 7,
		group: 9,
		melting: "",
		boiling: "",
		density: 37.4,
		electronegativity: "",
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var Ds = {
		name: "darmstadtium",
		symbol: "Ds",
		type: "transition-metal",
		number: 110,
		mass: 281,
		period: 7,
		group: 10,
		melting: "",
		boiling: "",
		density: 34.8,
		electronegativity: "",
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var Rg = {
		name: "roentgenium",
		symbol: "Rg",
		type: "transition-metal",
		number: 111,
		mass: 281,
		period: 7,
		group: 11,
		melting: "",
		boiling: "",
		density: 28.7,
		electronegativity: "",
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var Cn = {
		name: "copernicium",
		symbol: "Cn",
		type: "transition-metal",
		number: 112,
		mass: 285,
		period: 7,
		group: 12,
		melting: "",
		boiling: 357,
		density: 23.7,
		electronegativity: "",
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var Nh = {
		name: "nihonium",
		symbol: "Nh",
		type: "post-transition-metal",
		number: 113,
		mass: 286,
		period: 7,
		group: 13,
		melting: 700,
		boiling: 1400,
		density: 16,
		electronegativity: "",
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var Fl = {
		name: "flerovium",
		symbol: "Fl",
		type: "post-transition-metal",
		number: 114,
		mass: 289,
		period: 7,
		group: 14,
		melting: 340,
		boiling: 420,
		density: 14,
		electronegativity: "",
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var Mc = {
		name: "moscovium",
		symbol: "Mc",
		type: "post-transition-metal",
		number: 115,
		mass: 289,
		period: 7,
		group: 15,
		melting: 700,
		boiling: 1400,
		density: 13.5,
		electronegativity: "",
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var Lv = {
		name: "livermorium",
		symbol: "Lv",
		type: "post-transition-metal",
		number: 116,
		mass: 293,
		period: 7,
		group: 16,
		melting: 708.5,
		boiling: 1085,
		density: 12.9,
		electronegativity: "",
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var Ts = {
		name: "tennessine",
		symbol: "Ts",
		type: "halogen",
		number: 117,
		mass: 293,
		period: 7,
		group: 17,
		melting: 673,
		boiling: 823,
		density: 7.2,
		electronegativity: "",
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var Og = {
		name: "oganesson",
		symbol: "Og",
		type: "noble-gas",
		number: 118,
		mass: 294,
		period: 7,
		group: 18,
		melting: 258,
		boiling: 263,
		density: 5,
		electronegativity: "",
		radius: "",
		valence: "",
		specificheat: "",
		comment: ""
	};
	var elements = {
		H: H,
		He: He,
		Li: Li,
		Be: Be,
		B: B,
		C: C,
		N: N,
		O: O,
		F: F,
		Ne: Ne,
		Na: Na,
		Mg: Mg,
		Al: Al,
		Si: Si,
		P: P,
		S: S,
		Cl: Cl,
		Ar: Ar,
		K: K,
		Ca: Ca,
		Sc: Sc,
		Ti: Ti,
		V: V,
		Cr: Cr,
		Mn: Mn,
		Fe: Fe,
		Co: Co,
		Ni: Ni,
		Cu: Cu,
		Zn: Zn,
		Ga: Ga,
		Ge: Ge,
		As: As,
		Se: Se,
		Br: Br,
		Kr: Kr,
		Rb: Rb,
		Sr: Sr,
		Y: Y,
		Zr: Zr,
		Nb: Nb,
		Mo: Mo,
		Tc: Tc,
		Ru: Ru,
		Rh: Rh,
		Pd: Pd,
		Ag: Ag,
		Cd: Cd,
		In: In,
		Sn: Sn,
		Sb: Sb,
		Te: Te,
		I: I,
		Xe: Xe,
		Cs: Cs,
		Ba: Ba,
		La: La,
		Ce: Ce,
		Pr: Pr,
		Nd: Nd,
		Pm: Pm,
		Sm: Sm,
		Eu: Eu,
		Gd: Gd,
		Tb: Tb,
		Dy: Dy,
		Ho: Ho,
		Er: Er,
		Tm: Tm,
		Yb: Yb,
		Lu: Lu,
		Hf: Hf,
		Ta: Ta,
		W: W,
		Re: Re,
		Os: Os,
		Ir: Ir,
		Pt: Pt,
		Au: Au,
		Hg: Hg,
		Tl: Tl,
		Pb: Pb,
		Bi: Bi,
		Po: Po,
		At: At,
		Rn: Rn,
		Fr: Fr,
		Ra: Ra,
		Ac: Ac,
		Th: Th,
		Pa: Pa,
		U: U,
		Np: Np,
		Pu: Pu,
		Am: Am,
		Cm: Cm,
		Bk: Bk,
		Cf: Cf,
		Es: Es,
		Fm: Fm,
		Md: Md,
		No: No,
		Lr: Lr,
		Rf: Rf,
		Db: Db,
		Sg: Sg,
		Bh: Bh,
		Hs: Hs,
		Mt: Mt,
		Ds: Ds,
		Rg: Rg,
		Cn: Cn,
		Nh: Nh,
		Fl: Fl,
		Mc: Mc,
		Lv: Lv,
		Ts: Ts,
		Og: Og
	};

	class Compound {
	  constructor(element_list) {
	    this.elements = {};
	    this.elementsList = [];

	    if (element_list) {
	      for (var element in element_list) {
	        let quantity = element_list[element];
	        this.add(element, quantity);
	      }
	    }
	  }

	  add(element, quantity) {
	    quantity = quantity || 1;

	    if (!elements[element]) {
	      return false;
	    }

	    if (this.elements[element]) {
	      this.elements[element] += quantity;
	    } else {
	      this.elements[element] = quantity;
	      this.elementsList.push(element);
	    }

	    return true;
	  }

	  remove(element, quantity) {
	    quantity = quantity || 1;

	    if (!elements[element] || !this.elements[element]) {
	      return false;
	    }

	    let elementCount = this.elements[element];

	    if (quantity >= elementCount) {
	      delete this.elements[element];
	      this.elementsList.splice(this.elementsList.indexOf(element), 1);
	    } else {
	      this.elements[element] -= quantity;
	    }

	    return true;
	  }

	  clear() {
	    this.elements = {};
	    this.elementsList = [];
	  }

	  getMass() {
	    let mass = 0; // Okay okay, if I have time i'll find better names, this is getting nuts.

	    for (var element in this.elements) {
	      mass += this.elements[element] * elements[element].mass;
	    }

	    return mass;
	  }

	  getPercentages() {
	    let self = this;
	    let mass = this.getMass();
	    let percentages = this.elementsList.map(function (el) {
	      return {
	        element: el,
	        percentage: self.elements[el] * elements[el].mass / mass
	      };
	    });
	    return percentages;
	  }

	  toHTML() {
	    let html = '';

	    for (var element in this.elements) {
	      let quantity = this.elements[element];
	      html += element;
	      html += quantity <= 1 ? '' : '<sub>' + quantity + '</sub>';
	    }

	    return html;
	  }

	}

	var Compound_1 = Compound;

	class PeriodicTable {
	  static getElement(el) {
	    if (elements[el]) {
	      return elements[el];
	    } else {
	      return null;
	    }
	  }

	  static getAtomic(atomicNumber) {
	    let results = filterElements(v => {
	      return elements[v].number == atomicNumber;
	    });
	    return results[0] || null;
	  }

	  static getGroup(group) {
	    let results = filterElements(v => {
	      return elements[v].group == group;
	    });

	    if (results.length <= 0) {
	      return null;
	    }

	    return results || null;
	  }

	  static getPeriod(period) {
	    let results = filterElements(v => {
	      return elements[v].period == period;
	    });

	    if (results.length <= 0) {
	      return null;
	    }

	    return results || null;
	  }

	  static getType(type) {
	    let results = filterElements(v => {
	      return elements[v].type == type;
	    });

	    if (results.length <= 0) {
	      return null;
	    }

	    return results || null;
	  }

	}

	function filterElements(filter) {
	  let results = Object.keys(elements).filter(filter).map(v => {
	    return elements[v];
	  });
	  return results;
	}

	var PeriodicTable_1 = PeriodicTable;

	class Utility {
	  static stringToElementList(str) {
	    var list = {};
	    var matches = str.match(/(([A-Z]{1}[a-z]*)([0-9]*))/g);

	    for (var i in matches) {
	      var fragment = matches[i];
	      var element = fragment.match(/([A-Z]{1}[a-z]*)/g);

	      if (PeriodicTable_1.getElement(element) === null) {
	        return null;
	      }

	      var quantity = fragment.match(/([0-9]+)/g) || 1;
	      list[element] = parseInt(quantity) + (list[element] || 0);
	    }

	    return list;
	  }

	}

	var Utility_1 = Utility;

	var mendeleev = {
	  Compound: Compound_1,
	  PeriodicTable: PeriodicTable_1,
	  Utility: Utility_1
	};

	/* Utility functions */

	/**
	 *  Deep clone an object
	 *  @param  {Object}    obj     Object to clone
	 *  @return {Object}            Clone 
	 */

	function deepClone(obj) {
	  return JSON.parse(JSON.stringify(obj));
	}

	var deepClone_1 = deepClone;
	/**
	 *  Cross product of two vectors of 3 elements
	 *  @param  {Array} v1  
	 *  @param  {Array} v2
	 *  @return {Array}     v1 X v2
	 */

	function cross(v1, v2) {
	  return [v1[1] * v2[2] - v1[2] * v2[1], v1[2] * v2[0] - v1[0] * v2[2], v1[0] * v2[1] - v1[1] * v2[0]];
	}

	var cross_1 = cross;
	/**
	 *  Returns the unit vector version of v
	 *  @param  {Array} v
	 *  @return {Array}     Unit vector
	 */

	function unit(v) {
	  var n = Math.sqrt(v.reduce(function (s, x) {
	    return s + x * x;
	  }, 0));
	  return v.map(function (x) {
	    return x / n;
	  });
	}

	var unit_1 = unit;
	/**
	 * Reduce a vector to modulo 1 (interval [0,1]). Meant for fractional 
	 * coordinates
	 * @param  {Array} v 
	 * @return {Array}      Reduced vector
	 */

	function mod1(v) {
	  return v.map(function (x) {
	    x = x % 1;
	    return x >= 0 ? x : x + 1;
	  });
	}

	var mod1_1 = mod1;

	var _deg2rad = Math.PI / 180.0;
	/**
	 *  Convert degrees to radians
	 *  @param  {number}    deg     Angle in degrees
	 *  @return {number}            Angle in radians
	 */


	function degToRad(deg) {
	  return deg * _deg2rad;
	}

	var degToRad_1 = degToRad;
	/**
	 *  Convert radians to degrees
	 *  @param  {number}    rad     Angle in radians
	 *  @return {number}            Angle in degrees
	 */

	function radToDeg(rad) {
	  return rad / _deg2rad;
	}

	var radToDeg_1 = radToDeg;
	/**
	 *  Check if an array includes multiple elements
	 *  @param  {Array}     arr     Array to check
	 *  @param  {Array}     elems   Elements to search in arr
	 *  @return {bool}              Whether the check was successful
	 */

	function includesAll(arr, elems) {
	  var ans = true;

	  for (var i = 0; i < elems.length; ++i) {
	    ans = ans && arr.includes(elems[i]);
	  }

	  return ans;
	}

	var includesAll_1 = includesAll;
	var utils = {
	  deepClone: deepClone_1,
	  cross: cross_1,
	  unit: unit_1,
	  mod1: mod1_1,
	  degToRad: degToRad_1,
	  radToDeg: radToDeg_1,
	  includesAll: includesAll_1
	};

	var symdata = {
		"1": {
		pointgroup_international: "C1",
		schoenflies: "C1^1",
		pointgroup_schoenflies: "1",
		international_short: "P1",
		translations: [
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 1,
		choice: "",
		international_full: "P 1",
		hall_symbol: "P 1",
		international: "P 1",
		arithmetic_crystal_class_number: 1,
		arithmetic_crystal_class_symbol: "1P"
	},
		"2": {
		pointgroup_international: "Ci",
		schoenflies: "Ci^1",
		pointgroup_schoenflies: "-1",
		international_short: "P-1",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 2,
		choice: "",
		international_full: "P -1",
		hall_symbol: "-P 1",
		international: "P -1",
		arithmetic_crystal_class_number: 2,
		arithmetic_crystal_class_symbol: "-1P"
	},
		"3": {
		pointgroup_international: "C2",
		schoenflies: "C2^1",
		pointgroup_schoenflies: "2",
		international_short: "P2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 3,
		choice: "b",
		international_full: "P 1 2 1",
		hall_symbol: "P 2y",
		international: "P 2 = P 1 2 1",
		arithmetic_crystal_class_number: 3,
		arithmetic_crystal_class_symbol: "2P"
	},
		"4": {
		pointgroup_international: "C2",
		schoenflies: "C2^1",
		pointgroup_schoenflies: "2",
		international_short: "P2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 3,
		choice: "c",
		international_full: "P 1 1 2",
		hall_symbol: "P 2",
		international: "P 2 = P 1 1 2",
		arithmetic_crystal_class_number: 3,
		arithmetic_crystal_class_symbol: "2P"
	},
		"5": {
		pointgroup_international: "C2",
		schoenflies: "C2^1",
		pointgroup_schoenflies: "2",
		international_short: "P2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 3,
		choice: "a",
		international_full: "P 2 1 1",
		hall_symbol: "P 2x",
		international: "P 2 = P 2 1 1",
		arithmetic_crystal_class_number: 3,
		arithmetic_crystal_class_symbol: "2P"
	},
		"6": {
		pointgroup_international: "C2",
		schoenflies: "C2^2",
		pointgroup_schoenflies: "2",
		international_short: "P2_1",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 4,
		choice: "b",
		international_full: "P 1 2_1 1",
		hall_symbol: "P 2yb",
		international: "P 2_1 = P 1 2_1 1",
		arithmetic_crystal_class_number: 3,
		arithmetic_crystal_class_symbol: "2P"
	},
		"7": {
		pointgroup_international: "C2",
		schoenflies: "C2^2",
		pointgroup_schoenflies: "2",
		international_short: "P2_1",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 4,
		choice: "c",
		international_full: "P 1 1 2_1",
		hall_symbol: "P 2c",
		international: "P 2_1 = P 1 1 2_1",
		arithmetic_crystal_class_number: 3,
		arithmetic_crystal_class_symbol: "2P"
	},
		"8": {
		pointgroup_international: "C2",
		schoenflies: "C2^2",
		pointgroup_schoenflies: "2",
		international_short: "P2_1",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 4,
		choice: "a",
		international_full: "P 2_1 1 1",
		hall_symbol: "P 2xa",
		international: "P 2_1 = P 2_1 1 1",
		arithmetic_crystal_class_number: 3,
		arithmetic_crystal_class_symbol: "2P"
	},
		"9": {
		pointgroup_international: "C2",
		schoenflies: "C2^3",
		pointgroup_schoenflies: "2",
		international_short: "C2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 5,
		choice: "b1",
		international_full: "C 1 2 1",
		hall_symbol: "C 2y",
		international: "C 2 = C 1 2 1",
		arithmetic_crystal_class_number: 4,
		arithmetic_crystal_class_symbol: "2C"
	},
		"10": {
		pointgroup_international: "C2",
		schoenflies: "C2^3",
		pointgroup_schoenflies: "2",
		international_short: "C2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 5,
		choice: "b2",
		international_full: "A 1 2 1",
		hall_symbol: "A 2y",
		international: "C 2 = A 1 2 1",
		arithmetic_crystal_class_number: 4,
		arithmetic_crystal_class_symbol: "2C"
	},
		"11": {
		pointgroup_international: "C2",
		schoenflies: "C2^3",
		pointgroup_schoenflies: "2",
		international_short: "C2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 5,
		choice: "b3",
		international_full: "I 1 2 1",
		hall_symbol: "I 2y",
		international: "C 2 = I 1 2 1",
		arithmetic_crystal_class_number: 4,
		arithmetic_crystal_class_symbol: "2C"
	},
		"12": {
		pointgroup_international: "C2",
		schoenflies: "C2^3",
		pointgroup_schoenflies: "2",
		international_short: "C2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 5,
		choice: "c1",
		international_full: "A 1 1 2",
		hall_symbol: "A 2",
		international: "C 2 = A 1 1 2",
		arithmetic_crystal_class_number: 4,
		arithmetic_crystal_class_symbol: "2C"
	},
		"13": {
		pointgroup_international: "C2",
		schoenflies: "C2^3",
		pointgroup_schoenflies: "2",
		international_short: "C2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 5,
		choice: "c2",
		international_full: "B 1 1 2",
		hall_symbol: "B 2",
		international: "C 2 = B 1 1 2 = B 2",
		arithmetic_crystal_class_number: 4,
		arithmetic_crystal_class_symbol: "2C"
	},
		"14": {
		pointgroup_international: "C2",
		schoenflies: "C2^3",
		pointgroup_schoenflies: "2",
		international_short: "C2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 5,
		choice: "c3",
		international_full: "I 1 1 2",
		hall_symbol: "I 2",
		international: "C 2 = I 1 1 2",
		arithmetic_crystal_class_number: 4,
		arithmetic_crystal_class_symbol: "2C"
	},
		"15": {
		pointgroup_international: "C2",
		schoenflies: "C2^3",
		pointgroup_schoenflies: "2",
		international_short: "C2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 5,
		choice: "a1",
		international_full: "B 2 1 1",
		hall_symbol: "B 2x",
		international: "C 2 = B 2 1 1",
		arithmetic_crystal_class_number: 4,
		arithmetic_crystal_class_symbol: "2C"
	},
		"16": {
		pointgroup_international: "C2",
		schoenflies: "C2^3",
		pointgroup_schoenflies: "2",
		international_short: "C2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 5,
		choice: "a2",
		international_full: "C 2 1 1",
		hall_symbol: "C 2x",
		international: "C 2 = C 2 1 1",
		arithmetic_crystal_class_number: 4,
		arithmetic_crystal_class_symbol: "2C"
	},
		"17": {
		pointgroup_international: "C2",
		schoenflies: "C2^3",
		pointgroup_schoenflies: "2",
		international_short: "C2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 5,
		choice: "a3",
		international_full: "I 2 1 1",
		hall_symbol: "I 2x",
		international: "C 2 = I 2 1 1",
		arithmetic_crystal_class_number: 4,
		arithmetic_crystal_class_symbol: "2C"
	},
		"18": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^1",
		pointgroup_schoenflies: "m",
		international_short: "Pm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 6,
		choice: "b",
		international_full: "P 1 m 1",
		hall_symbol: "P -2y",
		international: "P m = P 1 m 1",
		arithmetic_crystal_class_number: 5,
		arithmetic_crystal_class_symbol: "mP"
	},
		"19": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^1",
		pointgroup_schoenflies: "m",
		international_short: "Pm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 6,
		choice: "c",
		international_full: "P 1 1 m",
		hall_symbol: "P -2",
		international: "P m = P 1 1 m",
		arithmetic_crystal_class_number: 5,
		arithmetic_crystal_class_symbol: "mP"
	},
		"20": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^1",
		pointgroup_schoenflies: "m",
		international_short: "Pm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 6,
		choice: "a",
		international_full: "P m 1 1",
		hall_symbol: "P -2x",
		international: "P m = P m 1 1",
		arithmetic_crystal_class_number: 5,
		arithmetic_crystal_class_symbol: "mP"
	},
		"21": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^2",
		pointgroup_schoenflies: "m",
		international_short: "Pc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 7,
		choice: "b1",
		international_full: "P 1 c 1",
		hall_symbol: "P -2yc",
		international: "P c = P 1 c 1",
		arithmetic_crystal_class_number: 5,
		arithmetic_crystal_class_symbol: "mP"
	},
		"22": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^2",
		pointgroup_schoenflies: "m",
		international_short: "Pc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 7,
		choice: "b2",
		international_full: "P 1 n 1",
		hall_symbol: "P -2yac",
		international: "P c = P 1 n 1",
		arithmetic_crystal_class_number: 5,
		arithmetic_crystal_class_symbol: "mP"
	},
		"23": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^2",
		pointgroup_schoenflies: "m",
		international_short: "Pc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 7,
		choice: "b3",
		international_full: "P 1 a 1",
		hall_symbol: "P -2ya",
		international: "P c = P 1 a 1",
		arithmetic_crystal_class_number: 5,
		arithmetic_crystal_class_symbol: "mP"
	},
		"24": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^2",
		pointgroup_schoenflies: "m",
		international_short: "Pc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 7,
		choice: "c1",
		international_full: "P 1 1 a",
		hall_symbol: "P -2a",
		international: "P c = P 1 1 a",
		arithmetic_crystal_class_number: 5,
		arithmetic_crystal_class_symbol: "mP"
	},
		"25": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^2",
		pointgroup_schoenflies: "m",
		international_short: "Pc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 7,
		choice: "c2",
		international_full: "P 1 1 n",
		hall_symbol: "P -2ab",
		international: "P c = P 1 1 n",
		arithmetic_crystal_class_number: 5,
		arithmetic_crystal_class_symbol: "mP"
	},
		"26": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^2",
		pointgroup_schoenflies: "m",
		international_short: "Pc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 7,
		choice: "c3",
		international_full: "P 1 1 b",
		hall_symbol: "P -2b",
		international: "P c = P 1 1 b = P b",
		arithmetic_crystal_class_number: 5,
		arithmetic_crystal_class_symbol: "mP"
	},
		"27": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^2",
		pointgroup_schoenflies: "m",
		international_short: "Pc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 7,
		choice: "a1",
		international_full: "P b 1 1",
		hall_symbol: "P -2xb",
		international: "P c = P b 1 1",
		arithmetic_crystal_class_number: 5,
		arithmetic_crystal_class_symbol: "mP"
	},
		"28": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^2",
		pointgroup_schoenflies: "m",
		international_short: "Pc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 7,
		choice: "a2",
		international_full: "P n 1 1",
		hall_symbol: "P -2xbc",
		international: "P c = P n 1 1",
		arithmetic_crystal_class_number: 5,
		arithmetic_crystal_class_symbol: "mP"
	},
		"29": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^2",
		pointgroup_schoenflies: "m",
		international_short: "Pc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 7,
		choice: "a3",
		international_full: "P c 1 1",
		hall_symbol: "P -2xc",
		international: "P c = P c 1 1",
		arithmetic_crystal_class_number: 5,
		arithmetic_crystal_class_symbol: "mP"
	},
		"30": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^3",
		pointgroup_schoenflies: "m",
		international_short: "Cm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 8,
		choice: "b1",
		international_full: "C 1 m 1",
		hall_symbol: "C -2y",
		international: "C m = C 1 m 1",
		arithmetic_crystal_class_number: 6,
		arithmetic_crystal_class_symbol: "mC"
	},
		"31": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^3",
		pointgroup_schoenflies: "m",
		international_short: "Cm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 8,
		choice: "b2",
		international_full: "A 1 m 1",
		hall_symbol: "A -2y",
		international: "C m = A 1 m 1",
		arithmetic_crystal_class_number: 6,
		arithmetic_crystal_class_symbol: "mC"
	},
		"32": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^3",
		pointgroup_schoenflies: "m",
		international_short: "Cm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 8,
		choice: "b3",
		international_full: "I 1 m 1",
		hall_symbol: "I -2y",
		international: "C m = I 1 m 1",
		arithmetic_crystal_class_number: 6,
		arithmetic_crystal_class_symbol: "mC"
	},
		"33": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^3",
		pointgroup_schoenflies: "m",
		international_short: "Cm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 8,
		choice: "c1",
		international_full: "A 1 1 m",
		hall_symbol: "A -2",
		international: "C m = A 1 1 m",
		arithmetic_crystal_class_number: 6,
		arithmetic_crystal_class_symbol: "mC"
	},
		"34": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^3",
		pointgroup_schoenflies: "m",
		international_short: "Cm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 8,
		choice: "c2",
		international_full: "B 1 1 m",
		hall_symbol: "B -2",
		international: "C m = B 1 1 m = B m",
		arithmetic_crystal_class_number: 6,
		arithmetic_crystal_class_symbol: "mC"
	},
		"35": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^3",
		pointgroup_schoenflies: "m",
		international_short: "Cm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 8,
		choice: "c3",
		international_full: "I 1 1 m",
		hall_symbol: "I -2",
		international: "C m = I 1 1 m",
		arithmetic_crystal_class_number: 6,
		arithmetic_crystal_class_symbol: "mC"
	},
		"36": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^3",
		pointgroup_schoenflies: "m",
		international_short: "Cm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 8,
		choice: "a1",
		international_full: "B m 1 1",
		hall_symbol: "B -2x",
		international: "C m = B m 1 1",
		arithmetic_crystal_class_number: 6,
		arithmetic_crystal_class_symbol: "mC"
	},
		"37": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^3",
		pointgroup_schoenflies: "m",
		international_short: "Cm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 8,
		choice: "a2",
		international_full: "C m 1 1",
		hall_symbol: "C -2x",
		international: "C m = C m 1 1",
		arithmetic_crystal_class_number: 6,
		arithmetic_crystal_class_symbol: "mC"
	},
		"38": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^3",
		pointgroup_schoenflies: "m",
		international_short: "Cm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 8,
		choice: "a3",
		international_full: "I m 1 1",
		hall_symbol: "I -2x",
		international: "C m = I m 1 1",
		arithmetic_crystal_class_number: 6,
		arithmetic_crystal_class_symbol: "mC"
	},
		"39": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^4",
		pointgroup_schoenflies: "m",
		international_short: "Cc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 9,
		choice: "b1",
		international_full: "C 1 c 1",
		hall_symbol: "C -2yc",
		international: "C c = C 1 c 1",
		arithmetic_crystal_class_number: 6,
		arithmetic_crystal_class_symbol: "mC"
	},
		"40": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^4",
		pointgroup_schoenflies: "m",
		international_short: "Cc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 9,
		choice: "b2",
		international_full: "A 1 n 1",
		hall_symbol: "A -2yac",
		international: "C c = A 1 n 1",
		arithmetic_crystal_class_number: 6,
		arithmetic_crystal_class_symbol: "mC"
	},
		"41": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^4",
		pointgroup_schoenflies: "m",
		international_short: "Cc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 9,
		choice: "b3",
		international_full: "I 1 a 1",
		hall_symbol: "I -2ya",
		international: "C c = I 1 a 1",
		arithmetic_crystal_class_number: 6,
		arithmetic_crystal_class_symbol: "mC"
	},
		"42": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^4",
		pointgroup_schoenflies: "m",
		international_short: "Cc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 9,
		choice: "-b1",
		international_full: "A 1 a 1",
		hall_symbol: "A -2ya",
		international: "C c = A 1 a 1",
		arithmetic_crystal_class_number: 6,
		arithmetic_crystal_class_symbol: "mC"
	},
		"43": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^4",
		pointgroup_schoenflies: "m",
		international_short: "Cc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 9,
		choice: "-b2",
		international_full: "C 1 n 1",
		hall_symbol: "C -2ybc",
		international: "C c = C 1 n 1",
		arithmetic_crystal_class_number: 6,
		arithmetic_crystal_class_symbol: "mC"
	},
		"44": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^4",
		pointgroup_schoenflies: "m",
		international_short: "Cc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 9,
		choice: "-b3",
		international_full: "I 1 c 1",
		hall_symbol: "I -2yc",
		international: "C c = I 1 c 1",
		arithmetic_crystal_class_number: 6,
		arithmetic_crystal_class_symbol: "mC"
	},
		"45": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^4",
		pointgroup_schoenflies: "m",
		international_short: "Cc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 9,
		choice: "c1",
		international_full: "A 1 1 a",
		hall_symbol: "A -2a",
		international: "C c = A 1 1 a",
		arithmetic_crystal_class_number: 6,
		arithmetic_crystal_class_symbol: "mC"
	},
		"46": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^4",
		pointgroup_schoenflies: "m",
		international_short: "Cc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 9,
		choice: "c2",
		international_full: "B 1 1 n",
		hall_symbol: "B -2bc",
		international: "C c = B 1 1 n",
		arithmetic_crystal_class_number: 6,
		arithmetic_crystal_class_symbol: "mC"
	},
		"47": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^4",
		pointgroup_schoenflies: "m",
		international_short: "Cc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 9,
		choice: "c3",
		international_full: "I 1 1 b",
		hall_symbol: "I -2b",
		international: "C c = I 1 1 b",
		arithmetic_crystal_class_number: 6,
		arithmetic_crystal_class_symbol: "mC"
	},
		"48": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^4",
		pointgroup_schoenflies: "m",
		international_short: "Cc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 9,
		choice: "-c1",
		international_full: "B 1 1 b",
		hall_symbol: "B -2b",
		international: "C c = B 1 1 b = B b",
		arithmetic_crystal_class_number: 6,
		arithmetic_crystal_class_symbol: "mC"
	},
		"49": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^4",
		pointgroup_schoenflies: "m",
		international_short: "Cc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 9,
		choice: "-c2",
		international_full: "A 1 1 n",
		hall_symbol: "A -2ac",
		international: "C c = A 1 1 n",
		arithmetic_crystal_class_number: 6,
		arithmetic_crystal_class_symbol: "mC"
	},
		"50": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^4",
		pointgroup_schoenflies: "m",
		international_short: "Cc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 9,
		choice: "-c3",
		international_full: "I 1 1 a",
		hall_symbol: "I -2a",
		international: "C c = I 1 1 a",
		arithmetic_crystal_class_number: 6,
		arithmetic_crystal_class_symbol: "mC"
	},
		"51": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^4",
		pointgroup_schoenflies: "m",
		international_short: "Cc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 9,
		choice: "a1",
		international_full: "B b 1 1",
		hall_symbol: "B -2xb",
		international: "C c = B b 1 1",
		arithmetic_crystal_class_number: 6,
		arithmetic_crystal_class_symbol: "mC"
	},
		"52": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^4",
		pointgroup_schoenflies: "m",
		international_short: "Cc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 9,
		choice: "a2",
		international_full: "C n 1 1",
		hall_symbol: "C -2xbc",
		international: "C c = C n 1 1",
		arithmetic_crystal_class_number: 6,
		arithmetic_crystal_class_symbol: "mC"
	},
		"53": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^4",
		pointgroup_schoenflies: "m",
		international_short: "Cc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 9,
		choice: "a3",
		international_full: "I c 1 1",
		hall_symbol: "I -2xc",
		international: "C c = I c 1 1",
		arithmetic_crystal_class_number: 6,
		arithmetic_crystal_class_symbol: "mC"
	},
		"54": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^4",
		pointgroup_schoenflies: "m",
		international_short: "Cc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 9,
		choice: "-a1",
		international_full: "C c 1 1",
		hall_symbol: "C -2xc",
		international: "C c = C c 1 1",
		arithmetic_crystal_class_number: 6,
		arithmetic_crystal_class_symbol: "mC"
	},
		"55": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^4",
		pointgroup_schoenflies: "m",
		international_short: "Cc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 9,
		choice: "-a2",
		international_full: "B n 1 1",
		hall_symbol: "B -2xbc",
		international: "C c = B n 1 1",
		arithmetic_crystal_class_number: 6,
		arithmetic_crystal_class_symbol: "mC"
	},
		"56": {
		pointgroup_international: "Cs",
		schoenflies: "Cs^4",
		pointgroup_schoenflies: "m",
		international_short: "Cc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 9,
		choice: "-a3",
		international_full: "I b 1 1",
		hall_symbol: "I -2xb",
		international: "C c = I b 1 1",
		arithmetic_crystal_class_number: 6,
		arithmetic_crystal_class_symbol: "mC"
	},
		"57": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^1",
		pointgroup_schoenflies: "2/m",
		international_short: "P2/m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 10,
		choice: "b",
		international_full: "P 1 2/m 1",
		hall_symbol: "-P 2y",
		international: "P 2/m = P 1 2/m 1",
		arithmetic_crystal_class_number: 7,
		arithmetic_crystal_class_symbol: "2/mP"
	},
		"58": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^1",
		pointgroup_schoenflies: "2/m",
		international_short: "P2/m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 10,
		choice: "c",
		international_full: "P 1 1 2/m",
		hall_symbol: "-P 2",
		international: "P 2/m = P 1 1 2/m",
		arithmetic_crystal_class_number: 7,
		arithmetic_crystal_class_symbol: "2/mP"
	},
		"59": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^1",
		pointgroup_schoenflies: "2/m",
		international_short: "P2/m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 10,
		choice: "a",
		international_full: "P 2/m 1 1",
		hall_symbol: "-P 2x",
		international: "P 2/m = P 2/m 1 1",
		arithmetic_crystal_class_number: 7,
		arithmetic_crystal_class_symbol: "2/mP"
	},
		"60": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^2",
		pointgroup_schoenflies: "2/m",
		international_short: "P2_1/m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 11,
		choice: "b",
		international_full: "P 1 2_1/m 1",
		hall_symbol: "-P 2yb",
		international: "P 2_1/m = P 1 2_1/m 1",
		arithmetic_crystal_class_number: 7,
		arithmetic_crystal_class_symbol: "2/mP"
	},
		"61": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^2",
		pointgroup_schoenflies: "2/m",
		international_short: "P2_1/m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 11,
		choice: "c",
		international_full: "P 1 1 2_1/m",
		hall_symbol: "-P 2c",
		international: "P 2_1/m = P 1 1 2_1/m",
		arithmetic_crystal_class_number: 7,
		arithmetic_crystal_class_symbol: "2/mP"
	},
		"62": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^2",
		pointgroup_schoenflies: "2/m",
		international_short: "P2_1/m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 11,
		choice: "a",
		international_full: "P 2_1/m 1 1",
		hall_symbol: "-P 2xa",
		international: "P 2_1/m = P 2_1/m 1 1",
		arithmetic_crystal_class_number: 7,
		arithmetic_crystal_class_symbol: "2/mP"
	},
		"63": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^3",
		pointgroup_schoenflies: "2/m",
		international_short: "C2/m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 12,
		choice: "b1",
		international_full: "C 1 2/m 1",
		hall_symbol: "-C 2y",
		international: "C 2/m = C 1 2/m 1",
		arithmetic_crystal_class_number: 8,
		arithmetic_crystal_class_symbol: "2/mC"
	},
		"64": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^3",
		pointgroup_schoenflies: "2/m",
		international_short: "C2/m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 12,
		choice: "b2",
		international_full: "A 1 2/m 1",
		hall_symbol: "-A 2y",
		international: "C 2/m = A 1 2/m 1",
		arithmetic_crystal_class_number: 8,
		arithmetic_crystal_class_symbol: "2/mC"
	},
		"65": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^3",
		pointgroup_schoenflies: "2/m",
		international_short: "C2/m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 12,
		choice: "b3",
		international_full: "I 1 2/m 1",
		hall_symbol: "-I 2y",
		international: "C 2/m = I 1 2/m 1",
		arithmetic_crystal_class_number: 8,
		arithmetic_crystal_class_symbol: "2/mC"
	},
		"66": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^3",
		pointgroup_schoenflies: "2/m",
		international_short: "C2/m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 12,
		choice: "c1",
		international_full: "A 1 1 2/m",
		hall_symbol: "-A 2",
		international: "C 2/m = A 1 1 2/m",
		arithmetic_crystal_class_number: 8,
		arithmetic_crystal_class_symbol: "2/mC"
	},
		"67": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^3",
		pointgroup_schoenflies: "2/m",
		international_short: "C2/m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 12,
		choice: "c2",
		international_full: "B 1 1 2/m",
		hall_symbol: "-B 2",
		international: "C 2/m = B 1 1 2/m = B 2/m",
		arithmetic_crystal_class_number: 8,
		arithmetic_crystal_class_symbol: "2/mC"
	},
		"68": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^3",
		pointgroup_schoenflies: "2/m",
		international_short: "C2/m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 12,
		choice: "c3",
		international_full: "I 1 1 2/m",
		hall_symbol: "-I 2",
		international: "C 2/m = I 1 1 2/m",
		arithmetic_crystal_class_number: 8,
		arithmetic_crystal_class_symbol: "2/mC"
	},
		"69": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^3",
		pointgroup_schoenflies: "2/m",
		international_short: "C2/m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 12,
		choice: "a1",
		international_full: "B 2/m 1 1",
		hall_symbol: "-B 2x",
		international: "C 2/m = B 2/m 1 1",
		arithmetic_crystal_class_number: 8,
		arithmetic_crystal_class_symbol: "2/mC"
	},
		"70": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^3",
		pointgroup_schoenflies: "2/m",
		international_short: "C2/m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 12,
		choice: "a2",
		international_full: "C 2/m 1 1",
		hall_symbol: "-C 2x",
		international: "C 2/m = C 2/m 1 1",
		arithmetic_crystal_class_number: 8,
		arithmetic_crystal_class_symbol: "2/mC"
	},
		"71": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^3",
		pointgroup_schoenflies: "2/m",
		international_short: "C2/m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 12,
		choice: "a3",
		international_full: "I 2/m 1 1",
		hall_symbol: "-I 2x",
		international: "C 2/m = I 2/m 1 1",
		arithmetic_crystal_class_number: 8,
		arithmetic_crystal_class_symbol: "2/mC"
	},
		"72": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^4",
		pointgroup_schoenflies: "2/m",
		international_short: "P2/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 13,
		choice: "b1",
		international_full: "P 1 2/c 1",
		hall_symbol: "-P 2yc",
		international: "P 2/c = P 1 2/c 1",
		arithmetic_crystal_class_number: 7,
		arithmetic_crystal_class_symbol: "2/mP"
	},
		"73": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^4",
		pointgroup_schoenflies: "2/m",
		international_short: "P2/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 13,
		choice: "b2",
		international_full: "P 1 2/n 1",
		hall_symbol: "-P 2yac",
		international: "P 2/c = P 1 2/n 1",
		arithmetic_crystal_class_number: 7,
		arithmetic_crystal_class_symbol: "2/mP"
	},
		"74": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^4",
		pointgroup_schoenflies: "2/m",
		international_short: "P2/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 13,
		choice: "b3",
		international_full: "P 1 2/a 1",
		hall_symbol: "-P 2ya",
		international: "P 2/c = P 1 2/a 1",
		arithmetic_crystal_class_number: 7,
		arithmetic_crystal_class_symbol: "2/mP"
	},
		"75": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^4",
		pointgroup_schoenflies: "2/m",
		international_short: "P2/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 13,
		choice: "c1",
		international_full: "P 1 1 2/a",
		hall_symbol: "-P 2a",
		international: "P 2/c = P 1 1 2/a",
		arithmetic_crystal_class_number: 7,
		arithmetic_crystal_class_symbol: "2/mP"
	},
		"76": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^4",
		pointgroup_schoenflies: "2/m",
		international_short: "P2/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 13,
		choice: "c2",
		international_full: "P 1 1 2/n",
		hall_symbol: "-P 2ab",
		international: "P 2/c = P 1 1 2/n",
		arithmetic_crystal_class_number: 7,
		arithmetic_crystal_class_symbol: "2/mP"
	},
		"77": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^4",
		pointgroup_schoenflies: "2/m",
		international_short: "P2/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 13,
		choice: "c3",
		international_full: "P 1 1 2/b",
		hall_symbol: "-P 2b",
		international: "P 2/c = P 1 1 2/b = P 2/b",
		arithmetic_crystal_class_number: 7,
		arithmetic_crystal_class_symbol: "2/mP"
	},
		"78": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^4",
		pointgroup_schoenflies: "2/m",
		international_short: "P2/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 13,
		choice: "a1",
		international_full: "P 2/b 1 1",
		hall_symbol: "-P 2xb",
		international: "P 2/c = P 2/b 1 1",
		arithmetic_crystal_class_number: 7,
		arithmetic_crystal_class_symbol: "2/mP"
	},
		"79": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^4",
		pointgroup_schoenflies: "2/m",
		international_short: "P2/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 13,
		choice: "a2",
		international_full: "P 2/n 1 1",
		hall_symbol: "-P 2xbc",
		international: "P 2/c = P 2/n 1 1",
		arithmetic_crystal_class_number: 7,
		arithmetic_crystal_class_symbol: "2/mP"
	},
		"80": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^4",
		pointgroup_schoenflies: "2/m",
		international_short: "P2/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 13,
		choice: "a3",
		international_full: "P 2/c 1 1",
		hall_symbol: "-P 2xc",
		international: "P 2/c = P 2/c 1 1",
		arithmetic_crystal_class_number: 7,
		arithmetic_crystal_class_symbol: "2/mP"
	},
		"81": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^5",
		pointgroup_schoenflies: "2/m",
		international_short: "P2_1/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 14,
		choice: "b1",
		international_full: "P 1 2_1/c 1",
		hall_symbol: "-P 2ybc",
		international: "P 2_1/c = P 1 2_1/c 1",
		arithmetic_crystal_class_number: 7,
		arithmetic_crystal_class_symbol: "2/mP"
	},
		"82": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^5",
		pointgroup_schoenflies: "2/m",
		international_short: "P2_1/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 14,
		choice: "b2",
		international_full: "P 1 2_1/n 1",
		hall_symbol: "-P 2yn",
		international: "P 2_1/c = P 1 2_1/n 1",
		arithmetic_crystal_class_number: 7,
		arithmetic_crystal_class_symbol: "2/mP"
	},
		"83": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^5",
		pointgroup_schoenflies: "2/m",
		international_short: "P2_1/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 14,
		choice: "b3",
		international_full: "P 1 2_1/a 1",
		hall_symbol: "-P 2yab",
		international: "P 2_1/c = P 1 2_1/a 1",
		arithmetic_crystal_class_number: 7,
		arithmetic_crystal_class_symbol: "2/mP"
	},
		"84": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^5",
		pointgroup_schoenflies: "2/m",
		international_short: "P2_1/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 14,
		choice: "c1",
		international_full: "P 1 1 2_1/a",
		hall_symbol: "-P 2ac",
		international: "P 2_1/c = P 1 1 2_1/a",
		arithmetic_crystal_class_number: 7,
		arithmetic_crystal_class_symbol: "2/mP"
	},
		"85": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^5",
		pointgroup_schoenflies: "2/m",
		international_short: "P2_1/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 14,
		choice: "c2",
		international_full: "P 1 1 2_1/n",
		hall_symbol: "-P 2n",
		international: "P 2_1/c = P 1 1 2_1/n",
		arithmetic_crystal_class_number: 7,
		arithmetic_crystal_class_symbol: "2/mP"
	},
		"86": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^5",
		pointgroup_schoenflies: "2/m",
		international_short: "P2_1/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 14,
		choice: "c3",
		international_full: "P 1 1 2_1/b",
		hall_symbol: "-P 2bc",
		international: "P 2_1/c = P 1 1 2_1/b = P 2_1/b",
		arithmetic_crystal_class_number: 7,
		arithmetic_crystal_class_symbol: "2/mP"
	},
		"87": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^5",
		pointgroup_schoenflies: "2/m",
		international_short: "P2_1/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 14,
		choice: "a1",
		international_full: "P 2_1/b 1 1",
		hall_symbol: "-P 2xab",
		international: "P 2_1/c = P 2_1/b 1 1",
		arithmetic_crystal_class_number: 7,
		arithmetic_crystal_class_symbol: "2/mP"
	},
		"88": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^5",
		pointgroup_schoenflies: "2/m",
		international_short: "P2_1/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 14,
		choice: "a2",
		international_full: "P 2_1/n 1 1",
		hall_symbol: "-P 2xn",
		international: "P 2_1/c = P 2_1/n 1 1",
		arithmetic_crystal_class_number: 7,
		arithmetic_crystal_class_symbol: "2/mP"
	},
		"89": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^5",
		pointgroup_schoenflies: "2/m",
		international_short: "P2_1/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 14,
		choice: "a3",
		international_full: "P 2_1/c 1 1",
		hall_symbol: "-P 2xac",
		international: "P 2_1/c = P 2_1/c 1 1",
		arithmetic_crystal_class_number: 7,
		arithmetic_crystal_class_symbol: "2/mP"
	},
		"90": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^6",
		pointgroup_schoenflies: "2/m",
		international_short: "C2/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 15,
		choice: "b1",
		international_full: "C 1 2/c 1",
		hall_symbol: "-C 2yc",
		international: "C 2/c = C 1 2/c 1",
		arithmetic_crystal_class_number: 8,
		arithmetic_crystal_class_symbol: "2/mC"
	},
		"91": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^6",
		pointgroup_schoenflies: "2/m",
		international_short: "C2/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 15,
		choice: "b2",
		international_full: "A 1 2/n 1",
		hall_symbol: "-A 2yac",
		international: "C 2/c = A 1 2/n 1",
		arithmetic_crystal_class_number: 8,
		arithmetic_crystal_class_symbol: "2/mC"
	},
		"92": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^6",
		pointgroup_schoenflies: "2/m",
		international_short: "C2/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 15,
		choice: "b3",
		international_full: "I 1 2/a 1",
		hall_symbol: "-I 2ya",
		international: "C 2/c = I 1 2/a 1",
		arithmetic_crystal_class_number: 8,
		arithmetic_crystal_class_symbol: "2/mC"
	},
		"93": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^6",
		pointgroup_schoenflies: "2/m",
		international_short: "C2/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 15,
		choice: "-b1",
		international_full: "A 1 2/a 1",
		hall_symbol: "-A 2ya",
		international: "C 2/c = A 1 2/a 1",
		arithmetic_crystal_class_number: 8,
		arithmetic_crystal_class_symbol: "2/mC"
	},
		"94": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^6",
		pointgroup_schoenflies: "2/m",
		international_short: "C2/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 15,
		choice: "-b2",
		international_full: "C 1 2/n 1",
		hall_symbol: "-C 2ybc",
		international: "C 2/c = C 1 2/n 1",
		arithmetic_crystal_class_number: 8,
		arithmetic_crystal_class_symbol: "2/mC"
	},
		"95": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^6",
		pointgroup_schoenflies: "2/m",
		international_short: "C2/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 15,
		choice: "-b3",
		international_full: "I 1 2/c 1",
		hall_symbol: "-I 2yc",
		international: "C 2/c = I 1 2/c 1",
		arithmetic_crystal_class_number: 8,
		arithmetic_crystal_class_symbol: "2/mC"
	},
		"96": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^6",
		pointgroup_schoenflies: "2/m",
		international_short: "C2/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 15,
		choice: "c1",
		international_full: "A 1 1 2/a",
		hall_symbol: "-A 2a",
		international: "C 2/c = A 1 1 2/a",
		arithmetic_crystal_class_number: 8,
		arithmetic_crystal_class_symbol: "2/mC"
	},
		"97": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^6",
		pointgroup_schoenflies: "2/m",
		international_short: "C2/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 15,
		choice: "c2",
		international_full: "B 1 1 2/n",
		hall_symbol: "-B 2bc",
		international: "C 2/c = B 1 1 2/n",
		arithmetic_crystal_class_number: 8,
		arithmetic_crystal_class_symbol: "2/mC"
	},
		"98": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^6",
		pointgroup_schoenflies: "2/m",
		international_short: "C2/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 15,
		choice: "c3",
		international_full: "I 1 1 2/b",
		hall_symbol: "-I 2b",
		international: "C 2/c = I 1 1 2/b",
		arithmetic_crystal_class_number: 8,
		arithmetic_crystal_class_symbol: "2/mC"
	},
		"99": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^6",
		pointgroup_schoenflies: "2/m",
		international_short: "C2/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 15,
		choice: "-c1",
		international_full: "B 1 1 2/b",
		hall_symbol: "-B 2b",
		international: "C 2/c = B 1 1 2/b = B 2/b",
		arithmetic_crystal_class_number: 8,
		arithmetic_crystal_class_symbol: "2/mC"
	},
		"100": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^6",
		pointgroup_schoenflies: "2/m",
		international_short: "C2/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 15,
		choice: "-c2",
		international_full: "A 1 1 2/n",
		hall_symbol: "-A 2ac",
		international: "C 2/c = A 1 1 2/n",
		arithmetic_crystal_class_number: 8,
		arithmetic_crystal_class_symbol: "2/mC"
	},
		"101": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^6",
		pointgroup_schoenflies: "2/m",
		international_short: "C2/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 15,
		choice: "-c3",
		international_full: "I 1 1 2/a",
		hall_symbol: "-I 2a",
		international: "C 2/c = I 1 1 2/a",
		arithmetic_crystal_class_number: 8,
		arithmetic_crystal_class_symbol: "2/mC"
	},
		"102": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^6",
		pointgroup_schoenflies: "2/m",
		international_short: "C2/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 15,
		choice: "a1",
		international_full: "B 2/b 1 1",
		hall_symbol: "-B 2xb",
		international: "C 2/c = B 2/b 1 1",
		arithmetic_crystal_class_number: 8,
		arithmetic_crystal_class_symbol: "2/mC"
	},
		"103": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^6",
		pointgroup_schoenflies: "2/m",
		international_short: "C2/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 15,
		choice: "a2",
		international_full: "C 2/n 1 1",
		hall_symbol: "-C 2xbc",
		international: "C 2/c = C 2/n 1 1",
		arithmetic_crystal_class_number: 8,
		arithmetic_crystal_class_symbol: "2/mC"
	},
		"104": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^6",
		pointgroup_schoenflies: "2/m",
		international_short: "C2/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 15,
		choice: "a3",
		international_full: "I 2/c 1 1",
		hall_symbol: "-I 2xc",
		international: "C 2/c = I 2/c 1 1",
		arithmetic_crystal_class_number: 8,
		arithmetic_crystal_class_symbol: "2/mC"
	},
		"105": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^6",
		pointgroup_schoenflies: "2/m",
		international_short: "C2/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 15,
		choice: "-a1",
		international_full: "C 2/c 1 1",
		hall_symbol: "-C 2xc",
		international: "C 2/c = C 2/c 1 1",
		arithmetic_crystal_class_number: 8,
		arithmetic_crystal_class_symbol: "2/mC"
	},
		"106": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^6",
		pointgroup_schoenflies: "2/m",
		international_short: "C2/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 15,
		choice: "-a2",
		international_full: "B 2/n 1 1",
		hall_symbol: "-B 2xbc",
		international: "C 2/c = B 2/n 1 1",
		arithmetic_crystal_class_number: 8,
		arithmetic_crystal_class_symbol: "2/mC"
	},
		"107": {
		pointgroup_international: "C2h",
		schoenflies: "C2h^6",
		pointgroup_schoenflies: "2/m",
		international_short: "C2/c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 15,
		choice: "-a3",
		international_full: "I 2/b 1 1",
		hall_symbol: "-I 2xb",
		international: "C 2/c = I 2/b 1 1",
		arithmetic_crystal_class_number: 8,
		arithmetic_crystal_class_symbol: "2/mC"
	},
		"108": {
		pointgroup_international: "D2",
		schoenflies: "D2^1",
		pointgroup_schoenflies: "222",
		international_short: "P222",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 16,
		choice: "",
		international_full: "P 2 2 2",
		hall_symbol: "P 2 2",
		international: "P 2 2 2",
		arithmetic_crystal_class_number: 9,
		arithmetic_crystal_class_symbol: "222P"
	},
		"109": {
		pointgroup_international: "D2",
		schoenflies: "D2^2",
		pointgroup_schoenflies: "222",
		international_short: "P222_1",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 17,
		choice: "",
		international_full: "P 2 2 2_1",
		hall_symbol: "P 2c 2",
		international: "P 2 2 2_1",
		arithmetic_crystal_class_number: 9,
		arithmetic_crystal_class_symbol: "222P"
	},
		"110": {
		pointgroup_international: "D2",
		schoenflies: "D2^2",
		pointgroup_schoenflies: "222",
		international_short: "P2_122",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 17,
		choice: "cab",
		international_full: "P 2_1 2 2",
		hall_symbol: "P 2a 2a",
		international: "P 2_1 2 2",
		arithmetic_crystal_class_number: 9,
		arithmetic_crystal_class_symbol: "222P"
	},
		"111": {
		pointgroup_international: "D2",
		schoenflies: "D2^2",
		pointgroup_schoenflies: "222",
		international_short: "P22_12",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 17,
		choice: "bca",
		international_full: "P 2 2_1 2",
		hall_symbol: "P 2 2b",
		international: "P 2 2_1 2",
		arithmetic_crystal_class_number: 9,
		arithmetic_crystal_class_symbol: "222P"
	},
		"112": {
		pointgroup_international: "D2",
		schoenflies: "D2^3",
		pointgroup_schoenflies: "222",
		international_short: "P2_12_12",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 18,
		choice: "",
		international_full: "P 2_1 2_1 2",
		hall_symbol: "P 2 2ab",
		international: "P 2_1 2_1 2",
		arithmetic_crystal_class_number: 9,
		arithmetic_crystal_class_symbol: "222P"
	},
		"113": {
		pointgroup_international: "D2",
		schoenflies: "D2^3",
		pointgroup_schoenflies: "222",
		international_short: "P22_12_1",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 18,
		choice: "cab",
		international_full: "P 2 2_1 2_1",
		hall_symbol: "P 2bc 2",
		international: "P 2 2_1 2_1",
		arithmetic_crystal_class_number: 9,
		arithmetic_crystal_class_symbol: "222P"
	},
		"114": {
		pointgroup_international: "D2",
		schoenflies: "D2^3",
		pointgroup_schoenflies: "222",
		international_short: "P2_122_1",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 18,
		choice: "bca",
		international_full: "P 2_1 2 2_1",
		hall_symbol: "P 2ac 2ac",
		international: "P 2_1 2 2_1",
		arithmetic_crystal_class_number: 9,
		arithmetic_crystal_class_symbol: "222P"
	},
		"115": {
		pointgroup_international: "D2",
		schoenflies: "D2^4",
		pointgroup_schoenflies: "222",
		international_short: "P2_12_12_1",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 19,
		choice: "",
		international_full: "P 2_1 2_1 2_1",
		hall_symbol: "P 2ac 2ab",
		international: "P 2_1 2_1 2_1",
		arithmetic_crystal_class_number: 9,
		arithmetic_crystal_class_symbol: "222P"
	},
		"116": {
		pointgroup_international: "D2",
		schoenflies: "D2^5",
		pointgroup_schoenflies: "222",
		international_short: "C222_1",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 20,
		choice: "",
		international_full: "C 2 2 2_1",
		hall_symbol: "C 2c 2",
		international: "C 2 2 2_1",
		arithmetic_crystal_class_number: 10,
		arithmetic_crystal_class_symbol: "222C"
	},
		"117": {
		pointgroup_international: "D2",
		schoenflies: "D2^5",
		pointgroup_schoenflies: "222",
		international_short: "A2_122",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 20,
		choice: "cab",
		international_full: "A 2_1 2 2",
		hall_symbol: "A 2a 2a",
		international: "A 2_1 2 2",
		arithmetic_crystal_class_number: 10,
		arithmetic_crystal_class_symbol: "222C"
	},
		"118": {
		pointgroup_international: "D2",
		schoenflies: "D2^5",
		pointgroup_schoenflies: "222",
		international_short: "B22_12",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 20,
		choice: "bca",
		international_full: "B 2 2_1 2",
		hall_symbol: "B 2 2b",
		international: "B 2 2_1 2",
		arithmetic_crystal_class_number: 10,
		arithmetic_crystal_class_symbol: "222C"
	},
		"119": {
		pointgroup_international: "D2",
		schoenflies: "D2^6",
		pointgroup_schoenflies: "222",
		international_short: "C222",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 21,
		choice: "",
		international_full: "C 2 2 2",
		hall_symbol: "C 2 2",
		international: "C 2 2 2",
		arithmetic_crystal_class_number: 10,
		arithmetic_crystal_class_symbol: "222C"
	},
		"120": {
		pointgroup_international: "D2",
		schoenflies: "D2^6",
		pointgroup_schoenflies: "222",
		international_short: "A222",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 21,
		choice: "cab",
		international_full: "A 2 2 2",
		hall_symbol: "A 2 2",
		international: "A 2 2 2",
		arithmetic_crystal_class_number: 10,
		arithmetic_crystal_class_symbol: "222C"
	},
		"121": {
		pointgroup_international: "D2",
		schoenflies: "D2^6",
		pointgroup_schoenflies: "222",
		international_short: "B222",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 21,
		choice: "bca",
		international_full: "B 2 2 2",
		hall_symbol: "B 2 2",
		international: "B 2 2 2",
		arithmetic_crystal_class_number: 10,
		arithmetic_crystal_class_symbol: "222C"
	},
		"122": {
		pointgroup_international: "D2",
		schoenflies: "D2^7",
		pointgroup_schoenflies: "222",
		international_short: "F222",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 22,
		choice: "",
		international_full: "F 2 2 2",
		hall_symbol: "F 2 2",
		international: "F 2 2 2",
		arithmetic_crystal_class_number: 11,
		arithmetic_crystal_class_symbol: "222F"
	},
		"123": {
		pointgroup_international: "D2",
		schoenflies: "D2^8",
		pointgroup_schoenflies: "222",
		international_short: "I222",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 23,
		choice: "",
		international_full: "I 2 2 2",
		hall_symbol: "I 2 2",
		international: "I 2 2 2",
		arithmetic_crystal_class_number: 12,
		arithmetic_crystal_class_symbol: "222I"
	},
		"124": {
		pointgroup_international: "D2",
		schoenflies: "D2^9",
		pointgroup_schoenflies: "222",
		international_short: "I2_12_12_1",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 24,
		choice: "",
		international_full: "I 2_1 2_1 2_1",
		hall_symbol: "I 2b 2c",
		international: "I 2_1 2_1 2_1",
		arithmetic_crystal_class_number: 12,
		arithmetic_crystal_class_symbol: "222I"
	},
		"125": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^1",
		pointgroup_schoenflies: "mm2",
		international_short: "Pmm2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 25,
		choice: "",
		international_full: "P m m 2",
		hall_symbol: "P 2 -2",
		international: "P m m 2",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"126": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^1",
		pointgroup_schoenflies: "mm2",
		international_short: "P2mm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 25,
		choice: "cab",
		international_full: "P 2 m m",
		hall_symbol: "P -2 2",
		international: "P 2 m m",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"127": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^1",
		pointgroup_schoenflies: "mm2",
		international_short: "Pm2m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 25,
		choice: "bca",
		international_full: "P m 2 m",
		hall_symbol: "P -2 -2",
		international: "P m 2 m",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"128": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^2",
		pointgroup_schoenflies: "mm2",
		international_short: "Pmc2_1",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 26,
		choice: "",
		international_full: "P m c 2_1",
		hall_symbol: "P 2c -2",
		international: "P m c 2_1",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"129": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^2",
		pointgroup_schoenflies: "mm2",
		international_short: "Pcm2_1",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 26,
		choice: "ba-c",
		international_full: "P c m 2_1",
		hall_symbol: "P 2c -2c",
		international: "P c m 2_1",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"130": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^2",
		pointgroup_schoenflies: "mm2",
		international_short: "P2_1ma",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 26,
		choice: "cab",
		international_full: "P 2_1 m a",
		hall_symbol: "P -2a 2a",
		international: "P 2_1 m a",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"131": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^2",
		pointgroup_schoenflies: "mm2",
		international_short: "P2_1am",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 26,
		choice: "-cba",
		international_full: "P 2_1 a m",
		hall_symbol: "P -2 2a",
		international: "P 2_1 a m",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"132": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^2",
		pointgroup_schoenflies: "mm2",
		international_short: "Pb2_1m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 26,
		choice: "bca",
		international_full: "P b 2_1 m",
		hall_symbol: "P -2 -2b",
		international: "P b 2_1 m",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"133": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^2",
		pointgroup_schoenflies: "mm2",
		international_short: "Pm2_1b",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 26,
		choice: "a-cb",
		international_full: "P m 2_1 b",
		hall_symbol: "P -2b -2",
		international: "P m 2_1 b",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"134": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^3",
		pointgroup_schoenflies: "mm2",
		international_short: "Pcc2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 27,
		choice: "",
		international_full: "P c c 2",
		hall_symbol: "P 2 -2c",
		international: "P c c 2",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"135": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^3",
		pointgroup_schoenflies: "mm2",
		international_short: "P2aa",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 27,
		choice: "cab",
		international_full: "P 2 a a",
		hall_symbol: "P -2a 2",
		international: "P 2 a a",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"136": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^3",
		pointgroup_schoenflies: "mm2",
		international_short: "Pb2b",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 27,
		choice: "bca",
		international_full: "P b 2 b",
		hall_symbol: "P -2b -2b",
		international: "P b 2 b",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"137": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^4",
		pointgroup_schoenflies: "mm2",
		international_short: "Pma2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 28,
		choice: "",
		international_full: "P m a 2",
		hall_symbol: "P 2 -2a",
		international: "P m a 2",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"138": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^4",
		pointgroup_schoenflies: "mm2",
		international_short: "Pbm2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 28,
		choice: "ba-c",
		international_full: "P b m 2",
		hall_symbol: "P 2 -2b",
		international: "P b m 2",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"139": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^4",
		pointgroup_schoenflies: "mm2",
		international_short: "P2mb",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 28,
		choice: "cab",
		international_full: "P 2 m b",
		hall_symbol: "P -2b 2",
		international: "P 2 m b",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"140": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^4",
		pointgroup_schoenflies: "mm2",
		international_short: "P2cm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 28,
		choice: "-cba",
		international_full: "P 2 c m",
		hall_symbol: "P -2c 2",
		international: "P 2 c m",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"141": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^4",
		pointgroup_schoenflies: "mm2",
		international_short: "Pc2m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 28,
		choice: "bca",
		international_full: "P c 2 m",
		hall_symbol: "P -2c -2c",
		international: "P c 2 m",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"142": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^4",
		pointgroup_schoenflies: "mm2",
		international_short: "Pm2a",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 28,
		choice: "a-cb",
		international_full: "P m 2 a",
		hall_symbol: "P -2a -2a",
		international: "P m 2 a",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"143": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^5",
		pointgroup_schoenflies: "mm2",
		international_short: "Pca2_1",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 29,
		choice: "",
		international_full: "P c a 2_1",
		hall_symbol: "P 2c -2ac",
		international: "P c a 2_1",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"144": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^5",
		pointgroup_schoenflies: "mm2",
		international_short: "Pbc2_1",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 29,
		choice: "ba-c",
		international_full: "P b c 2_1",
		hall_symbol: "P 2c -2b",
		international: "P b c 2_1",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"145": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^5",
		pointgroup_schoenflies: "mm2",
		international_short: "P2_1ab",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 29,
		choice: "cab",
		international_full: "P 2_1 a b",
		hall_symbol: "P -2b 2a",
		international: "P 2_1 a b",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"146": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^5",
		pointgroup_schoenflies: "mm2",
		international_short: "P2_1ca",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 29,
		choice: "-cba",
		international_full: "P 2_1 c a",
		hall_symbol: "P -2ac 2a",
		international: "P 2_1 c a",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"147": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^5",
		pointgroup_schoenflies: "mm2",
		international_short: "Pc2_1b",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 29,
		choice: "bca",
		international_full: "P c 2_1 b",
		hall_symbol: "P -2bc -2c",
		international: "P c 2_1 b",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"148": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^5",
		pointgroup_schoenflies: "mm2",
		international_short: "Pb2_1a",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 29,
		choice: "a-cb",
		international_full: "P b 2_1 a",
		hall_symbol: "P -2a -2ab",
		international: "P b 2_1 a",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"149": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^6",
		pointgroup_schoenflies: "mm2",
		international_short: "Pnc2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 30,
		choice: "",
		international_full: "P n c 2",
		hall_symbol: "P 2 -2bc",
		international: "P n c 2",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"150": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^6",
		pointgroup_schoenflies: "mm2",
		international_short: "Pcn2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 30,
		choice: "ba-c",
		international_full: "P c n 2",
		hall_symbol: "P 2 -2ac",
		international: "P c n 2",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"151": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^6",
		pointgroup_schoenflies: "mm2",
		international_short: "P2na",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 30,
		choice: "cab",
		international_full: "P 2 n a",
		hall_symbol: "P -2ac 2",
		international: "P 2 n a",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"152": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^6",
		pointgroup_schoenflies: "mm2",
		international_short: "P2an",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 30,
		choice: "-cba",
		international_full: "P 2 a n",
		hall_symbol: "P -2ab 2",
		international: "P 2 a n",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"153": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^6",
		pointgroup_schoenflies: "mm2",
		international_short: "Pb2n",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 30,
		choice: "bca",
		international_full: "P b 2 n",
		hall_symbol: "P -2ab -2ab",
		international: "P b 2 n",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"154": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^6",
		pointgroup_schoenflies: "mm2",
		international_short: "Pn2b",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 30,
		choice: "a-cb",
		international_full: "P n 2 b",
		hall_symbol: "P -2bc -2bc",
		international: "P n 2 b",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"155": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^7",
		pointgroup_schoenflies: "mm2",
		international_short: "Pmn2_1",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 31,
		choice: "",
		international_full: "P m n 2_1",
		hall_symbol: "P 2ac -2",
		international: "P m n 2_1",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"156": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^7",
		pointgroup_schoenflies: "mm2",
		international_short: "Pnm2_1",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 31,
		choice: "ba-c",
		international_full: "P n m 2_1",
		hall_symbol: "P 2bc -2bc",
		international: "P n m 2_1",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"157": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^7",
		pointgroup_schoenflies: "mm2",
		international_short: "P2_1mn",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 31,
		choice: "cab",
		international_full: "P 2_1 m n",
		hall_symbol: "P -2ab 2ab",
		international: "P 2_1 m n",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"158": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^7",
		pointgroup_schoenflies: "mm2",
		international_short: "P2_1nm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 31,
		choice: "-cba",
		international_full: "P 2_1 n m",
		hall_symbol: "P -2 2ac",
		international: "P 2_1 n m",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"159": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^7",
		pointgroup_schoenflies: "mm2",
		international_short: "Pn2_1m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 31,
		choice: "bca",
		international_full: "P n 2_1 m",
		hall_symbol: "P -2 -2bc",
		international: "P n 2_1 m",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"160": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^7",
		pointgroup_schoenflies: "mm2",
		international_short: "Pm2_1n",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 31,
		choice: "a-cb",
		international_full: "P m 2_1 n",
		hall_symbol: "P -2ab -2",
		international: "P m 2_1 n",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"161": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^8",
		pointgroup_schoenflies: "mm2",
		international_short: "Pba2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 32,
		choice: "",
		international_full: "P b a 2",
		hall_symbol: "P 2 -2ab",
		international: "P b a 2",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"162": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^8",
		pointgroup_schoenflies: "mm2",
		international_short: "P2cb",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 32,
		choice: "cab",
		international_full: "P 2 c b",
		hall_symbol: "P -2bc 2",
		international: "P 2 c b",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"163": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^8",
		pointgroup_schoenflies: "mm2",
		international_short: "Pc2a",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 32,
		choice: "bca",
		international_full: "P c 2 a",
		hall_symbol: "P -2ac -2ac",
		international: "P c 2 a",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"164": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^9",
		pointgroup_schoenflies: "mm2",
		international_short: "Pna2_1",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 33,
		choice: "",
		international_full: "P n a 2_1",
		hall_symbol: "P 2c -2n",
		international: "P n a 2_1",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"165": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^9",
		pointgroup_schoenflies: "mm2",
		international_short: "Pbn2_1",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 33,
		choice: "ba-c",
		international_full: "P b n 2_1",
		hall_symbol: "P 2c -2ab",
		international: "P b n 2_1",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"166": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^9",
		pointgroup_schoenflies: "mm2",
		international_short: "P2_1nb",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 33,
		choice: "cab",
		international_full: "P 2_1 n b",
		hall_symbol: "P -2bc 2a",
		international: "P 2_1 n b",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"167": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^9",
		pointgroup_schoenflies: "mm2",
		international_short: "P2_1cn",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 33,
		choice: "-cba",
		international_full: "P 2_1 c n",
		hall_symbol: "P -2n 2a",
		international: "P 2_1 c n",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"168": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^9",
		pointgroup_schoenflies: "mm2",
		international_short: "Pc2_1n",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 33,
		choice: "bca",
		international_full: "P c 2_1 n",
		hall_symbol: "P -2n -2ac",
		international: "P c 2_1 n",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"169": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^9",
		pointgroup_schoenflies: "mm2",
		international_short: "Pn2_1a",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 33,
		choice: "a-cb",
		international_full: "P n 2_1 a",
		hall_symbol: "P -2ac -2n",
		international: "P n 2_1 a",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"170": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^10",
		pointgroup_schoenflies: "mm2",
		international_short: "Pnn2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 34,
		choice: "",
		international_full: "P n n 2",
		hall_symbol: "P 2 -2n",
		international: "P n n 2",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"171": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^10",
		pointgroup_schoenflies: "mm2",
		international_short: "P2nn",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 34,
		choice: "cab",
		international_full: "P 2 n n",
		hall_symbol: "P -2n 2",
		international: "P 2 n n",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"172": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^10",
		pointgroup_schoenflies: "mm2",
		international_short: "Pn2n",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 34,
		choice: "bca",
		international_full: "P n 2 n",
		hall_symbol: "P -2n -2n",
		international: "P n 2 n",
		arithmetic_crystal_class_number: 13,
		arithmetic_crystal_class_symbol: "mm2P"
	},
		"173": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^11",
		pointgroup_schoenflies: "mm2",
		international_short: "Cmm2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 35,
		choice: "",
		international_full: "C m m 2",
		hall_symbol: "C 2 -2",
		international: "C m m 2",
		arithmetic_crystal_class_number: 14,
		arithmetic_crystal_class_symbol: "mm2C"
	},
		"174": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^11",
		pointgroup_schoenflies: "mm2",
		international_short: "A2mm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 35,
		choice: "cab",
		international_full: "A 2 m m",
		hall_symbol: "A -2 2",
		international: "A 2 m m",
		arithmetic_crystal_class_number: 14,
		arithmetic_crystal_class_symbol: "mm2C"
	},
		"175": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^11",
		pointgroup_schoenflies: "mm2",
		international_short: "Bm2m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 35,
		choice: "bca",
		international_full: "B m 2 m",
		hall_symbol: "B -2 -2",
		international: "B m 2 m",
		arithmetic_crystal_class_number: 14,
		arithmetic_crystal_class_symbol: "mm2C"
	},
		"176": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^12",
		pointgroup_schoenflies: "mm2",
		international_short: "Cmc2_1",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 36,
		choice: "",
		international_full: "C m c 2_1",
		hall_symbol: "C 2c -2",
		international: "C m c 2_1",
		arithmetic_crystal_class_number: 14,
		arithmetic_crystal_class_symbol: "mm2C"
	},
		"177": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^12",
		pointgroup_schoenflies: "mm2",
		international_short: "Ccm2_1",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 36,
		choice: "ba-c",
		international_full: "C c m 2_1",
		hall_symbol: "C 2c -2c",
		international: "C c m 2_1",
		arithmetic_crystal_class_number: 14,
		arithmetic_crystal_class_symbol: "mm2C"
	},
		"178": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^12",
		pointgroup_schoenflies: "mm2",
		international_short: "A2_1ma",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 36,
		choice: "cab",
		international_full: "A 2_1 m a",
		hall_symbol: "A -2a 2a",
		international: "A 2_1 m a",
		arithmetic_crystal_class_number: 14,
		arithmetic_crystal_class_symbol: "mm2C"
	},
		"179": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^12",
		pointgroup_schoenflies: "mm2",
		international_short: "A2_1am",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 36,
		choice: "-cba",
		international_full: "A 2_1 a m",
		hall_symbol: "A -2 2a",
		international: "A 2_1 a m",
		arithmetic_crystal_class_number: 14,
		arithmetic_crystal_class_symbol: "mm2C"
	},
		"180": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^12",
		pointgroup_schoenflies: "mm2",
		international_short: "Bb2_1m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 36,
		choice: "bca",
		international_full: "B b 2_1 m",
		hall_symbol: "B -2 -2b",
		international: "B b 2_1 m",
		arithmetic_crystal_class_number: 14,
		arithmetic_crystal_class_symbol: "mm2C"
	},
		"181": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^12",
		pointgroup_schoenflies: "mm2",
		international_short: "Bm2_1b",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 36,
		choice: "a-cb",
		international_full: "B m 2_1 b",
		hall_symbol: "B -2b -2",
		international: "B m 2_1 b",
		arithmetic_crystal_class_number: 14,
		arithmetic_crystal_class_symbol: "mm2C"
	},
		"182": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^13",
		pointgroup_schoenflies: "mm2",
		international_short: "Ccc2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 37,
		choice: "",
		international_full: "C c c 2",
		hall_symbol: "C 2 -2c",
		international: "C c c 2",
		arithmetic_crystal_class_number: 14,
		arithmetic_crystal_class_symbol: "mm2C"
	},
		"183": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^13",
		pointgroup_schoenflies: "mm2",
		international_short: "A2aa",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 37,
		choice: "cab",
		international_full: "A 2 a a",
		hall_symbol: "A -2a 2",
		international: "A 2 a a",
		arithmetic_crystal_class_number: 14,
		arithmetic_crystal_class_symbol: "mm2C"
	},
		"184": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^13",
		pointgroup_schoenflies: "mm2",
		international_short: "Bb2b",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 37,
		choice: "bca",
		international_full: "B b 2 b",
		hall_symbol: "B -2b -2b",
		international: "B b 2 b",
		arithmetic_crystal_class_number: 14,
		arithmetic_crystal_class_symbol: "mm2C"
	},
		"185": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^14",
		pointgroup_schoenflies: "mm2",
		international_short: "Amm2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 38,
		choice: "",
		international_full: "A m m 2",
		hall_symbol: "A 2 -2",
		international: "A m m 2",
		arithmetic_crystal_class_number: 15,
		arithmetic_crystal_class_symbol: "2mmC"
	},
		"186": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^14",
		pointgroup_schoenflies: "mm2",
		international_short: "Bmm2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 38,
		choice: "ba-c",
		international_full: "B m m 2",
		hall_symbol: "B 2 -2",
		international: "B m m 2",
		arithmetic_crystal_class_number: 15,
		arithmetic_crystal_class_symbol: "2mmC"
	},
		"187": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^14",
		pointgroup_schoenflies: "mm2",
		international_short: "B2mm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 38,
		choice: "cab",
		international_full: "B 2 m m",
		hall_symbol: "B -2 2",
		international: "B 2 m m",
		arithmetic_crystal_class_number: 15,
		arithmetic_crystal_class_symbol: "2mmC"
	},
		"188": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^14",
		pointgroup_schoenflies: "mm2",
		international_short: "C2mm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 38,
		choice: "-cba",
		international_full: "C 2 m m",
		hall_symbol: "C -2 2",
		international: "C 2 m m",
		arithmetic_crystal_class_number: 15,
		arithmetic_crystal_class_symbol: "2mmC"
	},
		"189": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^14",
		pointgroup_schoenflies: "mm2",
		international_short: "Cm2m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 38,
		choice: "bca",
		international_full: "C m 2 m",
		hall_symbol: "C -2 -2",
		international: "C m 2 m",
		arithmetic_crystal_class_number: 15,
		arithmetic_crystal_class_symbol: "2mmC"
	},
		"190": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^14",
		pointgroup_schoenflies: "mm2",
		international_short: "Am2m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 38,
		choice: "a-cb",
		international_full: "A m 2 m",
		hall_symbol: "A -2 -2",
		international: "A m 2 m",
		arithmetic_crystal_class_number: 15,
		arithmetic_crystal_class_symbol: "2mmC"
	},
		"191": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^15",
		pointgroup_schoenflies: "mm2",
		international_short: "Aem2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 39,
		choice: "",
		international_full: "A e m 2",
		hall_symbol: "A 2 -2c",
		international: "A e m 2",
		arithmetic_crystal_class_number: 15,
		arithmetic_crystal_class_symbol: "2mmC"
	},
		"192": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^15",
		pointgroup_schoenflies: "mm2",
		international_short: "Bme2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 39,
		choice: "ba-c",
		international_full: "B m e 2",
		hall_symbol: "B 2 -2c",
		international: "B m e 2",
		arithmetic_crystal_class_number: 15,
		arithmetic_crystal_class_symbol: "2mmC"
	},
		"193": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^15",
		pointgroup_schoenflies: "mm2",
		international_short: "B2em",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 39,
		choice: "cab",
		international_full: "B 2 e m",
		hall_symbol: "B -2c 2",
		international: "B 2 e m",
		arithmetic_crystal_class_number: 15,
		arithmetic_crystal_class_symbol: "2mmC"
	},
		"194": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^15",
		pointgroup_schoenflies: "mm2",
		international_short: "C2me",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 39,
		choice: "-cba",
		international_full: "C 2 m e",
		hall_symbol: "C -2b 2",
		international: "C 2 m e",
		arithmetic_crystal_class_number: 15,
		arithmetic_crystal_class_symbol: "2mmC"
	},
		"195": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^15",
		pointgroup_schoenflies: "mm2",
		international_short: "Cm2e",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 39,
		choice: "bca",
		international_full: "C m 2 e",
		hall_symbol: "C -2b -2b",
		international: "C m 2 e",
		arithmetic_crystal_class_number: 15,
		arithmetic_crystal_class_symbol: "2mmC"
	},
		"196": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^15",
		pointgroup_schoenflies: "mm2",
		international_short: "Ae2m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 39,
		choice: "a-cb",
		international_full: "A e 2 m",
		hall_symbol: "A -2c -2c",
		international: "A e 2 m",
		arithmetic_crystal_class_number: 15,
		arithmetic_crystal_class_symbol: "2mmC"
	},
		"197": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^16",
		pointgroup_schoenflies: "mm2",
		international_short: "Ama2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 40,
		choice: "",
		international_full: "A m a 2",
		hall_symbol: "A 2 -2a",
		international: "A m a 2",
		arithmetic_crystal_class_number: 15,
		arithmetic_crystal_class_symbol: "2mmC"
	},
		"198": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^16",
		pointgroup_schoenflies: "mm2",
		international_short: "Bbm2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 40,
		choice: "ba-c",
		international_full: "B b m 2",
		hall_symbol: "B 2 -2b",
		international: "B b m 2",
		arithmetic_crystal_class_number: 15,
		arithmetic_crystal_class_symbol: "2mmC"
	},
		"199": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^16",
		pointgroup_schoenflies: "mm2",
		international_short: "B2mb",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 40,
		choice: "cab",
		international_full: "B 2 m b",
		hall_symbol: "B -2b 2",
		international: "B 2 m b",
		arithmetic_crystal_class_number: 15,
		arithmetic_crystal_class_symbol: "2mmC"
	},
		"200": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^16",
		pointgroup_schoenflies: "mm2",
		international_short: "C2cm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 40,
		choice: "-cba",
		international_full: "C 2 c m",
		hall_symbol: "C -2c 2",
		international: "C 2 c m",
		arithmetic_crystal_class_number: 15,
		arithmetic_crystal_class_symbol: "2mmC"
	},
		"201": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^16",
		pointgroup_schoenflies: "mm2",
		international_short: "Cc2m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 40,
		choice: "bca",
		international_full: "C c 2 m",
		hall_symbol: "C -2c -2c",
		international: "C c 2 m",
		arithmetic_crystal_class_number: 15,
		arithmetic_crystal_class_symbol: "2mmC"
	},
		"202": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^16",
		pointgroup_schoenflies: "mm2",
		international_short: "Am2a",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 40,
		choice: "a-cb",
		international_full: "A m 2 a",
		hall_symbol: "A -2a -2a",
		international: "A m 2 a",
		arithmetic_crystal_class_number: 15,
		arithmetic_crystal_class_symbol: "2mmC"
	},
		"203": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^17",
		pointgroup_schoenflies: "mm2",
		international_short: "Aea2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 41,
		choice: "",
		international_full: "A e a 2",
		hall_symbol: "A 2 -2ac",
		international: "A e a 2",
		arithmetic_crystal_class_number: 15,
		arithmetic_crystal_class_symbol: "2mmC"
	},
		"204": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^17",
		pointgroup_schoenflies: "mm2",
		international_short: "Bbe2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 41,
		choice: "ba-c",
		international_full: "B b e 2",
		hall_symbol: "B 2 -2bc",
		international: "B b e 2",
		arithmetic_crystal_class_number: 15,
		arithmetic_crystal_class_symbol: "2mmC"
	},
		"205": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^17",
		pointgroup_schoenflies: "mm2",
		international_short: "B2eb",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 41,
		choice: "cab",
		international_full: "B 2 e b",
		hall_symbol: "B -2bc 2",
		international: "B 2 e b",
		arithmetic_crystal_class_number: 15,
		arithmetic_crystal_class_symbol: "2mmC"
	},
		"206": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^17",
		pointgroup_schoenflies: "mm2",
		international_short: "C2ce",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 41,
		choice: "-cba",
		international_full: "C 2 c e",
		hall_symbol: "C -2bc 2",
		international: "C 2 c e",
		arithmetic_crystal_class_number: 15,
		arithmetic_crystal_class_symbol: "2mmC"
	},
		"207": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^17",
		pointgroup_schoenflies: "mm2",
		international_short: "Cc2e",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 41,
		choice: "bca",
		international_full: "C c 2 e",
		hall_symbol: "C -2bc -2bc",
		international: "C c 2 e",
		arithmetic_crystal_class_number: 15,
		arithmetic_crystal_class_symbol: "2mmC"
	},
		"208": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^17",
		pointgroup_schoenflies: "mm2",
		international_short: "Ae2a",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 41,
		choice: "a-cb",
		international_full: "A e 2 a",
		hall_symbol: "A -2ac -2ac",
		international: "A e 2 a",
		arithmetic_crystal_class_number: 15,
		arithmetic_crystal_class_symbol: "2mmC"
	},
		"209": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^18",
		pointgroup_schoenflies: "mm2",
		international_short: "Fmm2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 42,
		choice: "",
		international_full: "F m m 2",
		hall_symbol: "F 2 -2",
		international: "F m m 2",
		arithmetic_crystal_class_number: 16,
		arithmetic_crystal_class_symbol: "mm2F"
	},
		"210": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^18",
		pointgroup_schoenflies: "mm2",
		international_short: "F2mm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 42,
		choice: "cab",
		international_full: "F 2 m m",
		hall_symbol: "F -2 2",
		international: "F 2 m m",
		arithmetic_crystal_class_number: 16,
		arithmetic_crystal_class_symbol: "mm2F"
	},
		"211": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^18",
		pointgroup_schoenflies: "mm2",
		international_short: "Fm2m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 42,
		choice: "bca",
		international_full: "F m 2 m",
		hall_symbol: "F -2 -2",
		international: "F m 2 m",
		arithmetic_crystal_class_number: 16,
		arithmetic_crystal_class_symbol: "mm2F"
	},
		"212": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^19",
		pointgroup_schoenflies: "mm2",
		international_short: "Fdd2",
		translations: [
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.75,
				0.75,
				0.25
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 43,
		choice: "",
		international_full: "F d d 2",
		hall_symbol: "F 2 -2d",
		international: "F d d 2",
		arithmetic_crystal_class_number: 16,
		arithmetic_crystal_class_symbol: "mm2F"
	},
		"213": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^19",
		pointgroup_schoenflies: "mm2",
		international_short: "F2dd",
		translations: [
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.25,
				0.75
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 43,
		choice: "cab",
		international_full: "F 2 d d",
		hall_symbol: "F -2d 2",
		international: "F 2 d d",
		arithmetic_crystal_class_number: 16,
		arithmetic_crystal_class_symbol: "mm2F"
	},
		"214": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^19",
		pointgroup_schoenflies: "mm2",
		international_short: "Fd2d",
		translations: [
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 43,
		choice: "bca",
		international_full: "F d 2 d",
		hall_symbol: "F -2d -2d",
		international: "F d 2 d",
		arithmetic_crystal_class_number: 16,
		arithmetic_crystal_class_symbol: "mm2F"
	},
		"215": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^20",
		pointgroup_schoenflies: "mm2",
		international_short: "Imm2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 44,
		choice: "",
		international_full: "I m m 2",
		hall_symbol: "I 2 -2",
		international: "I m m 2",
		arithmetic_crystal_class_number: 17,
		arithmetic_crystal_class_symbol: "mm2I"
	},
		"216": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^20",
		pointgroup_schoenflies: "mm2",
		international_short: "I2mm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 44,
		choice: "cab",
		international_full: "I 2 m m",
		hall_symbol: "I -2 2",
		international: "I 2 m m",
		arithmetic_crystal_class_number: 17,
		arithmetic_crystal_class_symbol: "mm2I"
	},
		"217": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^20",
		pointgroup_schoenflies: "mm2",
		international_short: "Im2m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 44,
		choice: "bca",
		international_full: "I m 2 m",
		hall_symbol: "I -2 -2",
		international: "I m 2 m",
		arithmetic_crystal_class_number: 17,
		arithmetic_crystal_class_symbol: "mm2I"
	},
		"218": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^21",
		pointgroup_schoenflies: "mm2",
		international_short: "Iba2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 45,
		choice: "",
		international_full: "I b a 2",
		hall_symbol: "I 2 -2c",
		international: "I b a 2",
		arithmetic_crystal_class_number: 17,
		arithmetic_crystal_class_symbol: "mm2I"
	},
		"219": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^21",
		pointgroup_schoenflies: "mm2",
		international_short: "I2cb",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 45,
		choice: "cab",
		international_full: "I 2 c b",
		hall_symbol: "I -2a 2",
		international: "I 2 c b",
		arithmetic_crystal_class_number: 17,
		arithmetic_crystal_class_symbol: "mm2I"
	},
		"220": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^21",
		pointgroup_schoenflies: "mm2",
		international_short: "Ic2a",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 45,
		choice: "bca",
		international_full: "I c 2 a",
		hall_symbol: "I -2b -2b",
		international: "I c 2 a",
		arithmetic_crystal_class_number: 17,
		arithmetic_crystal_class_symbol: "mm2I"
	},
		"221": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^22",
		pointgroup_schoenflies: "mm2",
		international_short: "Ima2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 46,
		choice: "",
		international_full: "I m a 2",
		hall_symbol: "I 2 -2a",
		international: "I m a 2",
		arithmetic_crystal_class_number: 17,
		arithmetic_crystal_class_symbol: "mm2I"
	},
		"222": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^22",
		pointgroup_schoenflies: "mm2",
		international_short: "Ibm2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 46,
		choice: "ba-c",
		international_full: "I b m 2",
		hall_symbol: "I 2 -2b",
		international: "I b m 2",
		arithmetic_crystal_class_number: 17,
		arithmetic_crystal_class_symbol: "mm2I"
	},
		"223": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^22",
		pointgroup_schoenflies: "mm2",
		international_short: "I2mb",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 46,
		choice: "cab",
		international_full: "I 2 m b",
		hall_symbol: "I -2b 2",
		international: "I 2 m b",
		arithmetic_crystal_class_number: 17,
		arithmetic_crystal_class_symbol: "mm2I"
	},
		"224": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^22",
		pointgroup_schoenflies: "mm2",
		international_short: "I2cm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 46,
		choice: "-cba",
		international_full: "I 2 c m",
		hall_symbol: "I -2c 2",
		international: "I 2 c m",
		arithmetic_crystal_class_number: 17,
		arithmetic_crystal_class_symbol: "mm2I"
	},
		"225": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^22",
		pointgroup_schoenflies: "mm2",
		international_short: "Ic2m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 46,
		choice: "bca",
		international_full: "I c 2 m",
		hall_symbol: "I -2c -2c",
		international: "I c 2 m",
		arithmetic_crystal_class_number: 17,
		arithmetic_crystal_class_symbol: "mm2I"
	},
		"226": {
		pointgroup_international: "C2v",
		schoenflies: "C2v^22",
		pointgroup_schoenflies: "mm2",
		international_short: "Im2a",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 46,
		choice: "a-cb",
		international_full: "I m 2 a",
		hall_symbol: "I -2a -2a",
		international: "I m 2 a",
		arithmetic_crystal_class_number: 17,
		arithmetic_crystal_class_symbol: "mm2I"
	},
		"227": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^1",
		pointgroup_schoenflies: "mmm",
		international_short: "Pmmm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 47,
		choice: "",
		international_full: "P 2/m 2/m 2/m",
		hall_symbol: "-P 2 2",
		international: "P m m m",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"228": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^2",
		pointgroup_schoenflies: "mmm",
		international_short: "Pnnn",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 48,
		choice: "1",
		international_full: "P 2/n 2/n 2/n",
		hall_symbol: "P 2 2 -1n",
		international: "P n n n",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"229": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^2",
		pointgroup_schoenflies: "mmm",
		international_short: "Pnnn",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 48,
		choice: "2",
		international_full: "P 2/n 2/n 2/n",
		hall_symbol: "-P 2ab 2bc",
		international: "P n n n",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"230": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^3",
		pointgroup_schoenflies: "mmm",
		international_short: "Pccm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 49,
		choice: "",
		international_full: "P 2/c 2/c 2/m",
		hall_symbol: "-P 2 2c",
		international: "P c c m",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"231": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^3",
		pointgroup_schoenflies: "mmm",
		international_short: "Pmaa",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 49,
		choice: "cab",
		international_full: "P 2/m 2/a 2/a",
		hall_symbol: "-P 2a 2",
		international: "P m a a",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"232": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^3",
		pointgroup_schoenflies: "mmm",
		international_short: "Pbmb",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 49,
		choice: "bca",
		international_full: "P 2/b 2/m 2/b",
		hall_symbol: "-P 2b 2b",
		international: "P b m b",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"233": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^4",
		pointgroup_schoenflies: "mmm",
		international_short: "Pban",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 50,
		choice: "1",
		international_full: "P 2/b 2/a 2/n",
		hall_symbol: "P 2 2 -1ab",
		international: "P b a n",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"234": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^4",
		pointgroup_schoenflies: "mmm",
		international_short: "Pban",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 50,
		choice: "2",
		international_full: "P 2/b 2/a 2/n",
		hall_symbol: "-P 2ab 2b",
		international: "P b a n",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"235": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^4",
		pointgroup_schoenflies: "mmm",
		international_short: "Pncb",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 50,
		choice: "1cab",
		international_full: "P 2/n 2/c 2/b",
		hall_symbol: "P 2 2 -1bc",
		international: "P n c b",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"236": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^4",
		pointgroup_schoenflies: "mmm",
		international_short: "Pncb",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 50,
		choice: "2cab",
		international_full: "P 2/n 2/c 2/b",
		hall_symbol: "-P 2b 2bc",
		international: "P n c b",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"237": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^4",
		pointgroup_schoenflies: "mmm",
		international_short: "Pcna",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 50,
		choice: "1bca",
		international_full: "P 2/c 2/n 2/a",
		hall_symbol: "P 2 2 -1ac",
		international: "P c n a",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"238": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^4",
		pointgroup_schoenflies: "mmm",
		international_short: "Pcna",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 50,
		choice: "2bca",
		international_full: "P 2/c 2/n 2/a",
		hall_symbol: "-P 2a 2c",
		international: "P c n a",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"239": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^5",
		pointgroup_schoenflies: "mmm",
		international_short: "Pmma",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 51,
		choice: "",
		international_full: "P 2_1/m 2/m 2/a",
		hall_symbol: "-P 2a 2a",
		international: "P m m a",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"240": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^5",
		pointgroup_schoenflies: "mmm",
		international_short: "Pmmb",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 51,
		choice: "ba-c",
		international_full: "P 2/m 2_1/m 2/b",
		hall_symbol: "-P 2b 2",
		international: "P m m b",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"241": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^5",
		pointgroup_schoenflies: "mmm",
		international_short: "Pbmm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 51,
		choice: "cab",
		international_full: "P 2/b 2_1/m 2/m",
		hall_symbol: "-P 2 2b",
		international: "P b m m",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"242": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^5",
		pointgroup_schoenflies: "mmm",
		international_short: "Pcmm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 51,
		choice: "-cba",
		international_full: "P 2/c 2/m 2_1/m",
		hall_symbol: "-P 2c 2c",
		international: "P c m m",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"243": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^5",
		pointgroup_schoenflies: "mmm",
		international_short: "Pmcm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 51,
		choice: "bca",
		international_full: "P 2/m 2/c 2_1/m",
		hall_symbol: "-P 2c 2",
		international: "P m c m",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"244": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^5",
		pointgroup_schoenflies: "mmm",
		international_short: "Pmam",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 51,
		choice: "a-cb",
		international_full: "P 2_1/m 2/a 2/m",
		hall_symbol: "-P 2 2a",
		international: "P m a m",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"245": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^6",
		pointgroup_schoenflies: "mmm",
		international_short: "Pnna",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 52,
		choice: "",
		international_full: "P 2/n 2_1/n 2/a",
		hall_symbol: "-P 2a 2bc",
		international: "P n n a",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"246": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^6",
		pointgroup_schoenflies: "mmm",
		international_short: "Pnnb",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 52,
		choice: "ba-c",
		international_full: "P 2_1/n 2/n 2/b",
		hall_symbol: "-P 2b 2n",
		international: "P n n b",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"247": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^6",
		pointgroup_schoenflies: "mmm",
		international_short: "Pbnn",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 52,
		choice: "cab",
		international_full: "P 2/b 2/n 2_1/n",
		hall_symbol: "-P 2n 2b",
		international: "P b n n",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"248": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^6",
		pointgroup_schoenflies: "mmm",
		international_short: "Pcnn",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 52,
		choice: "-cba",
		international_full: "P 2/c 2_1/n 2/n",
		hall_symbol: "-P 2ab 2c",
		international: "P c n n",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"249": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^6",
		pointgroup_schoenflies: "mmm",
		international_short: "Pncn",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 52,
		choice: "bca",
		international_full: "P 2_1/n 2/c 2/n",
		hall_symbol: "-P 2ab 2n",
		international: "P n c n",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"250": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^6",
		pointgroup_schoenflies: "mmm",
		international_short: "Pnan",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 52,
		choice: "a-cb",
		international_full: "P 2/n 2/a 2_1/n",
		hall_symbol: "-P 2n 2bc",
		international: "P n a n",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"251": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^7",
		pointgroup_schoenflies: "mmm",
		international_short: "Pmna",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 53,
		choice: "",
		international_full: "P 2/m 2/n 2_1/a",
		hall_symbol: "-P 2ac 2",
		international: "P m n a",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"252": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^7",
		pointgroup_schoenflies: "mmm",
		international_short: "Pnmb",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 53,
		choice: "ba-c",
		international_full: "P 2/n 2/m 2_1/b",
		hall_symbol: "-P 2bc 2bc",
		international: "P n m b",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"253": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^7",
		pointgroup_schoenflies: "mmm",
		international_short: "Pbmn",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 53,
		choice: "cab",
		international_full: "P 2_1/b 2/m 2/n",
		hall_symbol: "-P 2ab 2ab",
		international: "P b m n",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"254": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^7",
		pointgroup_schoenflies: "mmm",
		international_short: "Pcnm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 53,
		choice: "-cba",
		international_full: "P 2_1/c 2/n 2/m",
		hall_symbol: "-P 2 2ac",
		international: "P c n m",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"255": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^7",
		pointgroup_schoenflies: "mmm",
		international_short: "Pncm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 53,
		choice: "bca",
		international_full: "P 2/n 2_1/c 2/m",
		hall_symbol: "-P 2 2bc",
		international: "P n c m",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"256": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^7",
		pointgroup_schoenflies: "mmm",
		international_short: "Pman",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 53,
		choice: "a-cb",
		international_full: "P 2/m 2_1/a 2/n",
		hall_symbol: "-P 2ab 2",
		international: "P m a n",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"257": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^8",
		pointgroup_schoenflies: "mmm",
		international_short: "Pcca",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 54,
		choice: "",
		international_full: "P 2_1/c 2/c 2/a",
		hall_symbol: "-P 2a 2ac",
		international: "P c c a",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"258": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^8",
		pointgroup_schoenflies: "mmm",
		international_short: "Pccb",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 54,
		choice: "ba-c",
		international_full: "P 2/c 2_1/c 2/b",
		hall_symbol: "-P 2b 2c",
		international: "P c c b",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"259": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^8",
		pointgroup_schoenflies: "mmm",
		international_short: "Pbaa",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 54,
		choice: "cab",
		international_full: "P 2/b 2_1/a 2/a",
		hall_symbol: "-P 2a 2b",
		international: "P b a a",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"260": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^8",
		pointgroup_schoenflies: "mmm",
		international_short: "Pcaa",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 54,
		choice: "-cba",
		international_full: "P 2/c 2/a 2_1/a",
		hall_symbol: "-P 2ac 2c",
		international: "P c a a",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"261": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^8",
		pointgroup_schoenflies: "mmm",
		international_short: "Pbcb",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 54,
		choice: "bca",
		international_full: "P 2/b 2/c 2_1/b",
		hall_symbol: "-P 2bc 2b",
		international: "P b c b",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"262": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^8",
		pointgroup_schoenflies: "mmm",
		international_short: "Pbab",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 54,
		choice: "a-cb",
		international_full: "P 2_1/b 2/a 2/b",
		hall_symbol: "-P 2b 2ab",
		international: "P b a b",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"263": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^9",
		pointgroup_schoenflies: "mmm",
		international_short: "Pbam",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 55,
		choice: "",
		international_full: "P 2_1/b 2_1/a 2/m",
		hall_symbol: "-P 2 2ab",
		international: "P b a m",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"264": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^9",
		pointgroup_schoenflies: "mmm",
		international_short: "Pmcb",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 55,
		choice: "cab",
		international_full: "P 2/m 2_1/c 2_1/b",
		hall_symbol: "-P 2bc 2",
		international: "P m c b",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"265": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^9",
		pointgroup_schoenflies: "mmm",
		international_short: "Pcma",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 55,
		choice: "bca",
		international_full: "P 2_1/c 2/m 2_1/a",
		hall_symbol: "-P 2ac 2ac",
		international: "P c m a",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"266": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^10",
		pointgroup_schoenflies: "mmm",
		international_short: "Pccn",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 56,
		choice: "",
		international_full: "P 2_1/c 2_1/c 2/n",
		hall_symbol: "-P 2ab 2ac",
		international: "P c c n",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"267": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^10",
		pointgroup_schoenflies: "mmm",
		international_short: "Pnaa",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 56,
		choice: "cab",
		international_full: "P 2/n 2_1/a 2_1/a",
		hall_symbol: "-P 2ac 2bc",
		international: "P n a a",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"268": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^10",
		pointgroup_schoenflies: "mmm",
		international_short: "Pbnb",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 56,
		choice: "bca",
		international_full: "P 2_1/b 2/n 2_1/b",
		hall_symbol: "-P 2bc 2ab",
		international: "P b n b",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"269": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^11",
		pointgroup_schoenflies: "mmm",
		international_short: "Pbcm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 57,
		choice: "",
		international_full: "P 2/b 2_1/c 2_1/m",
		hall_symbol: "-P 2c 2b",
		international: "P b c m",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"270": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^11",
		pointgroup_schoenflies: "mmm",
		international_short: "Pcam",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 57,
		choice: "ba-c",
		international_full: "P 2_1/c 2/a 2_1/m",
		hall_symbol: "-P 2c 2ac",
		international: "P c a m",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"271": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^11",
		pointgroup_schoenflies: "mmm",
		international_short: "Pmca",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 57,
		choice: "cab",
		international_full: "P 2_1/m 2/c 2_1/a",
		hall_symbol: "-P 2ac 2a",
		international: "P m c a",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"272": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^11",
		pointgroup_schoenflies: "mmm",
		international_short: "Pmab",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 57,
		choice: "-cba",
		international_full: "P 2_1/m 2_1/a 2/b",
		hall_symbol: "-P 2b 2a",
		international: "P m a b",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"273": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^11",
		pointgroup_schoenflies: "mmm",
		international_short: "Pbma",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 57,
		choice: "bca",
		international_full: "P 2_1/b 2_1/m 2/a",
		hall_symbol: "-P 2a 2ab",
		international: "P b m a",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"274": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^11",
		pointgroup_schoenflies: "mmm",
		international_short: "Pcmb",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 57,
		choice: "a-cb",
		international_full: "P 2/c 2_1/m 2_1/b",
		hall_symbol: "-P 2bc 2c",
		international: "P c m b",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"275": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^12",
		pointgroup_schoenflies: "mmm",
		international_short: "Pnnm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 58,
		choice: "",
		international_full: "P 2_1/n 2_1/n 2/m",
		hall_symbol: "-P 2 2n",
		international: "P n n m",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"276": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^12",
		pointgroup_schoenflies: "mmm",
		international_short: "Pmnn",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 58,
		choice: "cab",
		international_full: "P 2/m 2_1/n 2_1/n",
		hall_symbol: "-P 2n 2",
		international: "P m n n",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"277": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^12",
		pointgroup_schoenflies: "mmm",
		international_short: "Pnmn",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 58,
		choice: "bca",
		international_full: "P 2_1/n 2/m 2_1/n",
		hall_symbol: "-P 2n 2n",
		international: "P n m n",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"278": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^13",
		pointgroup_schoenflies: "mmm",
		international_short: "Pmmn",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 59,
		choice: "1",
		international_full: "P 2_1/m 2_1/m 2/n",
		hall_symbol: "P 2 2ab -1ab",
		international: "P m m n",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"279": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^13",
		pointgroup_schoenflies: "mmm",
		international_short: "Pmmn",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 59,
		choice: "2",
		international_full: "P 2_1/m 2_1/m 2/n",
		hall_symbol: "-P 2ab 2a",
		international: "P m m n",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"280": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^13",
		pointgroup_schoenflies: "mmm",
		international_short: "Pnmm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 59,
		choice: "1cab",
		international_full: "P 2/n 2_1/m 2_1/m",
		hall_symbol: "P 2bc 2 -1bc",
		international: "P n m m",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"281": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^13",
		pointgroup_schoenflies: "mmm",
		international_short: "Pnmm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 59,
		choice: "2cab",
		international_full: "P 2/n 2_1/m 2_1/m",
		hall_symbol: "-P 2c 2bc",
		international: "P n m m",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"282": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^13",
		pointgroup_schoenflies: "mmm",
		international_short: "Pmnm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 59,
		choice: "1bca",
		international_full: "P 2_1/m 2/n 2_1/m",
		hall_symbol: "P 2ac 2ac -1ac",
		international: "P m n m",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"283": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^13",
		pointgroup_schoenflies: "mmm",
		international_short: "Pmnm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 59,
		choice: "2bca",
		international_full: "P 2_1/m 2/n 2_1/m",
		hall_symbol: "-P 2c 2a",
		international: "P m n m",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"284": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^14",
		pointgroup_schoenflies: "mmm",
		international_short: "Pbcn",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 60,
		choice: "",
		international_full: "P 2_1/b 2/c 2_1/n",
		hall_symbol: "-P 2n 2ab",
		international: "P b c n",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"285": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^14",
		pointgroup_schoenflies: "mmm",
		international_short: "Pcan",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 60,
		choice: "ba-c",
		international_full: "P 2/c 2_1/a 2_1/n",
		hall_symbol: "-P 2n 2c",
		international: "P c a n",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"286": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^14",
		pointgroup_schoenflies: "mmm",
		international_short: "Pnca",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 60,
		choice: "cab",
		international_full: "P 2_1/n 2_1/c 2/a",
		hall_symbol: "-P 2a 2n",
		international: "P n c a",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"287": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^14",
		pointgroup_schoenflies: "mmm",
		international_short: "Pnab",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 60,
		choice: "-cba",
		international_full: "P 2_1/n 2/a 2_1/b",
		hall_symbol: "-P 2bc 2n",
		international: "P n a b",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"288": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^14",
		pointgroup_schoenflies: "mmm",
		international_short: "Pbna",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 60,
		choice: "bca",
		international_full: "P 2/b 2_1/n 2_1/a",
		hall_symbol: "-P 2ac 2b",
		international: "P b n a",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"289": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^14",
		pointgroup_schoenflies: "mmm",
		international_short: "Pcnb",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 60,
		choice: "a-cb",
		international_full: "P 2_1/c 2_1/n 2/b",
		hall_symbol: "-P 2b 2ac",
		international: "P c n b",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"290": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^15",
		pointgroup_schoenflies: "mmm",
		international_short: "Pbca",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 61,
		choice: "",
		international_full: "P 2_1/b 2_1/c 2_1/a",
		hall_symbol: "-P 2ac 2ab",
		international: "P b c a",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"291": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^15",
		pointgroup_schoenflies: "mmm",
		international_short: "Pcab",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 61,
		choice: "ba-c",
		international_full: "P 2_1/c 2_1/a 2_1/b",
		hall_symbol: "-P 2bc 2ac",
		international: "P c a b",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"292": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^16",
		pointgroup_schoenflies: "mmm",
		international_short: "Pnma",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 62,
		choice: "",
		international_full: "P 2_1/n 2_1/m 2_1/a",
		hall_symbol: "-P 2ac 2n",
		international: "P n m a",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"293": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^16",
		pointgroup_schoenflies: "mmm",
		international_short: "Pmnb",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 62,
		choice: "ba-c",
		international_full: "P 2_1/m 2_1/n 2_1/b",
		hall_symbol: "-P 2bc 2a",
		international: "P m n b",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"294": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^16",
		pointgroup_schoenflies: "mmm",
		international_short: "Pbnm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 62,
		choice: "cab",
		international_full: "P 2_1/b 2_1/n 2_1/m",
		hall_symbol: "-P 2c 2ab",
		international: "P b n m",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"295": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^16",
		pointgroup_schoenflies: "mmm",
		international_short: "Pcmn",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 62,
		choice: "-cba",
		international_full: "P 2_1/c 2_1/m 2_1/n",
		hall_symbol: "-P 2n 2ac",
		international: "P c m n",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"296": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^16",
		pointgroup_schoenflies: "mmm",
		international_short: "Pmcn",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 62,
		choice: "bca",
		international_full: "P 2_1/m 2_1/c 2_1/n",
		hall_symbol: "-P 2n 2a",
		international: "P m c n",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"297": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^16",
		pointgroup_schoenflies: "mmm",
		international_short: "Pnam",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 62,
		choice: "a-cb",
		international_full: "P 2_1/n 2_1/a 2_1/m",
		hall_symbol: "-P 2c 2n",
		international: "P n a m",
		arithmetic_crystal_class_number: 18,
		arithmetic_crystal_class_symbol: "mmmP"
	},
		"298": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^17",
		pointgroup_schoenflies: "mmm",
		international_short: "Cmcm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 63,
		choice: "",
		international_full: "C 2/m 2/c 2_1/m",
		hall_symbol: "-C 2c 2",
		international: "C m c m",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"299": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^17",
		pointgroup_schoenflies: "mmm",
		international_short: "Ccmm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 63,
		choice: "ba-c",
		international_full: "C 2/c 2/m 2_1/m",
		hall_symbol: "-C 2c 2c",
		international: "C c m m",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"300": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^17",
		pointgroup_schoenflies: "mmm",
		international_short: "Amma",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 63,
		choice: "cab",
		international_full: "A 2_1/m 2/m 2/a",
		hall_symbol: "-A 2a 2a",
		international: "A m m a",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"301": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^17",
		pointgroup_schoenflies: "mmm",
		international_short: "Amam",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 63,
		choice: "-cba",
		international_full: "A 2_1/m 2/a 2/m",
		hall_symbol: "-A 2 2a",
		international: "A m a m",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"302": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^17",
		pointgroup_schoenflies: "mmm",
		international_short: "Bbmm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 63,
		choice: "bca",
		international_full: "B 2/b 2_1/m 2/m",
		hall_symbol: "-B 2 2b",
		international: "B b m m",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"303": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^17",
		pointgroup_schoenflies: "mmm",
		international_short: "Bmmb",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 63,
		choice: "a-cb",
		international_full: "B 2/m 2_1/m 2/b",
		hall_symbol: "-B 2b 2",
		international: "B m m b",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"304": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^18",
		pointgroup_schoenflies: "mmm",
		international_short: "Cmce",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 64,
		choice: "",
		international_full: "C 2/m 2/c 2_1/e",
		hall_symbol: "-C 2bc 2",
		international: "C m c e",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"305": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^18",
		pointgroup_schoenflies: "mmm",
		international_short: "Ccme",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 64,
		choice: "ba-c",
		international_full: "C 2/c 2/m 2_1/e",
		hall_symbol: "-C 2bc 2bc",
		international: "C c m e",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"306": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^18",
		pointgroup_schoenflies: "mmm",
		international_short: "Aema",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 64,
		choice: "cab",
		international_full: "A 2_1/e 2/m 2/a",
		hall_symbol: "-A 2ac 2ac",
		international: "A e m a",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"307": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^18",
		pointgroup_schoenflies: "mmm",
		international_short: "Aeam",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 64,
		choice: "-cba",
		international_full: "A 2_1/e 2/a 2/m",
		hall_symbol: "-A 2 2ac",
		international: "A e a m",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"308": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^18",
		pointgroup_schoenflies: "mmm",
		international_short: "Bbem",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 64,
		choice: "bca",
		international_full: "B 2/b 2_1/e 2/m",
		hall_symbol: "-B 2 2bc",
		international: "B b e m",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"309": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^18",
		pointgroup_schoenflies: "mmm",
		international_short: "Bmeb",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 64,
		choice: "a-cb",
		international_full: "B 2/m 2_1/e 2/b",
		hall_symbol: "-B 2bc 2",
		international: "B m e b",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"310": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^19",
		pointgroup_schoenflies: "mmm",
		international_short: "Cmmm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 65,
		choice: "",
		international_full: "C 2/m 2/m 2/m",
		hall_symbol: "-C 2 2",
		international: "C m m m",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"311": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^19",
		pointgroup_schoenflies: "mmm",
		international_short: "Ammm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 65,
		choice: "cab",
		international_full: "A 2/m 2/m 2/m",
		hall_symbol: "-A 2 2",
		international: "A m m m",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"312": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^19",
		pointgroup_schoenflies: "mmm",
		international_short: "Bmmm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 65,
		choice: "bca",
		international_full: "B 2/m 2/m 2/m",
		hall_symbol: "-B 2 2",
		international: "B m m m",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"313": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^20",
		pointgroup_schoenflies: "mmm",
		international_short: "Cccm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 66,
		choice: "",
		international_full: "C 2/c 2/c 2/m",
		hall_symbol: "-C 2 2c",
		international: "C c c m",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"314": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^20",
		pointgroup_schoenflies: "mmm",
		international_short: "Amaa",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 66,
		choice: "cab",
		international_full: "A 2/m 2/a 2/a",
		hall_symbol: "-A 2a 2",
		international: "A m a a",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"315": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^20",
		pointgroup_schoenflies: "mmm",
		international_short: "Bbmb",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 66,
		choice: "bca",
		international_full: "B 2/b 2/m 2/b",
		hall_symbol: "-B 2b 2b",
		international: "B b m b",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"316": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^21",
		pointgroup_schoenflies: "mmm",
		international_short: "Cmme",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 67,
		choice: "",
		international_full: "C 2/m 2/m 2/e",
		hall_symbol: "-C 2b 2",
		international: "C m m e",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"317": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^21",
		pointgroup_schoenflies: "mmm",
		international_short: "Cmme",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 67,
		choice: "ba-c",
		international_full: "C 2/m 2/m 2/e",
		hall_symbol: "-C 2b 2b",
		international: "C m m e",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"318": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^21",
		pointgroup_schoenflies: "mmm",
		international_short: "Aemm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 67,
		choice: "cab",
		international_full: "A 2/e 2/m 2/m",
		hall_symbol: "-A 2c 2c",
		international: "A e m m",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"319": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^21",
		pointgroup_schoenflies: "mmm",
		international_short: "Aemm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 67,
		choice: "-cba",
		international_full: "A 2/e 2/m 2/m",
		hall_symbol: "-A 2 2c",
		international: "A e m m",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"320": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^21",
		pointgroup_schoenflies: "mmm",
		international_short: "Bmem",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 67,
		choice: "bca",
		international_full: "B 2/m 2/e 2/m",
		hall_symbol: "-B 2 2c",
		international: "B m e m",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"321": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^21",
		pointgroup_schoenflies: "mmm",
		international_short: "Bmem",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 67,
		choice: "a-cb",
		international_full: "B 2/m 2/e 2/m",
		hall_symbol: "-B 2c 2",
		international: "B m e m",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"322": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^22",
		pointgroup_schoenflies: "mmm",
		international_short: "Ccce",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 68,
		choice: "1",
		international_full: "C 2/c 2/c 2/e",
		hall_symbol: "C 2 2 -1bc",
		international: "C c c e",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"323": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^22",
		pointgroup_schoenflies: "mmm",
		international_short: "Ccce",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 68,
		choice: "2",
		international_full: "C 2/c 2/c 2/e",
		hall_symbol: "-C 2b 2bc",
		international: "C c c e",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"324": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^22",
		pointgroup_schoenflies: "mmm",
		international_short: "Ccce",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 68,
		choice: "1ba-c",
		international_full: "C 2/c 2/c 2/e",
		hall_symbol: "C 2 2 -1bc",
		international: "C c c e",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"325": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^22",
		pointgroup_schoenflies: "mmm",
		international_short: "Ccce",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 68,
		choice: "2ba-c",
		international_full: "C 2/c 2/c 2/e",
		hall_symbol: "-C 2b 2c",
		international: "C c c e",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"326": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^22",
		pointgroup_schoenflies: "mmm",
		international_short: "Aeaa",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 68,
		choice: "1cab",
		international_full: "A 2/e 2/a 2/a",
		hall_symbol: "A 2 2 -1ac",
		international: "A e a a",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"327": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^22",
		pointgroup_schoenflies: "mmm",
		international_short: "Aeaa",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 68,
		choice: "2cab",
		international_full: "A 2/e 2/a 2/a",
		hall_symbol: "-A 2a 2c",
		international: "A e a a",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"328": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^22",
		pointgroup_schoenflies: "mmm",
		international_short: "Aeaa",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 68,
		choice: "1-cba",
		international_full: "A 2/e 2/a 2/a",
		hall_symbol: "A 2 2 -1ac",
		international: "A e a a",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"329": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^22",
		pointgroup_schoenflies: "mmm",
		international_short: "Aeaa",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 68,
		choice: "2-cba",
		international_full: "A 2/e 2/a 2/a",
		hall_symbol: "-A 2ac 2c",
		international: "A e a a",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"330": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^22",
		pointgroup_schoenflies: "mmm",
		international_short: "Bbeb",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 68,
		choice: "1bca",
		international_full: "B 2/b 2/e 2/b",
		hall_symbol: "B 2 2 -1bc",
		international: "B b e b",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"331": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^22",
		pointgroup_schoenflies: "mmm",
		international_short: "Bbcb",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 68,
		choice: "2bca",
		international_full: "B 2/b 2/e 2/b",
		hall_symbol: "-B 2bc 2b",
		international: "B b c b",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"332": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^22",
		pointgroup_schoenflies: "mmm",
		international_short: "Bbeb",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 68,
		choice: "1a-cb",
		international_full: "B 2/b 2/e 2/b",
		hall_symbol: "B 2 2 -1bc",
		international: "B b e b",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"333": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^22",
		pointgroup_schoenflies: "mmm",
		international_short: "Bbeb",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 68,
		choice: "2a-cb",
		international_full: "B 2/b 2/e 2/b",
		hall_symbol: "-B 2b 2bc",
		international: "B b e b",
		arithmetic_crystal_class_number: 19,
		arithmetic_crystal_class_symbol: "mmmC"
	},
		"334": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^23",
		pointgroup_schoenflies: "mmm",
		international_short: "Fmmm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 69,
		choice: "",
		international_full: "F 2/m 2/m 2/m",
		hall_symbol: "-F 2 2",
		international: "F m m m",
		arithmetic_crystal_class_number: 20,
		arithmetic_crystal_class_symbol: "mmmF"
	},
		"335": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^24",
		pointgroup_schoenflies: "mmm",
		international_short: "Fddd",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.75,
				0.75,
				0.25
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 70,
		choice: "1",
		international_full: "F 2/d 2/d 2/d",
		hall_symbol: "F 2 2 -1d",
		international: "F d d d",
		arithmetic_crystal_class_number: 20,
		arithmetic_crystal_class_symbol: "mmmF"
	},
		"336": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^24",
		pointgroup_schoenflies: "mmm",
		international_short: "Fddd",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.25,
				0
			],
			[
				0.25,
				0.25,
				0
			],
			[
				0,
				0.25,
				0.25
			],
			[
				0,
				0.25,
				0.25
			],
			[
				0.25,
				0,
				0.25
			],
			[
				0.25,
				0,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.75,
				0.5
			],
			[
				0.25,
				0.75,
				0.5
			],
			[
				0,
				0.75,
				0.75
			],
			[
				0,
				0.75,
				0.75
			],
			[
				0.25,
				0.5,
				0.75
			],
			[
				0.25,
				0.5,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.25,
				0.5
			],
			[
				0.75,
				0.25,
				0.5
			],
			[
				0.5,
				0.25,
				0.75
			],
			[
				0.5,
				0.25,
				0.75
			],
			[
				0.75,
				0,
				0.75
			],
			[
				0.75,
				0,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0
			],
			[
				0.75,
				0.75,
				0
			],
			[
				0.5,
				0.75,
				0.25
			],
			[
				0.5,
				0.75,
				0.25
			],
			[
				0.75,
				0.5,
				0.25
			],
			[
				0.75,
				0.5,
				0.25
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 70,
		choice: "2",
		international_full: "F 2/d 2/d 2/d",
		hall_symbol: "-F 2uv 2vw",
		international: "F d d d",
		arithmetic_crystal_class_number: 20,
		arithmetic_crystal_class_symbol: "mmmF"
	},
		"337": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^25",
		pointgroup_schoenflies: "mmm",
		international_short: "Immm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 71,
		choice: "",
		international_full: "I 2/m 2/m 2/m",
		hall_symbol: "-I 2 2",
		international: "I m m m",
		arithmetic_crystal_class_number: 21,
		arithmetic_crystal_class_symbol: "mmmI"
	},
		"338": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^26",
		pointgroup_schoenflies: "mmm",
		international_short: "Ibam",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 72,
		choice: "",
		international_full: "I 2/b 2/a 2/m",
		hall_symbol: "-I 2 2c",
		international: "I b a m",
		arithmetic_crystal_class_number: 21,
		arithmetic_crystal_class_symbol: "mmmI"
	},
		"339": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^26",
		pointgroup_schoenflies: "mmm",
		international_short: "Imcb",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 72,
		choice: "cab",
		international_full: "I 2/m 2/c 2/b",
		hall_symbol: "-I 2a 2",
		international: "I m c b",
		arithmetic_crystal_class_number: 21,
		arithmetic_crystal_class_symbol: "mmmI"
	},
		"340": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^26",
		pointgroup_schoenflies: "mmm",
		international_short: "Icma",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 72,
		choice: "bca",
		international_full: "I 2/c 2/m 2/a",
		hall_symbol: "-I 2b 2b",
		international: "I c m a",
		arithmetic_crystal_class_number: 21,
		arithmetic_crystal_class_symbol: "mmmI"
	},
		"341": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^27",
		pointgroup_schoenflies: "mmm",
		international_short: "Ibca",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 73,
		choice: "",
		international_full: "I 2/b 2/c 2/a",
		hall_symbol: "-I 2b 2c",
		international: "I b c a",
		arithmetic_crystal_class_number: 21,
		arithmetic_crystal_class_symbol: "mmmI"
	},
		"342": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^27",
		pointgroup_schoenflies: "mmm",
		international_short: "Icab",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 73,
		choice: "ba-c",
		international_full: "I 2/c 2/a 2/b",
		hall_symbol: "-I 2a 2b",
		international: "I c a b",
		arithmetic_crystal_class_number: 21,
		arithmetic_crystal_class_symbol: "mmmI"
	},
		"343": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^28",
		pointgroup_schoenflies: "mmm",
		international_short: "Imma",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 74,
		choice: "",
		international_full: "I 2/m 2/m 2/a",
		hall_symbol: "-I 2b 2",
		international: "I m m a",
		arithmetic_crystal_class_number: 21,
		arithmetic_crystal_class_symbol: "mmmI"
	},
		"344": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^28",
		pointgroup_schoenflies: "mmm",
		international_short: "Immb",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 74,
		choice: "ba-c",
		international_full: "I 2/m 2/m 2/b",
		hall_symbol: "-I 2a 2a",
		international: "I m m b",
		arithmetic_crystal_class_number: 21,
		arithmetic_crystal_class_symbol: "mmmI"
	},
		"345": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^28",
		pointgroup_schoenflies: "mmm",
		international_short: "Ibmm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 74,
		choice: "cab",
		international_full: "I 2/b 2/m 2/m",
		hall_symbol: "-I 2c 2c",
		international: "I b m m",
		arithmetic_crystal_class_number: 21,
		arithmetic_crystal_class_symbol: "mmmI"
	},
		"346": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^28",
		pointgroup_schoenflies: "mmm",
		international_short: "Icmm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 74,
		choice: "-cba",
		international_full: "I 2/c 2/m 2/m",
		hall_symbol: "-I 2 2b",
		international: "I c m m",
		arithmetic_crystal_class_number: 21,
		arithmetic_crystal_class_symbol: "mmmI"
	},
		"347": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^28",
		pointgroup_schoenflies: "mmm",
		international_short: "Imcm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 74,
		choice: "bca",
		international_full: "I 2/m 2/c 2/m",
		hall_symbol: "-I 2 2a",
		international: "I m c m",
		arithmetic_crystal_class_number: 21,
		arithmetic_crystal_class_symbol: "mmmI"
	},
		"348": {
		pointgroup_international: "D2h",
		schoenflies: "D2h^28",
		pointgroup_schoenflies: "mmm",
		international_short: "Imam",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 74,
		choice: "a-cb",
		international_full: "I 2/m 2/a 2/m",
		hall_symbol: "-I 2c 2",
		international: "I m a m",
		arithmetic_crystal_class_number: 21,
		arithmetic_crystal_class_symbol: "mmmI"
	},
		"349": {
		pointgroup_international: "C4",
		schoenflies: "C4^1",
		pointgroup_schoenflies: "4",
		international_short: "P4",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 75,
		choice: "",
		international_full: "P 4",
		hall_symbol: "P 4",
		international: "P 4",
		arithmetic_crystal_class_number: 22,
		arithmetic_crystal_class_symbol: "4P"
	},
		"350": {
		pointgroup_international: "C4",
		schoenflies: "C4^2",
		pointgroup_schoenflies: "4",
		international_short: "P4_1",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.25
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.75
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 76,
		choice: "",
		international_full: "P 4_1",
		hall_symbol: "P 4w",
		international: "P 4_1",
		arithmetic_crystal_class_number: 22,
		arithmetic_crystal_class_symbol: "4P"
	},
		"351": {
		pointgroup_international: "C4",
		schoenflies: "C4^3",
		pointgroup_schoenflies: "4",
		international_short: "P4_2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 77,
		choice: "",
		international_full: "P 4_2",
		hall_symbol: "P 4c",
		international: "P 4_2",
		arithmetic_crystal_class_number: 22,
		arithmetic_crystal_class_symbol: "4P"
	},
		"352": {
		pointgroup_international: "C4",
		schoenflies: "C4^4",
		pointgroup_schoenflies: "4",
		international_short: "P4_3",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.75
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.25
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 78,
		choice: "",
		international_full: "P 4_3",
		hall_symbol: "P 4cw",
		international: "P 4_3",
		arithmetic_crystal_class_number: 22,
		arithmetic_crystal_class_symbol: "4P"
	},
		"353": {
		pointgroup_international: "C4",
		schoenflies: "C4^5",
		pointgroup_schoenflies: "4",
		international_short: "I4",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 79,
		choice: "",
		international_full: "I 4",
		hall_symbol: "I 4",
		international: "I 4",
		arithmetic_crystal_class_number: 23,
		arithmetic_crystal_class_symbol: "4I"
	},
		"354": {
		pointgroup_international: "C4",
		schoenflies: "C4^6",
		pointgroup_schoenflies: "4",
		international_short: "I4_1",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.25
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.25
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 80,
		choice: "",
		international_full: "I 4_1",
		hall_symbol: "I 4bw",
		international: "I 4_1",
		arithmetic_crystal_class_number: 23,
		arithmetic_crystal_class_symbol: "4I"
	},
		"355": {
		pointgroup_international: "S4",
		schoenflies: "S4^1",
		pointgroup_schoenflies: "-4",
		international_short: "P-4",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 81,
		choice: "",
		international_full: "P -4",
		hall_symbol: "P -4",
		international: "P -4",
		arithmetic_crystal_class_number: 24,
		arithmetic_crystal_class_symbol: "-4P"
	},
		"356": {
		pointgroup_international: "S4",
		schoenflies: "S4^2",
		pointgroup_schoenflies: "-4",
		international_short: "I-4",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 82,
		choice: "",
		international_full: "I -4",
		hall_symbol: "I -4",
		international: "I -4",
		arithmetic_crystal_class_number: 25,
		arithmetic_crystal_class_symbol: "-4I"
	},
		"357": {
		pointgroup_international: "C4h",
		schoenflies: "C4h^1",
		pointgroup_schoenflies: "4/m",
		international_short: "P4/m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 83,
		choice: "",
		international_full: "P 4/m",
		hall_symbol: "-P 4",
		international: "P 4/m",
		arithmetic_crystal_class_number: 26,
		arithmetic_crystal_class_symbol: "4/mP"
	},
		"358": {
		pointgroup_international: "C4h",
		schoenflies: "C4h^2",
		pointgroup_schoenflies: "4/m",
		international_short: "P4_2/m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 84,
		choice: "",
		international_full: "P 4_2/m",
		hall_symbol: "-P 4c",
		international: "P 4_2/m",
		arithmetic_crystal_class_number: 26,
		arithmetic_crystal_class_symbol: "4/mP"
	},
		"359": {
		pointgroup_international: "C4h",
		schoenflies: "C4h^3",
		pointgroup_schoenflies: "4/m",
		international_short: "P4/n",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 85,
		choice: "1",
		international_full: "P 4/n",
		hall_symbol: "P 4ab -1ab",
		international: "P 4/n",
		arithmetic_crystal_class_number: 26,
		arithmetic_crystal_class_symbol: "4/mP"
	},
		"360": {
		pointgroup_international: "C4h",
		schoenflies: "C4h^3",
		pointgroup_schoenflies: "4/m",
		international_short: "P4/n",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 85,
		choice: "2",
		international_full: "P 4/n",
		hall_symbol: "-P 4a",
		international: "P 4/n",
		arithmetic_crystal_class_number: 26,
		arithmetic_crystal_class_symbol: "4/mP"
	},
		"361": {
		pointgroup_international: "C4h",
		schoenflies: "C4h^4",
		pointgroup_schoenflies: "4/m",
		international_short: "P4_2/n",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 86,
		choice: "1",
		international_full: "P 4_2/n",
		hall_symbol: "P 4n -1n",
		international: "P 4_2/n",
		arithmetic_crystal_class_number: 26,
		arithmetic_crystal_class_symbol: "4/mP"
	},
		"362": {
		pointgroup_international: "C4h",
		schoenflies: "C4h^4",
		pointgroup_schoenflies: "4/m",
		international_short: "P4_2/n",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 86,
		choice: "2",
		international_full: "P 4_2/n",
		hall_symbol: "-P 4bc",
		international: "P 4_2/n",
		arithmetic_crystal_class_number: 26,
		arithmetic_crystal_class_symbol: "4/mP"
	},
		"363": {
		pointgroup_international: "C4h",
		schoenflies: "C4h^5",
		pointgroup_schoenflies: "4/m",
		international_short: "I4/m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 87,
		choice: "",
		international_full: "I 4/m",
		hall_symbol: "-I 4",
		international: "I 4/m",
		arithmetic_crystal_class_number: 27,
		arithmetic_crystal_class_symbol: "4/mI"
	},
		"364": {
		pointgroup_international: "C4h",
		schoenflies: "C4h^6",
		pointgroup_schoenflies: "4/m",
		international_short: "I4_1/a",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.25
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0,
				0.5,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.25
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.25
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 88,
		choice: "1",
		international_full: "I 4_1/a",
		hall_symbol: "I 4bw -1bw",
		international: "I 4_1/a",
		arithmetic_crystal_class_number: 27,
		arithmetic_crystal_class_symbol: "4/mI"
	},
		"365": {
		pointgroup_international: "C4h",
		schoenflies: "C4h^6",
		pointgroup_schoenflies: "4/m",
		international_short: "I4_1/a",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.25,
				0.25,
				0.25
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 88,
		choice: "2",
		international_full: "I 4_1/a",
		hall_symbol: "-I 4ad",
		international: "I 4_1/a",
		arithmetic_crystal_class_number: 27,
		arithmetic_crystal_class_symbol: "4/mI"
	},
		"366": {
		pointgroup_international: "D4",
		schoenflies: "D4^1",
		pointgroup_schoenflies: "422",
		international_short: "P422",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 89,
		choice: "",
		international_full: "P 4 2 2",
		hall_symbol: "P 4 2",
		international: "P 4 2 2",
		arithmetic_crystal_class_number: 28,
		arithmetic_crystal_class_symbol: "422P"
	},
		"367": {
		pointgroup_international: "D4",
		schoenflies: "D4^2",
		pointgroup_schoenflies: "422",
		international_short: "P42_12",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 90,
		choice: "",
		international_full: "P 4 2_1 2",
		hall_symbol: "P 4ab 2ab",
		international: "P 4 2_1 2",
		arithmetic_crystal_class_number: 28,
		arithmetic_crystal_class_symbol: "422P"
	},
		"368": {
		pointgroup_international: "D4",
		schoenflies: "D4^3",
		pointgroup_schoenflies: "422",
		international_short: "P4_122",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.25
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.75
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.75
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 91,
		choice: "",
		international_full: "P 4_1 2 2",
		hall_symbol: "P 4w 2c",
		international: "P 4_1 2 2",
		arithmetic_crystal_class_number: 28,
		arithmetic_crystal_class_symbol: "422P"
	},
		"369": {
		pointgroup_international: "D4",
		schoenflies: "D4^4",
		pointgroup_schoenflies: "422",
		international_short: "P4_12_12",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.25
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.75
			],
			[
				0.5,
				0.5,
				0.75
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.25
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 92,
		choice: "",
		international_full: "P 4_1 2_1 2",
		hall_symbol: "P 4abw 2nw",
		international: "P 4_1 2_1 2",
		arithmetic_crystal_class_number: 28,
		arithmetic_crystal_class_symbol: "422P"
	},
		"370": {
		pointgroup_international: "D4",
		schoenflies: "D4^5",
		pointgroup_schoenflies: "422",
		international_short: "P4_222",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 93,
		choice: "",
		international_full: "P 4_2 2 2",
		hall_symbol: "P 4c 2",
		international: "P 4_2 2 2",
		arithmetic_crystal_class_number: 28,
		arithmetic_crystal_class_symbol: "422P"
	},
		"371": {
		pointgroup_international: "D4",
		schoenflies: "D4^6",
		pointgroup_schoenflies: "422",
		international_short: "P4_22_12",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 94,
		choice: "",
		international_full: "P 4_2 2_1 2",
		hall_symbol: "P 4n 2n",
		international: "P 4_2 2_1 2",
		arithmetic_crystal_class_number: 28,
		arithmetic_crystal_class_symbol: "422P"
	},
		"372": {
		pointgroup_international: "D4",
		schoenflies: "D4^7",
		pointgroup_schoenflies: "422",
		international_short: "P4_322",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.75
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.25
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.25
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 95,
		choice: "",
		international_full: "P 4_3 2 2",
		hall_symbol: "P 4cw 2c",
		international: "P 4_3 2 2",
		arithmetic_crystal_class_number: 28,
		arithmetic_crystal_class_symbol: "422P"
	},
		"373": {
		pointgroup_international: "D4",
		schoenflies: "D4^8",
		pointgroup_schoenflies: "422",
		international_short: "P4_32_12",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.75
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.25
			],
			[
				0.5,
				0.5,
				0.25
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.75
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 96,
		choice: "",
		international_full: "P 4_3 2_1 2",
		hall_symbol: "P 4nw 2abw",
		international: "P 4_3 2_1 2",
		arithmetic_crystal_class_number: 28,
		arithmetic_crystal_class_symbol: "422P"
	},
		"374": {
		pointgroup_international: "D4",
		schoenflies: "D4^9",
		pointgroup_schoenflies: "422",
		international_short: "I422",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 97,
		choice: "",
		international_full: "I 4 2 2",
		hall_symbol: "I 4 2",
		international: "I 4 2 2",
		arithmetic_crystal_class_number: 29,
		arithmetic_crystal_class_symbol: "422I"
	},
		"375": {
		pointgroup_international: "D4",
		schoenflies: "D4^10",
		pointgroup_schoenflies: "422",
		international_short: "I4_122",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.25
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0,
				0.5,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.25
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.25
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 98,
		choice: "",
		international_full: "I 4_1 2 2",
		hall_symbol: "I 4bw 2bw",
		international: "I 4_1 2 2",
		arithmetic_crystal_class_number: 29,
		arithmetic_crystal_class_symbol: "422I"
	},
		"376": {
		pointgroup_international: "C4v",
		schoenflies: "C4v^1",
		pointgroup_schoenflies: "4mm",
		international_short: "P4mm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 99,
		choice: "",
		international_full: "P 4 m m",
		hall_symbol: "P 4 -2",
		international: "P 4 m m",
		arithmetic_crystal_class_number: 30,
		arithmetic_crystal_class_symbol: "4mmP"
	},
		"377": {
		pointgroup_international: "C4v",
		schoenflies: "C4v^2",
		pointgroup_schoenflies: "4mm",
		international_short: "P4bm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 100,
		choice: "",
		international_full: "P 4 b m",
		hall_symbol: "P 4 -2ab",
		international: "P 4 b m",
		arithmetic_crystal_class_number: 30,
		arithmetic_crystal_class_symbol: "4mmP"
	},
		"378": {
		pointgroup_international: "C4v",
		schoenflies: "C4v^3",
		pointgroup_schoenflies: "4mm",
		international_short: "P4_2cm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 101,
		choice: "",
		international_full: "P 4_2 c m",
		hall_symbol: "P 4c -2c",
		international: "P 4_2 c m",
		arithmetic_crystal_class_number: 30,
		arithmetic_crystal_class_symbol: "4mmP"
	},
		"379": {
		pointgroup_international: "C4v",
		schoenflies: "C4v^4",
		pointgroup_schoenflies: "4mm",
		international_short: "P4_2nm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 102,
		choice: "",
		international_full: "P 4_2 n m",
		hall_symbol: "P 4n -2n",
		international: "P 4_2 n m",
		arithmetic_crystal_class_number: 30,
		arithmetic_crystal_class_symbol: "4mmP"
	},
		"380": {
		pointgroup_international: "C4v",
		schoenflies: "C4v^5",
		pointgroup_schoenflies: "4mm",
		international_short: "P4cc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 103,
		choice: "",
		international_full: "P 4 c c",
		hall_symbol: "P 4 -2c",
		international: "P 4 c c",
		arithmetic_crystal_class_number: 30,
		arithmetic_crystal_class_symbol: "4mmP"
	},
		"381": {
		pointgroup_international: "C4v",
		schoenflies: "C4v^6",
		pointgroup_schoenflies: "4mm",
		international_short: "P4nc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 104,
		choice: "",
		international_full: "P 4 n c",
		hall_symbol: "P 4 -2n",
		international: "P 4 n c",
		arithmetic_crystal_class_number: 30,
		arithmetic_crystal_class_symbol: "4mmP"
	},
		"382": {
		pointgroup_international: "C4v",
		schoenflies: "C4v^7",
		pointgroup_schoenflies: "4mm",
		international_short: "P4_2mc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 105,
		choice: "",
		international_full: "P 4_2 m c",
		hall_symbol: "P 4c -2",
		international: "P 4_2 m c",
		arithmetic_crystal_class_number: 30,
		arithmetic_crystal_class_symbol: "4mmP"
	},
		"383": {
		pointgroup_international: "C4v",
		schoenflies: "C4v^8",
		pointgroup_schoenflies: "4mm",
		international_short: "P4_2bc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 106,
		choice: "",
		international_full: "P 4_2 b c",
		hall_symbol: "P 4c -2ab",
		international: "P 4_2 b c",
		arithmetic_crystal_class_number: 30,
		arithmetic_crystal_class_symbol: "4mmP"
	},
		"384": {
		pointgroup_international: "C4v",
		schoenflies: "C4v^9",
		pointgroup_schoenflies: "4mm",
		international_short: "I4mm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 107,
		choice: "",
		international_full: "I 4 m m",
		hall_symbol: "I 4 -2",
		international: "I 4 m m",
		arithmetic_crystal_class_number: 31,
		arithmetic_crystal_class_symbol: "4mmI"
	},
		"385": {
		pointgroup_international: "C4v",
		schoenflies: "C4v^10",
		pointgroup_schoenflies: "4mm",
		international_short: "I4cm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 108,
		choice: "",
		international_full: "I 4 c m",
		hall_symbol: "I 4 -2c",
		international: "I 4 c m",
		arithmetic_crystal_class_number: 31,
		arithmetic_crystal_class_symbol: "4mmI"
	},
		"386": {
		pointgroup_international: "C4v",
		schoenflies: "C4v^11",
		pointgroup_schoenflies: "4mm",
		international_short: "I4_1md",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.25
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.25
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.25
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.25
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 109,
		choice: "",
		international_full: "I 4_1 m d",
		hall_symbol: "I 4bw -2",
		international: "I 4_1 m d",
		arithmetic_crystal_class_number: 31,
		arithmetic_crystal_class_symbol: "4mmI"
	},
		"387": {
		pointgroup_international: "C4v",
		schoenflies: "C4v^12",
		pointgroup_schoenflies: "4mm",
		international_short: "I4_1cd",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.25
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.25
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.25
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.75
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 110,
		choice: "",
		international_full: "I 4_1 c d",
		hall_symbol: "I 4bw -2c",
		international: "I 4_1 c d",
		arithmetic_crystal_class_number: 31,
		arithmetic_crystal_class_symbol: "4mmI"
	},
		"388": {
		pointgroup_international: "D2d",
		schoenflies: "D2d^1",
		pointgroup_schoenflies: "-42m",
		international_short: "P-42m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 111,
		choice: "",
		international_full: "P -4 2 m",
		hall_symbol: "P -4 2",
		international: "P -4 2 m",
		arithmetic_crystal_class_number: 32,
		arithmetic_crystal_class_symbol: "-42mP"
	},
		"389": {
		pointgroup_international: "D2d",
		schoenflies: "D2d^2",
		pointgroup_schoenflies: "-42m",
		international_short: "P-42c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 112,
		choice: "",
		international_full: "P -4 2 c",
		hall_symbol: "P -4 2c",
		international: "P -4 2 c",
		arithmetic_crystal_class_number: 32,
		arithmetic_crystal_class_symbol: "-42mP"
	},
		"390": {
		pointgroup_international: "D2d",
		schoenflies: "D2d^3",
		pointgroup_schoenflies: "-42m",
		international_short: "P-42_1m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 113,
		choice: "",
		international_full: "P -4 2_1 m",
		hall_symbol: "P -4 2ab",
		international: "P -4 2_1 m",
		arithmetic_crystal_class_number: 32,
		arithmetic_crystal_class_symbol: "-42mP"
	},
		"391": {
		pointgroup_international: "D2d",
		schoenflies: "D2d^4",
		pointgroup_schoenflies: "-42m",
		international_short: "P-42_1c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 114,
		choice: "",
		international_full: "P -4 2_1 c",
		hall_symbol: "P -4 2n",
		international: "P -4 2_1 c",
		arithmetic_crystal_class_number: 32,
		arithmetic_crystal_class_symbol: "-42mP"
	},
		"392": {
		pointgroup_international: "D2d",
		schoenflies: "D2d^5",
		pointgroup_schoenflies: "-42m",
		international_short: "P-4m2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 115,
		choice: "",
		international_full: "P -4 m 2",
		hall_symbol: "P -4 -2",
		international: "P -4 m 2",
		arithmetic_crystal_class_number: 33,
		arithmetic_crystal_class_symbol: "-4m2P"
	},
		"393": {
		pointgroup_international: "D2d",
		schoenflies: "D2d^6",
		pointgroup_schoenflies: "-42m",
		international_short: "P-4c2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 116,
		choice: "",
		international_full: "P -4 c 2",
		hall_symbol: "P -4 -2c",
		international: "P -4 c 2",
		arithmetic_crystal_class_number: 33,
		arithmetic_crystal_class_symbol: "-4m2P"
	},
		"394": {
		pointgroup_international: "D2d",
		schoenflies: "D2d^7",
		pointgroup_schoenflies: "-42m",
		international_short: "P-4b2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 117,
		choice: "",
		international_full: "P -4 b 2",
		hall_symbol: "P -4 -2ab",
		international: "P -4 b 2",
		arithmetic_crystal_class_number: 33,
		arithmetic_crystal_class_symbol: "-4m2P"
	},
		"395": {
		pointgroup_international: "D2d",
		schoenflies: "D2d^8",
		pointgroup_schoenflies: "-42m",
		international_short: "P-4n2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 118,
		choice: "",
		international_full: "P -4 n 2",
		hall_symbol: "P -4 -2n",
		international: "P -4 n 2",
		arithmetic_crystal_class_number: 33,
		arithmetic_crystal_class_symbol: "-4m2P"
	},
		"396": {
		pointgroup_international: "D2d",
		schoenflies: "D2d^9",
		pointgroup_schoenflies: "-42m",
		international_short: "I-4m2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 119,
		choice: "",
		international_full: "I -4 m 2",
		hall_symbol: "I -4 -2",
		international: "I -4 m 2",
		arithmetic_crystal_class_number: 34,
		arithmetic_crystal_class_symbol: "-4m2I"
	},
		"397": {
		pointgroup_international: "D2d",
		schoenflies: "D2d^10",
		pointgroup_schoenflies: "-42m",
		international_short: "I-4c2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 120,
		choice: "",
		international_full: "I -4 c 2",
		hall_symbol: "I -4 -2c",
		international: "I -4 c 2",
		arithmetic_crystal_class_number: 34,
		arithmetic_crystal_class_symbol: "-4m2I"
	},
		"398": {
		pointgroup_international: "D2d",
		schoenflies: "D2d^11",
		pointgroup_schoenflies: "-42m",
		international_short: "I-42m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 121,
		choice: "",
		international_full: "I -4 2 m",
		hall_symbol: "I -4 2",
		international: "I -4 2 m",
		arithmetic_crystal_class_number: 35,
		arithmetic_crystal_class_symbol: "-42mI"
	},
		"399": {
		pointgroup_international: "D2d",
		schoenflies: "D2d^12",
		pointgroup_schoenflies: "-42m",
		international_short: "I-42d",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.25
			],
			[
				0,
				0.5,
				0.25
			],
			[
				0,
				0.5,
				0.25
			],
			[
				0,
				0.5,
				0.25
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0.5,
				0,
				0.75
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 122,
		choice: "",
		international_full: "I -4 2 d",
		hall_symbol: "I -4 2bw",
		international: "I -4 2 d",
		arithmetic_crystal_class_number: 35,
		arithmetic_crystal_class_symbol: "-42mI"
	},
		"400": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^1",
		pointgroup_schoenflies: "4/mmm",
		international_short: "P4/mmm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 123,
		choice: "",
		international_full: "P 4/m 2/m 2/m",
		hall_symbol: "-P 4 2",
		international: "P 4/m m m",
		arithmetic_crystal_class_number: 36,
		arithmetic_crystal_class_symbol: "4/mmmP"
	},
		"401": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^2",
		pointgroup_schoenflies: "4/mmm",
		international_short: "P4/mcc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 124,
		choice: "",
		international_full: "P 4/m 2/c 2/c",
		hall_symbol: "-P 4 2c",
		international: "P 4/m c c",
		arithmetic_crystal_class_number: 36,
		arithmetic_crystal_class_symbol: "4/mmmP"
	},
		"402": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^3",
		pointgroup_schoenflies: "4/mmm",
		international_short: "P4/nbm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 125,
		choice: "1",
		international_full: "P 4/n 2/b 2/m",
		hall_symbol: "P 4 2 -1ab",
		international: "P 4/n b m",
		arithmetic_crystal_class_number: 36,
		arithmetic_crystal_class_symbol: "4/mmmP"
	},
		"403": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^3",
		pointgroup_schoenflies: "4/mmm",
		international_short: "P4/nbm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 125,
		choice: "2",
		international_full: "P 4/n 2/b 2/m",
		hall_symbol: "-P 4a 2b",
		international: "P 4/n b m",
		arithmetic_crystal_class_number: 36,
		arithmetic_crystal_class_symbol: "4/mmmP"
	},
		"404": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^4",
		pointgroup_schoenflies: "4/mmm",
		international_short: "P4/nnc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 126,
		choice: "1",
		international_full: "P 4/n 2/n 2/c",
		hall_symbol: "P 4 2 -1n",
		international: "P 4/n n c",
		arithmetic_crystal_class_number: 36,
		arithmetic_crystal_class_symbol: "4/mmmP"
	},
		"405": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^4",
		pointgroup_schoenflies: "4/mmm",
		international_short: "P4/nnc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 126,
		choice: "2",
		international_full: "P 4/n 2/n 2/c",
		hall_symbol: "-P 4a 2bc",
		international: "P 4/n n c",
		arithmetic_crystal_class_number: 36,
		arithmetic_crystal_class_symbol: "4/mmmP"
	},
		"406": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^5",
		pointgroup_schoenflies: "4/mmm",
		international_short: "P4/mbm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 127,
		choice: "",
		international_full: "P 4/m 2_1/b m",
		hall_symbol: "-P 4 2ab",
		international: "P 4/m b m",
		arithmetic_crystal_class_number: 36,
		arithmetic_crystal_class_symbol: "4/mmmP"
	},
		"407": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^6",
		pointgroup_schoenflies: "4/mmm",
		international_short: "P4/mnc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 128,
		choice: "",
		international_full: "P 4/m 2_1/n c",
		hall_symbol: "-P 4 2n",
		international: "P 4/m n c",
		arithmetic_crystal_class_number: 36,
		arithmetic_crystal_class_symbol: "4/mmmP"
	},
		"408": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^7",
		pointgroup_schoenflies: "4/mmm",
		international_short: "P4/nmm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 129,
		choice: "1",
		international_full: "P 4/n 2_1/m m",
		hall_symbol: "P 4ab 2ab -1ab",
		international: "P 4/n m m",
		arithmetic_crystal_class_number: 36,
		arithmetic_crystal_class_symbol: "4/mmmP"
	},
		"409": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^7",
		pointgroup_schoenflies: "4/mmm",
		international_short: "P4/nmm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 129,
		choice: "2",
		international_full: "P 4/n 2_1/m m",
		hall_symbol: "-P 4a 2a",
		international: "P 4/n m m",
		arithmetic_crystal_class_number: 36,
		arithmetic_crystal_class_symbol: "4/mmmP"
	},
		"410": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^8",
		pointgroup_schoenflies: "4/mmm",
		international_short: "P4/ncc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 130,
		choice: "1",
		international_full: "P 4/n 2_1/c c",
		hall_symbol: "P 4ab 2n -1ab",
		international: "P 4/n c c",
		arithmetic_crystal_class_number: 36,
		arithmetic_crystal_class_symbol: "4/mmmP"
	},
		"411": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^8",
		pointgroup_schoenflies: "4/mmm",
		international_short: "P4/ncc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 130,
		choice: "2",
		international_full: "P 4/n 2_1/c c",
		hall_symbol: "-P 4a 2ac",
		international: "P 4/n c c",
		arithmetic_crystal_class_number: 36,
		arithmetic_crystal_class_symbol: "4/mmmP"
	},
		"412": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^9",
		pointgroup_schoenflies: "4/mmm",
		international_short: "P4_2/mmc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 131,
		choice: "",
		international_full: "P 4_2/m 2/m 2/c",
		hall_symbol: "-P 4c 2",
		international: "P 4_2/m m c",
		arithmetic_crystal_class_number: 36,
		arithmetic_crystal_class_symbol: "4/mmmP"
	},
		"413": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^10",
		pointgroup_schoenflies: "4/mmm",
		international_short: "P4_2/mcm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 132,
		choice: "",
		international_full: "P 4_2/m 2/c 2/m",
		hall_symbol: "-P 4c 2c",
		international: "P 4_2/m c m",
		arithmetic_crystal_class_number: 36,
		arithmetic_crystal_class_symbol: "4/mmmP"
	},
		"414": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^11",
		pointgroup_schoenflies: "4/mmm",
		international_short: "P4_2/nbc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 133,
		choice: "1",
		international_full: "P 4_2/n 2/b 2/c",
		hall_symbol: "P 4n 2c -1n",
		international: "P 4_2/n b c",
		arithmetic_crystal_class_number: 36,
		arithmetic_crystal_class_symbol: "4/mmmP"
	},
		"415": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^11",
		pointgroup_schoenflies: "4/mmm",
		international_short: "P4_2/nbc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 133,
		choice: "2",
		international_full: "P 4_2/n 2/b 2/c",
		hall_symbol: "-P 4ac 2b",
		international: "P 4_2/n b c",
		arithmetic_crystal_class_number: 36,
		arithmetic_crystal_class_symbol: "4/mmmP"
	},
		"416": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^12",
		pointgroup_schoenflies: "4/mmm",
		international_short: "P4_2/nnm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 134,
		choice: "1",
		international_full: "P 4_2/n 2/n 2/m",
		hall_symbol: "P 4n 2 -1n",
		international: "P 4_2/n n m",
		arithmetic_crystal_class_number: 36,
		arithmetic_crystal_class_symbol: "4/mmmP"
	},
		"417": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^12",
		pointgroup_schoenflies: "4/mmm",
		international_short: "P4_2/nnm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 134,
		choice: "2",
		international_full: "P 4_2/n 2/n 2/m",
		hall_symbol: "-P 4ac 2bc",
		international: "P 4_2/n n m",
		arithmetic_crystal_class_number: 36,
		arithmetic_crystal_class_symbol: "4/mmmP"
	},
		"418": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^13",
		pointgroup_schoenflies: "4/mmm",
		international_short: "P4_2/mbc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 135,
		choice: "",
		international_full: "P 4_2/m 2_1/b 2/c",
		hall_symbol: "-P 4c 2ab",
		international: "P 4_2/m b c",
		arithmetic_crystal_class_number: 36,
		arithmetic_crystal_class_symbol: "4/mmmP"
	},
		"419": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^14",
		pointgroup_schoenflies: "4/mmm",
		international_short: "P4_2/mnm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 136,
		choice: "",
		international_full: "P 4_2/m 2_1/n 2/m",
		hall_symbol: "-P 4n 2n",
		international: "P 4_2/m n m",
		arithmetic_crystal_class_number: 36,
		arithmetic_crystal_class_symbol: "4/mmmP"
	},
		"420": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^15",
		pointgroup_schoenflies: "4/mmm",
		international_short: "P4_2/nmc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 137,
		choice: "1",
		international_full: "P 4_2/n 2_1/m 2/c",
		hall_symbol: "P 4n 2n -1n",
		international: "P 4_2/n m c",
		arithmetic_crystal_class_number: 36,
		arithmetic_crystal_class_symbol: "4/mmmP"
	},
		"421": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^15",
		pointgroup_schoenflies: "4/mmm",
		international_short: "P4_2/nmc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 137,
		choice: "2",
		international_full: "P 4_2/n 2_1/m 2/c",
		hall_symbol: "-P 4ac 2a",
		international: "P 4_2/n m c",
		arithmetic_crystal_class_number: 36,
		arithmetic_crystal_class_symbol: "4/mmmP"
	},
		"422": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^16",
		pointgroup_schoenflies: "4/mmm",
		international_short: "P4_2/ncm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 138,
		choice: "1",
		international_full: "P 4_2/n 2_1/c 2/m",
		hall_symbol: "P 4n 2ab -1n",
		international: "P 4_2/n c m",
		arithmetic_crystal_class_number: 36,
		arithmetic_crystal_class_symbol: "4/mmmP"
	},
		"423": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^16",
		pointgroup_schoenflies: "4/mmm",
		international_short: "P4_2/ncm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 138,
		choice: "2",
		international_full: "P 4_2/n 2_1/c 2/m",
		hall_symbol: "-P 4ac 2ac",
		international: "P 4_2/n c m",
		arithmetic_crystal_class_number: 36,
		arithmetic_crystal_class_symbol: "4/mmmP"
	},
		"424": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^17",
		pointgroup_schoenflies: "4/mmm",
		international_short: "I4/mmm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 139,
		choice: "",
		international_full: "I 4/m 2/m 2/m",
		hall_symbol: "-I 4 2",
		international: "I 4/m m m",
		arithmetic_crystal_class_number: 37,
		arithmetic_crystal_class_symbol: "4/mmmI"
	},
		"425": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^18",
		pointgroup_schoenflies: "4/mmm",
		international_short: "I4/mcm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 140,
		choice: "",
		international_full: "I 4/m 2/c 2/m",
		hall_symbol: "-I 4 2c",
		international: "I 4/m c m",
		arithmetic_crystal_class_number: 37,
		arithmetic_crystal_class_symbol: "4/mmmI"
	},
		"426": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^19",
		pointgroup_schoenflies: "4/mmm",
		international_short: "I4_1/amd",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.25
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0,
				0.5,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.25
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.25
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.25
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 141,
		choice: "1",
		international_full: "I 4_1/a 2/m 2/d",
		hall_symbol: "I 4bw 2bw -1bw",
		international: "I 4_1/a m d",
		arithmetic_crystal_class_number: 37,
		arithmetic_crystal_class_symbol: "4/mmmI"
	},
		"427": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^19",
		pointgroup_schoenflies: "4/mmm",
		international_short: "I4_1/amd",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.75,
				0.25,
				0.75
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 141,
		choice: "2",
		international_full: "I 4_1/a 2/m 2/d",
		hall_symbol: "-I 4bd 2",
		international: "I 4_1/a m d",
		arithmetic_crystal_class_number: 37,
		arithmetic_crystal_class_symbol: "4/mmmI"
	},
		"428": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^20",
		pointgroup_schoenflies: "4/mmm",
		international_short: "I4_1/acd",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.25
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0.5,
				0,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.75
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.25
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.75
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.25
			],
			[
				0,
				0.5,
				0.75
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.75
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.25
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 142,
		choice: "1",
		international_full: "I 4_1/a 2/c 2/d",
		hall_symbol: "I 4bw 2aw -1bw",
		international: "I 4_1/a c d",
		arithmetic_crystal_class_number: 37,
		arithmetic_crystal_class_symbol: "4/mmmI"
	},
		"429": {
		pointgroup_international: "D4h",
		schoenflies: "D4h^20",
		pointgroup_schoenflies: "4/mmm",
		international_short: "I4_1/acd",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0.75,
				0.25,
				0.25
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 142,
		choice: "2",
		international_full: "I 4_1/a 2/c 2/d",
		hall_symbol: "-I 4bd 2c",
		international: "I 4_1/a c d",
		arithmetic_crystal_class_number: 37,
		arithmetic_crystal_class_symbol: "4/mmmI"
	},
		"430": {
		pointgroup_international: "C3",
		schoenflies: "C3^1",
		pointgroup_schoenflies: "3",
		international_short: "P3",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 143,
		choice: "",
		international_full: "P 3",
		hall_symbol: "P 3",
		international: "P 3",
		arithmetic_crystal_class_number: 38,
		arithmetic_crystal_class_symbol: "3P"
	},
		"431": {
		pointgroup_international: "C3",
		schoenflies: "C3^2",
		pointgroup_schoenflies: "3",
		international_short: "P3_1",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.3333333333333333
			],
			[
				0,
				0,
				0.6666666666666666
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 144,
		choice: "",
		international_full: "P 3_1",
		hall_symbol: "P 31",
		international: "P 3_1",
		arithmetic_crystal_class_number: 38,
		arithmetic_crystal_class_symbol: "3P"
	},
		"432": {
		pointgroup_international: "C3",
		schoenflies: "C3^3",
		pointgroup_schoenflies: "3",
		international_short: "P3_2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.6666666666666666
			],
			[
				0,
				0,
				0.3333333333333333
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 145,
		choice: "",
		international_full: "P 3_2",
		hall_symbol: "P 32",
		international: "P 3_2",
		arithmetic_crystal_class_number: 38,
		arithmetic_crystal_class_symbol: "3P"
	},
		"433": {
		pointgroup_international: "C3",
		schoenflies: "C3^4",
		pointgroup_schoenflies: "3",
		international_short: "R3",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 146,
		choice: "H",
		international_full: "R 3",
		hall_symbol: "R 3",
		international: "R 3",
		arithmetic_crystal_class_number: 39,
		arithmetic_crystal_class_symbol: "3R"
	},
		"434": {
		pointgroup_international: "C3",
		schoenflies: "C3^4",
		pointgroup_schoenflies: "3",
		international_short: "R3",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			]
		],
		number: 146,
		choice: "R",
		international_full: "R 3",
		hall_symbol: "P 3*",
		international: "R 3",
		arithmetic_crystal_class_number: 39,
		arithmetic_crystal_class_symbol: "3R"
	},
		"435": {
		pointgroup_international: "C3i",
		schoenflies: "C3i^1",
		pointgroup_schoenflies: "-3",
		international_short: "P-3",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 147,
		choice: "",
		international_full: "P -3",
		hall_symbol: "-P 3",
		international: "P -3",
		arithmetic_crystal_class_number: 40,
		arithmetic_crystal_class_symbol: "-3P"
	},
		"436": {
		pointgroup_international: "C3i",
		schoenflies: "C3i^2",
		pointgroup_schoenflies: "-3",
		international_short: "R-3",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 148,
		choice: "H",
		international_full: "R -3",
		hall_symbol: "-R 3",
		international: "R -3",
		arithmetic_crystal_class_number: 41,
		arithmetic_crystal_class_symbol: "-3R"
	},
		"437": {
		pointgroup_international: "C3i",
		schoenflies: "C3i^2",
		pointgroup_schoenflies: "-3",
		international_short: "R-3",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			]
		],
		number: 148,
		choice: "R",
		international_full: "R -3",
		hall_symbol: "-P 3*",
		international: "R -3",
		arithmetic_crystal_class_number: 41,
		arithmetic_crystal_class_symbol: "-3R"
	},
		"438": {
		pointgroup_international: "D3",
		schoenflies: "D3^1",
		pointgroup_schoenflies: "32",
		international_short: "P312",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 149,
		choice: "",
		international_full: "P 3 1 2",
		hall_symbol: "P 3 2",
		international: "P 3 1 2",
		arithmetic_crystal_class_number: 42,
		arithmetic_crystal_class_symbol: "312P"
	},
		"439": {
		pointgroup_international: "D3",
		schoenflies: "D3^2",
		pointgroup_schoenflies: "32",
		international_short: "P321",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 150,
		choice: "",
		international_full: "P 3 2 1",
		hall_symbol: "P 3 2\"",
		international: "P 3 2 1",
		arithmetic_crystal_class_number: 43,
		arithmetic_crystal_class_symbol: "321P"
	},
		"440": {
		pointgroup_international: "D3",
		schoenflies: "D3^3",
		pointgroup_schoenflies: "32",
		international_short: "P3_112",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.3333333333333333
			],
			[
				0,
				0,
				0.6666666666666666
			],
			[
				0,
				0,
				0.6666666666666666
			],
			[
				0,
				0,
				0.3333333333333333
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 151,
		choice: "",
		international_full: "P 3_1 1 2",
		hall_symbol: "P 31 2c (0 0 1)",
		international: "P 3_1 1 2",
		arithmetic_crystal_class_number: 42,
		arithmetic_crystal_class_symbol: "312P"
	},
		"441": {
		pointgroup_international: "D3",
		schoenflies: "D3^4",
		pointgroup_schoenflies: "32",
		international_short: "P3_121",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.3333333333333333
			],
			[
				0,
				0,
				0.6666666666666666
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.6666666666666666
			],
			[
				0,
				0,
				0.3333333333333333
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 152,
		choice: "",
		international_full: "P 3_1 2 1",
		hall_symbol: "P 31 2\"",
		international: "P 3_1 2 1",
		arithmetic_crystal_class_number: 43,
		arithmetic_crystal_class_symbol: "321P"
	},
		"442": {
		pointgroup_international: "D3",
		schoenflies: "D3^5",
		pointgroup_schoenflies: "32",
		international_short: "P3_212",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.6666666666666666
			],
			[
				0,
				0,
				0.3333333333333333
			],
			[
				0,
				0,
				0.3333333333333333
			],
			[
				0,
				0,
				0.6666666666666666
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 153,
		choice: "",
		international_full: "P 3_2 1 2",
		hall_symbol: "P 32 2c (0 0 -1)",
		international: "P 3_2 1 2",
		arithmetic_crystal_class_number: 42,
		arithmetic_crystal_class_symbol: "312P"
	},
		"443": {
		pointgroup_international: "D3",
		schoenflies: "D3^6",
		pointgroup_schoenflies: "32",
		international_short: "P3_221",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.6666666666666666
			],
			[
				0,
				0,
				0.3333333333333333
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.3333333333333333
			],
			[
				0,
				0,
				0.6666666666666666
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 154,
		choice: "",
		international_full: "P 3_2 2 1",
		hall_symbol: "P 32 2\"",
		international: "P 3_2 2 1",
		arithmetic_crystal_class_number: 43,
		arithmetic_crystal_class_symbol: "321P"
	},
		"444": {
		pointgroup_international: "D3",
		schoenflies: "D3^7",
		pointgroup_schoenflies: "32",
		international_short: "R32",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 155,
		choice: "H",
		international_full: "R 3 2",
		hall_symbol: "R 3 2\"",
		international: "R 3 2",
		arithmetic_crystal_class_number: 44,
		arithmetic_crystal_class_symbol: "32R"
	},
		"445": {
		pointgroup_international: "D3",
		schoenflies: "D3^7",
		pointgroup_schoenflies: "32",
		international_short: "R32",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			]
		],
		number: 155,
		choice: "R",
		international_full: "R 3 2",
		hall_symbol: "P 3* 2",
		international: "R 3 2",
		arithmetic_crystal_class_number: 44,
		arithmetic_crystal_class_symbol: "32R"
	},
		"446": {
		pointgroup_international: "C3v",
		schoenflies: "C3v^1",
		pointgroup_schoenflies: "3m",
		international_short: "P3m1",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 156,
		choice: "",
		international_full: "P 3 m 1",
		hall_symbol: "P 3 -2\"",
		international: "P 3 m 1",
		arithmetic_crystal_class_number: 45,
		arithmetic_crystal_class_symbol: "3m1P"
	},
		"447": {
		pointgroup_international: "C3v",
		schoenflies: "C3v^2",
		pointgroup_schoenflies: "3m",
		international_short: "P31m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 157,
		choice: "",
		international_full: "P 3 1 m",
		hall_symbol: "P 3 -2",
		international: "P 3 1 m",
		arithmetic_crystal_class_number: 46,
		arithmetic_crystal_class_symbol: "31mP"
	},
		"448": {
		pointgroup_international: "C3v",
		schoenflies: "C3v^3",
		pointgroup_schoenflies: "3m",
		international_short: "P3c1",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 158,
		choice: "",
		international_full: "P 3 c 1",
		hall_symbol: "P 3 -2\"c",
		international: "P 3 c 1",
		arithmetic_crystal_class_number: 45,
		arithmetic_crystal_class_symbol: "3m1P"
	},
		"449": {
		pointgroup_international: "C3v",
		schoenflies: "C3v^4",
		pointgroup_schoenflies: "3m",
		international_short: "P31c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 159,
		choice: "",
		international_full: "P 3 1 c",
		hall_symbol: "P 3 -2c",
		international: "P 3 1 c",
		arithmetic_crystal_class_number: 46,
		arithmetic_crystal_class_symbol: "31mP"
	},
		"450": {
		pointgroup_international: "C3v",
		schoenflies: "C3v^5",
		pointgroup_schoenflies: "3m",
		international_short: "R3m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 160,
		choice: "H",
		international_full: "R 3 m",
		hall_symbol: "R 3 -2\"",
		international: "R 3 m",
		arithmetic_crystal_class_number: 47,
		arithmetic_crystal_class_symbol: "3mR"
	},
		"451": {
		pointgroup_international: "C3v",
		schoenflies: "C3v^5",
		pointgroup_schoenflies: "3m",
		international_short: "R3m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			]
		],
		number: 160,
		choice: "R",
		international_full: "R 3 m",
		hall_symbol: "P 3* -2",
		international: "R 3 m",
		arithmetic_crystal_class_number: 47,
		arithmetic_crystal_class_symbol: "3mR"
	},
		"452": {
		pointgroup_international: "C3v",
		schoenflies: "C3v^6",
		pointgroup_schoenflies: "3m",
		international_short: "R3c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.8333333333333334
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.8333333333333334
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.8333333333333334
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.16666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.16666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.16666666666666666
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 161,
		choice: "H",
		international_full: "R 3 c",
		hall_symbol: "R 3 -2\"c",
		international: "R 3 c",
		arithmetic_crystal_class_number: 47,
		arithmetic_crystal_class_symbol: "3mR"
	},
		"453": {
		pointgroup_international: "C3v",
		schoenflies: "C3v^6",
		pointgroup_schoenflies: "3m",
		international_short: "R3c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			]
		],
		number: 161,
		choice: "R",
		international_full: "R 3 c",
		hall_symbol: "P 3* -2n",
		international: "R 3 c",
		arithmetic_crystal_class_number: 47,
		arithmetic_crystal_class_symbol: "3mR"
	},
		"454": {
		pointgroup_international: "D3d",
		schoenflies: "D3d^1",
		pointgroup_schoenflies: "-3m",
		international_short: "P-31m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 162,
		choice: "",
		international_full: "P -3 1 2/m",
		hall_symbol: "-P 3 2",
		international: "P -3 1 m",
		arithmetic_crystal_class_number: 48,
		arithmetic_crystal_class_symbol: "-31mP"
	},
		"455": {
		pointgroup_international: "D3d",
		schoenflies: "D3d^2",
		pointgroup_schoenflies: "-3m",
		international_short: "P-31c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 163,
		choice: "",
		international_full: "P -3 1 2/c",
		hall_symbol: "-P 3 2c",
		international: "P -3 1 c",
		arithmetic_crystal_class_number: 48,
		arithmetic_crystal_class_symbol: "-31mP"
	},
		"456": {
		pointgroup_international: "D3d",
		schoenflies: "D3d^3",
		pointgroup_schoenflies: "-3m",
		international_short: "P-3m1",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 164,
		choice: "",
		international_full: "P -3 2/m 1",
		hall_symbol: "-P 3 2\"",
		international: "P -3 m 1",
		arithmetic_crystal_class_number: 49,
		arithmetic_crystal_class_symbol: "-3m1P"
	},
		"457": {
		pointgroup_international: "D3d",
		schoenflies: "D3d^4",
		pointgroup_schoenflies: "-3m",
		international_short: "P-3c1",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 165,
		choice: "",
		international_full: "P -3 2/c 1",
		hall_symbol: "-P 3 2\"c",
		international: "P -3 c 1",
		arithmetic_crystal_class_number: 49,
		arithmetic_crystal_class_symbol: "-3m1P"
	},
		"458": {
		pointgroup_international: "D3d",
		schoenflies: "D3d^5",
		pointgroup_schoenflies: "-3m",
		international_short: "R-3m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 166,
		choice: "H",
		international_full: "R -3 2/m",
		hall_symbol: "-R 3 2\"",
		international: "R -3 m",
		arithmetic_crystal_class_number: 50,
		arithmetic_crystal_class_symbol: "-3mR"
	},
		"459": {
		pointgroup_international: "D3d",
		schoenflies: "D3d^5",
		pointgroup_schoenflies: "-3m",
		international_short: "R-3m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			]
		],
		number: 166,
		choice: "R",
		international_full: "R -3 2/m",
		hall_symbol: "-P 3* 2",
		international: "R -3 m",
		arithmetic_crystal_class_number: 50,
		arithmetic_crystal_class_symbol: "-3mR"
	},
		"460": {
		pointgroup_international: "D3d",
		schoenflies: "D3d^6",
		pointgroup_schoenflies: "-3m",
		international_short: "R-3c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.3333333333333333
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.8333333333333334
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.8333333333333334
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.8333333333333334
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.8333333333333334
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.8333333333333334
			],
			[
				0.6666666666666666,
				0.3333333333333333,
				0.8333333333333334
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.6666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.16666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.16666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.16666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.16666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.16666666666666666
			],
			[
				0.3333333333333333,
				0.6666666666666666,
				0.16666666666666666
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 167,
		choice: "H",
		international_full: "R -3 2/c",
		hall_symbol: "-R 3 2\"c",
		international: "R -3 c",
		arithmetic_crystal_class_number: 50,
		arithmetic_crystal_class_symbol: "-3mR"
	},
		"461": {
		pointgroup_international: "D3d",
		schoenflies: "D3d^6",
		pointgroup_schoenflies: "-3m",
		international_short: "R-3c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			]
		],
		number: 167,
		choice: "R",
		international_full: "R -3 2/c",
		hall_symbol: "-P 3* 2n",
		international: "R -3 c",
		arithmetic_crystal_class_number: 50,
		arithmetic_crystal_class_symbol: "-3mR"
	},
		"462": {
		pointgroup_international: "C6",
		schoenflies: "C6^1",
		pointgroup_schoenflies: "6",
		international_short: "P6",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 168,
		choice: "",
		international_full: "P 6",
		hall_symbol: "P 6",
		international: "P 6",
		arithmetic_crystal_class_number: 51,
		arithmetic_crystal_class_symbol: "6P"
	},
		"463": {
		pointgroup_international: "C6",
		schoenflies: "C6^2",
		pointgroup_schoenflies: "6",
		international_short: "P6_1",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.16666666666666666
			],
			[
				0,
				0,
				0.3333333333333333
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.6666666666666666
			],
			[
				0,
				0,
				0.8333333333333334
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 169,
		choice: "",
		international_full: "P 6_1",
		hall_symbol: "P 61",
		international: "P 6_1",
		arithmetic_crystal_class_number: 51,
		arithmetic_crystal_class_symbol: "6P"
	},
		"464": {
		pointgroup_international: "C6",
		schoenflies: "C6^3",
		pointgroup_schoenflies: "6",
		international_short: "P6_5",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.8333333333333334
			],
			[
				0,
				0,
				0.6666666666666666
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.3333333333333333
			],
			[
				0,
				0,
				0.16666666666666666
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 170,
		choice: "",
		international_full: "P 6_5",
		hall_symbol: "P 65",
		international: "P 6_5",
		arithmetic_crystal_class_number: 51,
		arithmetic_crystal_class_symbol: "6P"
	},
		"465": {
		pointgroup_international: "C6",
		schoenflies: "C6^4",
		pointgroup_schoenflies: "6",
		international_short: "P6_2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.3333333333333333
			],
			[
				0,
				0,
				0.6666666666666666
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.3333333333333333
			],
			[
				0,
				0,
				0.6666666666666666
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 171,
		choice: "",
		international_full: "P 6_2",
		hall_symbol: "P 62",
		international: "P 6_2",
		arithmetic_crystal_class_number: 51,
		arithmetic_crystal_class_symbol: "6P"
	},
		"466": {
		pointgroup_international: "C6",
		schoenflies: "C6^5",
		pointgroup_schoenflies: "6",
		international_short: "P6_4",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.6666666666666666
			],
			[
				0,
				0,
				0.3333333333333333
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.6666666666666666
			],
			[
				0,
				0,
				0.3333333333333333
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 172,
		choice: "",
		international_full: "P 6_4",
		hall_symbol: "P 64",
		international: "P 6_4",
		arithmetic_crystal_class_number: 51,
		arithmetic_crystal_class_symbol: "6P"
	},
		"467": {
		pointgroup_international: "C6",
		schoenflies: "C6^6",
		pointgroup_schoenflies: "6",
		international_short: "P6_3",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 173,
		choice: "",
		international_full: "P 6_3",
		hall_symbol: "P 6c",
		international: "P 6_3",
		arithmetic_crystal_class_number: 51,
		arithmetic_crystal_class_symbol: "6P"
	},
		"468": {
		pointgroup_international: "C3h",
		schoenflies: "C3h^1",
		pointgroup_schoenflies: "-6",
		international_short: "P-6",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 174,
		choice: "",
		international_full: "P -6",
		hall_symbol: "P -6",
		international: "P -6",
		arithmetic_crystal_class_number: 52,
		arithmetic_crystal_class_symbol: "-6P"
	},
		"469": {
		pointgroup_international: "C6h",
		schoenflies: "C6h^1",
		pointgroup_schoenflies: "6/m",
		international_short: "P6/m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 175,
		choice: "",
		international_full: "P 6/m",
		hall_symbol: "-P 6",
		international: "P 6/m",
		arithmetic_crystal_class_number: 53,
		arithmetic_crystal_class_symbol: "6/mP"
	},
		"470": {
		pointgroup_international: "C6h",
		schoenflies: "C6h^2",
		pointgroup_schoenflies: "6/m",
		international_short: "P6_3/m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 176,
		choice: "",
		international_full: "P 6_3/m",
		hall_symbol: "-P 6c",
		international: "P 6_3/m",
		arithmetic_crystal_class_number: 53,
		arithmetic_crystal_class_symbol: "6/mP"
	},
		"471": {
		pointgroup_international: "D6",
		schoenflies: "D6^1",
		pointgroup_schoenflies: "622",
		international_short: "P622",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 177,
		choice: "",
		international_full: "P 6 2 2",
		hall_symbol: "P 6 2",
		international: "P 6 2 2",
		arithmetic_crystal_class_number: 54,
		arithmetic_crystal_class_symbol: "622P"
	},
		"472": {
		pointgroup_international: "D6",
		schoenflies: "D6^2",
		pointgroup_schoenflies: "622",
		international_short: "P6_122",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.16666666666666666
			],
			[
				0,
				0,
				0.3333333333333333
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.6666666666666666
			],
			[
				0,
				0,
				0.8333333333333334
			],
			[
				0,
				0,
				0.8333333333333334
			],
			[
				0,
				0,
				0.6666666666666666
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.3333333333333333
			],
			[
				0,
				0,
				0.16666666666666666
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 178,
		choice: "",
		international_full: "P 6_1 2 2",
		hall_symbol: "P 61 2 (0 0 -1)",
		international: "P 6_1 2 2",
		arithmetic_crystal_class_number: 54,
		arithmetic_crystal_class_symbol: "622P"
	},
		"473": {
		pointgroup_international: "D6",
		schoenflies: "D6^3",
		pointgroup_schoenflies: "622",
		international_short: "P6_522",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.8333333333333334
			],
			[
				0,
				0,
				0.6666666666666666
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.3333333333333333
			],
			[
				0,
				0,
				0.16666666666666666
			],
			[
				0,
				0,
				0.16666666666666666
			],
			[
				0,
				0,
				0.3333333333333333
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.6666666666666666
			],
			[
				0,
				0,
				0.8333333333333334
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 179,
		choice: "",
		international_full: "P 6_5 2 2",
		hall_symbol: "P 65 2 (0 0 1)",
		international: "P 6_5 2 2",
		arithmetic_crystal_class_number: 54,
		arithmetic_crystal_class_symbol: "622P"
	},
		"474": {
		pointgroup_international: "D6",
		schoenflies: "D6^4",
		pointgroup_schoenflies: "622",
		international_short: "P6_222",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.3333333333333333
			],
			[
				0,
				0,
				0.6666666666666666
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.3333333333333333
			],
			[
				0,
				0,
				0.6666666666666666
			],
			[
				0,
				0,
				0.6666666666666666
			],
			[
				0,
				0,
				0.3333333333333333
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.6666666666666666
			],
			[
				0,
				0,
				0.3333333333333333
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 180,
		choice: "",
		international_full: "P 6_2 2 2",
		hall_symbol: "P 62 2c (0 0 1)",
		international: "P 6_2 2 2",
		arithmetic_crystal_class_number: 54,
		arithmetic_crystal_class_symbol: "622P"
	},
		"475": {
		pointgroup_international: "D6",
		schoenflies: "D6^5",
		pointgroup_schoenflies: "622",
		international_short: "P6_422",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.6666666666666666
			],
			[
				0,
				0,
				0.3333333333333333
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.6666666666666666
			],
			[
				0,
				0,
				0.3333333333333333
			],
			[
				0,
				0,
				0.3333333333333333
			],
			[
				0,
				0,
				0.6666666666666666
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.3333333333333333
			],
			[
				0,
				0,
				0.6666666666666666
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 181,
		choice: "",
		international_full: "P 6_4 2 2",
		hall_symbol: "P 64 2c (0 0 -1)",
		international: "P 6_4 2 2",
		arithmetic_crystal_class_number: 54,
		arithmetic_crystal_class_symbol: "622P"
	},
		"476": {
		pointgroup_international: "D6",
		schoenflies: "D6^6",
		pointgroup_schoenflies: "622",
		international_short: "P6_322",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 182,
		choice: "",
		international_full: "P 6_3 2 2",
		hall_symbol: "P 6c 2c",
		international: "P 6_3 2 2",
		arithmetic_crystal_class_number: 54,
		arithmetic_crystal_class_symbol: "622P"
	},
		"477": {
		pointgroup_international: "C6v",
		schoenflies: "C6v^1",
		pointgroup_schoenflies: "6mm",
		international_short: "P6mm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 183,
		choice: "",
		international_full: "P 6 m m",
		hall_symbol: "P 6 -2",
		international: "P 6 m m",
		arithmetic_crystal_class_number: 55,
		arithmetic_crystal_class_symbol: "6mmP"
	},
		"478": {
		pointgroup_international: "C6v",
		schoenflies: "C6v^2",
		pointgroup_schoenflies: "6mm",
		international_short: "P6cc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 184,
		choice: "",
		international_full: "P 6 c c",
		hall_symbol: "P 6 -2c",
		international: "P 6 c c",
		arithmetic_crystal_class_number: 55,
		arithmetic_crystal_class_symbol: "6mmP"
	},
		"479": {
		pointgroup_international: "C6v",
		schoenflies: "C6v^3",
		pointgroup_schoenflies: "6mm",
		international_short: "P6_3cm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 185,
		choice: "",
		international_full: "P 6_3 c m",
		hall_symbol: "P 6c -2",
		international: "P 6_3 c m",
		arithmetic_crystal_class_number: 55,
		arithmetic_crystal_class_symbol: "6mmP"
	},
		"480": {
		pointgroup_international: "C6v",
		schoenflies: "C6v^4",
		pointgroup_schoenflies: "6mm",
		international_short: "P6_3mc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 186,
		choice: "",
		international_full: "P 6_3 m c",
		hall_symbol: "P 6c -2c",
		international: "P 6_3 m c",
		arithmetic_crystal_class_number: 55,
		arithmetic_crystal_class_symbol: "6mmP"
	},
		"481": {
		pointgroup_international: "D3h",
		schoenflies: "D3h^1",
		pointgroup_schoenflies: "-6m2",
		international_short: "P-6m2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 187,
		choice: "",
		international_full: "P -6 m 2",
		hall_symbol: "P -6 2",
		international: "P -6 m 2",
		arithmetic_crystal_class_number: 56,
		arithmetic_crystal_class_symbol: "-62mP"
	},
		"482": {
		pointgroup_international: "D3h",
		schoenflies: "D3h^2",
		pointgroup_schoenflies: "-6m2",
		international_short: "P-6c2",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 188,
		choice: "",
		international_full: "P -6 c 2",
		hall_symbol: "P -6c 2",
		international: "P -6 c 2",
		arithmetic_crystal_class_number: 56,
		arithmetic_crystal_class_symbol: "-62mP"
	},
		"483": {
		pointgroup_international: "D3h",
		schoenflies: "D3h^3",
		pointgroup_schoenflies: "-6m2",
		international_short: "P-62m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 189,
		choice: "",
		international_full: "P -6 2 m",
		hall_symbol: "P -6 -2",
		international: "P -6 2 m",
		arithmetic_crystal_class_number: 57,
		arithmetic_crystal_class_symbol: "-6m2P"
	},
		"484": {
		pointgroup_international: "D3h",
		schoenflies: "D3h^4",
		pointgroup_schoenflies: "-6m2",
		international_short: "P-62c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			]
		],
		number: 190,
		choice: "",
		international_full: "P -6 2 c",
		hall_symbol: "P -6c -2c",
		international: "P -6 2 c",
		arithmetic_crystal_class_number: 57,
		arithmetic_crystal_class_symbol: "-6m2P"
	},
		"485": {
		pointgroup_international: "D6h",
		schoenflies: "D6h^1",
		pointgroup_schoenflies: "6/mmm",
		international_short: "P6/mmm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 191,
		choice: "",
		international_full: "P 6/m 2/m 2/m",
		hall_symbol: "-P 6 2",
		international: "P 6/m m m",
		arithmetic_crystal_class_number: 58,
		arithmetic_crystal_class_symbol: "6/mmm"
	},
		"486": {
		pointgroup_international: "D6h",
		schoenflies: "D6h^2",
		pointgroup_schoenflies: "6/mmm",
		international_short: "P6/mcc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 192,
		choice: "",
		international_full: "P 6/m 2/c 2/c",
		hall_symbol: "-P 6 2c",
		international: "P 6/m c c",
		arithmetic_crystal_class_number: 58,
		arithmetic_crystal_class_symbol: "6/mmm"
	},
		"487": {
		pointgroup_international: "D6h",
		schoenflies: "D6h^3",
		pointgroup_schoenflies: "6/mmm",
		international_short: "P6_3/mcm",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 193,
		choice: "",
		international_full: "P 6_3/m 2/c 2/m",
		hall_symbol: "-P 6c 2",
		international: "P 6_3/m c m",
		arithmetic_crystal_class_number: 58,
		arithmetic_crystal_class_symbol: "6/mmm"
	},
		"488": {
		pointgroup_international: "D6h",
		schoenflies: "D6h^4",
		pointgroup_schoenflies: "6/mmm",
		international_short: "P6_3/mmc",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					1,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					-1,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					-1,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					1,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			]
		],
		number: 194,
		choice: "",
		international_full: "P 6_3/m 2/m 2/c",
		hall_symbol: "-P 6c 2c",
		international: "P 6_3/m m c",
		arithmetic_crystal_class_number: 58,
		arithmetic_crystal_class_symbol: "6/mmm"
	},
		"489": {
		pointgroup_international: "T",
		schoenflies: "T^1",
		pointgroup_schoenflies: "23",
		international_short: "P23",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			]
		],
		number: 195,
		choice: "",
		international_full: "P 2 3",
		hall_symbol: "P 2 2 3",
		international: "P 2 3",
		arithmetic_crystal_class_number: 59,
		arithmetic_crystal_class_symbol: "23P"
	},
		"490": {
		pointgroup_international: "T",
		schoenflies: "T^2",
		pointgroup_schoenflies: "23",
		international_short: "F23",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			]
		],
		number: 196,
		choice: "",
		international_full: "F 2 3",
		hall_symbol: "F 2 2 3",
		international: "F 2 3",
		arithmetic_crystal_class_number: 60,
		arithmetic_crystal_class_symbol: "23F"
	},
		"491": {
		pointgroup_international: "T",
		schoenflies: "T^3",
		pointgroup_schoenflies: "23",
		international_short: "I23",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			]
		],
		number: 197,
		choice: "",
		international_full: "I 2 3",
		hall_symbol: "I 2 2 3",
		international: "I 2 3",
		arithmetic_crystal_class_number: 61,
		arithmetic_crystal_class_symbol: "23I"
	},
		"492": {
		pointgroup_international: "T",
		schoenflies: "T^4",
		pointgroup_schoenflies: "23",
		international_short: "P2_13",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			]
		],
		number: 198,
		choice: "",
		international_full: "P 2_1 3",
		hall_symbol: "P 2ac 2ab 3",
		international: "P 2_1 3",
		arithmetic_crystal_class_number: 59,
		arithmetic_crystal_class_symbol: "23P"
	},
		"493": {
		pointgroup_international: "T",
		schoenflies: "T^5",
		pointgroup_schoenflies: "23",
		international_short: "I2_13",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			]
		],
		number: 199,
		choice: "",
		international_full: "I 2_1 3",
		hall_symbol: "I 2b 2c 3",
		international: "I 2_1 3",
		arithmetic_crystal_class_number: 61,
		arithmetic_crystal_class_symbol: "23I"
	},
		"494": {
		pointgroup_international: "Th",
		schoenflies: "Th^1",
		pointgroup_schoenflies: "m-3",
		international_short: "Pm-3",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			]
		],
		number: 200,
		choice: "",
		international_full: "P 2/m -3",
		hall_symbol: "-P 2 2 3",
		international: "P m -3",
		arithmetic_crystal_class_number: 62,
		arithmetic_crystal_class_symbol: "m-3P"
	},
		"495": {
		pointgroup_international: "Th",
		schoenflies: "Th^2",
		pointgroup_schoenflies: "m-3",
		international_short: "Pn-3",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			]
		],
		number: 201,
		choice: "1",
		international_full: "P 2/n -3",
		hall_symbol: "P 2 2 3 -1n",
		international: "P n -3",
		arithmetic_crystal_class_number: 62,
		arithmetic_crystal_class_symbol: "m-3P"
	},
		"496": {
		pointgroup_international: "Th",
		schoenflies: "Th^2",
		pointgroup_schoenflies: "m-3",
		international_short: "Pn-3",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			]
		],
		number: 201,
		choice: "2",
		international_full: "P 2/n -3",
		hall_symbol: "-P 2ab 2bc 3",
		international: "P n -3",
		arithmetic_crystal_class_number: 62,
		arithmetic_crystal_class_symbol: "m-3P"
	},
		"497": {
		pointgroup_international: "Th",
		schoenflies: "Th^3",
		pointgroup_schoenflies: "m-3",
		international_short: "Fm-3",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			]
		],
		number: 202,
		choice: "",
		international_full: "F 2/m -3",
		hall_symbol: "-F 2 2 3",
		international: "F m -3",
		arithmetic_crystal_class_number: 63,
		arithmetic_crystal_class_symbol: "m-3F"
	},
		"498": {
		pointgroup_international: "Th",
		schoenflies: "Th^4",
		pointgroup_schoenflies: "m-3",
		international_short: "Fd-3",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.75,
				0.75,
				0.25
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			]
		],
		number: 203,
		choice: "1",
		international_full: "F 2/d -3",
		hall_symbol: "F 2 2 3 -1d",
		international: "F d -3",
		arithmetic_crystal_class_number: 63,
		arithmetic_crystal_class_symbol: "m-3F"
	},
		"499": {
		pointgroup_international: "Th",
		schoenflies: "Th^4",
		pointgroup_schoenflies: "m-3",
		international_short: "Fd-3",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.25,
				0
			],
			[
				0.25,
				0.25,
				0
			],
			[
				0,
				0.25,
				0.25
			],
			[
				0,
				0.25,
				0.25
			],
			[
				0.25,
				0,
				0.25
			],
			[
				0.25,
				0,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.25,
				0.25
			],
			[
				0,
				0.25,
				0.25
			],
			[
				0.25,
				0,
				0.25
			],
			[
				0.25,
				0,
				0.25
			],
			[
				0.25,
				0.25,
				0
			],
			[
				0.25,
				0.25,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0,
				0.25
			],
			[
				0.25,
				0,
				0.25
			],
			[
				0.25,
				0.25,
				0
			],
			[
				0.25,
				0.25,
				0
			],
			[
				0,
				0.25,
				0.25
			],
			[
				0,
				0.25,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.75,
				0.5
			],
			[
				0.25,
				0.75,
				0.5
			],
			[
				0,
				0.75,
				0.75
			],
			[
				0,
				0.75,
				0.75
			],
			[
				0.25,
				0.5,
				0.75
			],
			[
				0.25,
				0.5,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.75,
				0.75
			],
			[
				0,
				0.75,
				0.75
			],
			[
				0.25,
				0.5,
				0.75
			],
			[
				0.25,
				0.5,
				0.75
			],
			[
				0.25,
				0.75,
				0.5
			],
			[
				0.25,
				0.75,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.5,
				0.75
			],
			[
				0.25,
				0.5,
				0.75
			],
			[
				0.25,
				0.75,
				0.5
			],
			[
				0.25,
				0.75,
				0.5
			],
			[
				0,
				0.75,
				0.75
			],
			[
				0,
				0.75,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.25,
				0.5
			],
			[
				0.75,
				0.25,
				0.5
			],
			[
				0.5,
				0.25,
				0.75
			],
			[
				0.5,
				0.25,
				0.75
			],
			[
				0.75,
				0,
				0.75
			],
			[
				0.75,
				0,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.25,
				0.75
			],
			[
				0.5,
				0.25,
				0.75
			],
			[
				0.75,
				0,
				0.75
			],
			[
				0.75,
				0,
				0.75
			],
			[
				0.75,
				0.25,
				0.5
			],
			[
				0.75,
				0.25,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0,
				0.75
			],
			[
				0.75,
				0,
				0.75
			],
			[
				0.75,
				0.25,
				0.5
			],
			[
				0.75,
				0.25,
				0.5
			],
			[
				0.5,
				0.25,
				0.75
			],
			[
				0.5,
				0.25,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0
			],
			[
				0.75,
				0.75,
				0
			],
			[
				0.5,
				0.75,
				0.25
			],
			[
				0.5,
				0.75,
				0.25
			],
			[
				0.75,
				0.5,
				0.25
			],
			[
				0.75,
				0.5,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.75,
				0.25
			],
			[
				0.5,
				0.75,
				0.25
			],
			[
				0.75,
				0.5,
				0.25
			],
			[
				0.75,
				0.5,
				0.25
			],
			[
				0.75,
				0.75,
				0
			],
			[
				0.75,
				0.75,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.5,
				0.25
			],
			[
				0.75,
				0.5,
				0.25
			],
			[
				0.75,
				0.75,
				0
			],
			[
				0.75,
				0.75,
				0
			],
			[
				0.5,
				0.75,
				0.25
			],
			[
				0.5,
				0.75,
				0.25
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			]
		],
		number: 203,
		choice: "2",
		international_full: "F 2/d -3",
		hall_symbol: "-F 2uv 2vw 3",
		international: "F d -3",
		arithmetic_crystal_class_number: 63,
		arithmetic_crystal_class_symbol: "m-3F"
	},
		"500": {
		pointgroup_international: "Th",
		schoenflies: "Th^5",
		pointgroup_schoenflies: "m-3",
		international_short: "Im-3",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			]
		],
		number: 204,
		choice: "",
		international_full: "I 2/m -3",
		hall_symbol: "-I 2 2 3",
		international: "I m -3",
		arithmetic_crystal_class_number: 64,
		arithmetic_crystal_class_symbol: "m-3I"
	},
		"501": {
		pointgroup_international: "Th",
		schoenflies: "Th^6",
		pointgroup_schoenflies: "m-3",
		international_short: "Pa-3",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			]
		],
		number: 205,
		choice: "",
		international_full: "P 2_1/a -3",
		hall_symbol: "-P 2ac 2ab 3",
		international: "P a -3",
		arithmetic_crystal_class_number: 62,
		arithmetic_crystal_class_symbol: "m-3P"
	},
		"502": {
		pointgroup_international: "Th",
		schoenflies: "Th^7",
		pointgroup_schoenflies: "m-3",
		international_short: "Ia-3",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			]
		],
		number: 206,
		choice: "",
		international_full: "I 2_1/a -3",
		hall_symbol: "-I 2b 2c 3",
		international: "I a -3",
		arithmetic_crystal_class_number: 64,
		arithmetic_crystal_class_symbol: "m-3I"
	},
		"503": {
		pointgroup_international: "O",
		schoenflies: "O^1",
		pointgroup_schoenflies: "432",
		international_short: "P432",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			]
		],
		number: 207,
		choice: "",
		international_full: "P 4 3 2",
		hall_symbol: "P 4 2 3",
		international: "P 4 3 2",
		arithmetic_crystal_class_number: 65,
		arithmetic_crystal_class_symbol: "432P"
	},
		"504": {
		pointgroup_international: "O",
		schoenflies: "O^2",
		pointgroup_schoenflies: "432",
		international_short: "P4_232",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			]
		],
		number: 208,
		choice: "",
		international_full: "P 4_2 3 2",
		hall_symbol: "P 4n 2 3",
		international: "P 4_2 3 2",
		arithmetic_crystal_class_number: 65,
		arithmetic_crystal_class_symbol: "432P"
	},
		"505": {
		pointgroup_international: "O",
		schoenflies: "O^3",
		pointgroup_schoenflies: "432",
		international_short: "F432",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			]
		],
		number: 209,
		choice: "",
		international_full: "F 4 3 2",
		hall_symbol: "F 4 2 3",
		international: "F 4 3 2",
		arithmetic_crystal_class_number: 66,
		arithmetic_crystal_class_symbol: "432F"
	},
		"506": {
		pointgroup_international: "O",
		schoenflies: "O^4",
		pointgroup_schoenflies: "432",
		international_short: "F4_132",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.75,
				0.75
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			]
		],
		number: 210,
		choice: "",
		international_full: "F 4_1 3 2",
		hall_symbol: "F 4d 2 3",
		international: "F 4_1 3 2",
		arithmetic_crystal_class_number: 66,
		arithmetic_crystal_class_symbol: "432F"
	},
		"507": {
		pointgroup_international: "O",
		schoenflies: "O^5",
		pointgroup_schoenflies: "432",
		international_short: "I432",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			]
		],
		number: 211,
		choice: "",
		international_full: "I 4 3 2",
		hall_symbol: "I 4 2 3",
		international: "I 4 3 2",
		arithmetic_crystal_class_number: 67,
		arithmetic_crystal_class_symbol: "432I"
	},
		"508": {
		pointgroup_international: "O",
		schoenflies: "O^6",
		pointgroup_schoenflies: "432",
		international_short: "P4_332",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0.25
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			]
		],
		number: 212,
		choice: "",
		international_full: "P 4_3 3 2",
		hall_symbol: "P 4acd 2ab 3",
		international: "P 4_3 3 2",
		arithmetic_crystal_class_number: 65,
		arithmetic_crystal_class_symbol: "432P"
	},
		"509": {
		pointgroup_international: "O",
		schoenflies: "O^7",
		pointgroup_schoenflies: "432",
		international_short: "P4_132",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.25,
				0.75
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			]
		],
		number: 213,
		choice: "",
		international_full: "P 4_1 3 2",
		hall_symbol: "P 4bd 2ab 3",
		international: "P 4_1 3 2",
		arithmetic_crystal_class_number: 65,
		arithmetic_crystal_class_symbol: "432P"
	},
		"510": {
		pointgroup_international: "O",
		schoenflies: "O^8",
		pointgroup_schoenflies: "432",
		international_short: "I4_132",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0,
				0,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0.5,
				0,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0.5,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0,
				0.5,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0,
				0,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.25,
				0.75
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			]
		],
		number: 214,
		choice: "",
		international_full: "I 4_1 3 2",
		hall_symbol: "I 4bd 2c 3",
		international: "I 4_1 3 2",
		arithmetic_crystal_class_number: 67,
		arithmetic_crystal_class_symbol: "432I"
	},
		"511": {
		pointgroup_international: "Td",
		schoenflies: "Td^1",
		pointgroup_schoenflies: "-43m",
		international_short: "P-43m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			]
		],
		number: 215,
		choice: "",
		international_full: "P -4 3 m",
		hall_symbol: "P -4 2 3",
		international: "P -4 3 m",
		arithmetic_crystal_class_number: 68,
		arithmetic_crystal_class_symbol: "-43mP"
	},
		"512": {
		pointgroup_international: "Td",
		schoenflies: "Td^2",
		pointgroup_schoenflies: "-43m",
		international_short: "F-43m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			]
		],
		number: 216,
		choice: "",
		international_full: "F -4 3 m",
		hall_symbol: "F -4 2 3",
		international: "F -4 3 m",
		arithmetic_crystal_class_number: 69,
		arithmetic_crystal_class_symbol: "-43mF"
	},
		"513": {
		pointgroup_international: "Td",
		schoenflies: "Td^3",
		pointgroup_schoenflies: "-43m",
		international_short: "I-43m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			]
		],
		number: 217,
		choice: "",
		international_full: "I -4 3 m",
		hall_symbol: "I -4 2 3",
		international: "I -4 3 m",
		arithmetic_crystal_class_number: 70,
		arithmetic_crystal_class_symbol: "-43mI"
	},
		"514": {
		pointgroup_international: "Td",
		schoenflies: "Td^4",
		pointgroup_schoenflies: "-43m",
		international_short: "P-43n",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			]
		],
		number: 218,
		choice: "",
		international_full: "P -4 3 n",
		hall_symbol: "P -4n 2 3",
		international: "P -4 3 n",
		arithmetic_crystal_class_number: 68,
		arithmetic_crystal_class_symbol: "-43mP"
	},
		"515": {
		pointgroup_international: "Td",
		schoenflies: "Td^5",
		pointgroup_schoenflies: "-43m",
		international_short: "F-43c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			]
		],
		number: 219,
		choice: "",
		international_full: "F -4 3 c",
		hall_symbol: "F -4c 2 3",
		international: "F -4 3 c",
		arithmetic_crystal_class_number: 69,
		arithmetic_crystal_class_symbol: "-43mF"
	},
		"516": {
		pointgroup_international: "Td",
		schoenflies: "Td^6",
		pointgroup_schoenflies: "-43m",
		international_short: "I-43d",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0,
				0,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0,
				0,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0.5,
				0,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0.5,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0.5,
				0,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0,
				0.5,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0,
				0,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			]
		],
		number: 220,
		choice: "",
		international_full: "I -4 3 d",
		hall_symbol: "I -4bd 2c 3",
		international: "I -4 3 d",
		arithmetic_crystal_class_number: 70,
		arithmetic_crystal_class_symbol: "-43mI"
	},
		"517": {
		pointgroup_international: "Oh",
		schoenflies: "Oh^1",
		pointgroup_schoenflies: "m-3m",
		international_short: "Pm-3m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			]
		],
		number: 221,
		choice: "",
		international_full: "P 4/m -3 2/m",
		hall_symbol: "-P 4 2 3",
		international: "P m -3 m",
		arithmetic_crystal_class_number: 71,
		arithmetic_crystal_class_symbol: "m-3mP"
	},
		"518": {
		pointgroup_international: "Oh",
		schoenflies: "Oh^2",
		pointgroup_schoenflies: "m-3m",
		international_short: "Pn-3n",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			]
		],
		number: 222,
		choice: "1",
		international_full: "P 4/n -3 2/n",
		hall_symbol: "P 4 2 3 -1n",
		international: "P n -3 n",
		arithmetic_crystal_class_number: 71,
		arithmetic_crystal_class_symbol: "m-3mP"
	},
		"519": {
		pointgroup_international: "Oh",
		schoenflies: "Oh^2",
		pointgroup_schoenflies: "m-3m",
		international_short: "Pn-3n",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			]
		],
		number: 222,
		choice: "2",
		international_full: "P 4/n -3 2/n",
		hall_symbol: "-P 4a 2bc 3",
		international: "P n -3 n",
		arithmetic_crystal_class_number: 71,
		arithmetic_crystal_class_symbol: "m-3mP"
	},
		"520": {
		pointgroup_international: "Oh",
		schoenflies: "Oh^3",
		pointgroup_schoenflies: "m-3m",
		international_short: "Pm-3n",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			]
		],
		number: 223,
		choice: "",
		international_full: "P 4_2/m -3 2/n",
		hall_symbol: "-P 4n 2 3",
		international: "P m -3 n",
		arithmetic_crystal_class_number: 71,
		arithmetic_crystal_class_symbol: "m-3mP"
	},
		"521": {
		pointgroup_international: "Oh",
		schoenflies: "Oh^4",
		pointgroup_schoenflies: "m-3m",
		international_short: "Pn-3m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			]
		],
		number: 224,
		choice: "1",
		international_full: "P 4_2/n -3 2/m",
		hall_symbol: "P 4n 2 3 -1n",
		international: "P n -3 m",
		arithmetic_crystal_class_number: 71,
		arithmetic_crystal_class_symbol: "m-3mP"
	},
		"522": {
		pointgroup_international: "Oh",
		schoenflies: "Oh^4",
		pointgroup_schoenflies: "m-3m",
		international_short: "Pn-3m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			]
		],
		number: 224,
		choice: "2",
		international_full: "P 4_2/n -3 2/m",
		hall_symbol: "-P 4bc 2bc 3",
		international: "P n -3 m",
		arithmetic_crystal_class_number: 71,
		arithmetic_crystal_class_symbol: "m-3mP"
	},
		"523": {
		pointgroup_international: "Oh",
		schoenflies: "Oh^5",
		pointgroup_schoenflies: "m-3m",
		international_short: "Fm-3m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			]
		],
		number: 225,
		choice: "",
		international_full: "F 4/m -3 2/m",
		hall_symbol: "-F 4 2 3",
		international: "F m -3 m",
		arithmetic_crystal_class_number: 72,
		arithmetic_crystal_class_symbol: "m-3mF"
	},
		"524": {
		pointgroup_international: "Oh",
		schoenflies: "Oh^6",
		pointgroup_schoenflies: "m-3m",
		international_short: "Fm-3c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			]
		],
		number: 226,
		choice: "",
		international_full: "F 4/m -3 2/c",
		hall_symbol: "-F 4c 2 3",
		international: "F m -3 c",
		arithmetic_crystal_class_number: 72,
		arithmetic_crystal_class_symbol: "m-3mF"
	},
		"525": {
		pointgroup_international: "Oh",
		schoenflies: "Oh^7",
		pointgroup_schoenflies: "m-3m",
		international_short: "Fd-3m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			]
		],
		number: 227,
		choice: "1",
		international_full: "F 4_1/d -3 2/m",
		hall_symbol: "F 4d 2 3 -1d",
		international: "F d -3 m",
		arithmetic_crystal_class_number: 72,
		arithmetic_crystal_class_symbol: "m-3mF"
	},
		"526": {
		pointgroup_international: "Oh",
		schoenflies: "Oh^7",
		pointgroup_schoenflies: "m-3m",
		international_short: "Fd-3m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.25,
				0.25
			],
			[
				0,
				0.25,
				0.25
			],
			[
				0.75,
				0.25,
				0.5
			],
			[
				0.75,
				0.25,
				0.5
			],
			[
				0.75,
				0,
				0.75
			],
			[
				0.75,
				0,
				0.75
			],
			[
				0,
				0.25,
				0.25
			],
			[
				0,
				0.25,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0,
				0.75
			],
			[
				0.75,
				0,
				0.75
			],
			[
				0.75,
				0.25,
				0.5
			],
			[
				0.75,
				0.25,
				0.5
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0,
				0.25
			],
			[
				0.25,
				0,
				0.25
			],
			[
				0.5,
				0.75,
				0.25
			],
			[
				0.5,
				0.75,
				0.25
			],
			[
				0.75,
				0.75,
				0
			],
			[
				0.75,
				0.75,
				0
			],
			[
				0.25,
				0,
				0.25
			],
			[
				0.25,
				0,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.75,
				0
			],
			[
				0.75,
				0.75,
				0
			],
			[
				0.5,
				0.75,
				0.25
			],
			[
				0.5,
				0.75,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.25,
				0
			],
			[
				0.25,
				0.25,
				0
			],
			[
				0.25,
				0.5,
				0.75
			],
			[
				0.25,
				0.5,
				0.75
			],
			[
				0,
				0.75,
				0.75
			],
			[
				0,
				0.75,
				0.75
			],
			[
				0.25,
				0.25,
				0
			],
			[
				0.25,
				0.25,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.75,
				0.75
			],
			[
				0,
				0.75,
				0.75
			],
			[
				0.25,
				0.5,
				0.75
			],
			[
				0.25,
				0.5,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.75,
				0.75
			],
			[
				0,
				0.75,
				0.75
			],
			[
				0.75,
				0.75,
				0
			],
			[
				0.75,
				0.75,
				0
			],
			[
				0.75,
				0.5,
				0.25
			],
			[
				0.75,
				0.5,
				0.25
			],
			[
				0,
				0.75,
				0.75
			],
			[
				0,
				0.75,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.5,
				0.25
			],
			[
				0.75,
				0.5,
				0.25
			],
			[
				0.75,
				0.75,
				0
			],
			[
				0.75,
				0.75,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.5,
				0.75
			],
			[
				0.25,
				0.5,
				0.75
			],
			[
				0.5,
				0.25,
				0.75
			],
			[
				0.5,
				0.25,
				0.75
			],
			[
				0.75,
				0.25,
				0.5
			],
			[
				0.75,
				0.25,
				0.5
			],
			[
				0.25,
				0.5,
				0.75
			],
			[
				0.25,
				0.5,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.5
			],
			[
				0.75,
				0.25,
				0.5
			],
			[
				0.5,
				0.25,
				0.75
			],
			[
				0.5,
				0.25,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.75,
				0.5
			],
			[
				0.25,
				0.75,
				0.5
			],
			[
				0.25,
				0,
				0.25
			],
			[
				0.25,
				0,
				0.25
			],
			[
				0,
				0.25,
				0.25
			],
			[
				0,
				0.25,
				0.25
			],
			[
				0.25,
				0.75,
				0.5
			],
			[
				0.25,
				0.75,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.25,
				0.25
			],
			[
				0,
				0.25,
				0.25
			],
			[
				0.25,
				0,
				0.25
			],
			[
				0.25,
				0,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.25,
				0.75
			],
			[
				0.5,
				0.25,
				0.75
			],
			[
				0.25,
				0.25,
				0
			],
			[
				0.25,
				0.25,
				0
			],
			[
				0.25,
				0,
				0.25
			],
			[
				0.25,
				0,
				0.25
			],
			[
				0.5,
				0.25,
				0.75
			],
			[
				0.5,
				0.25,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0,
				0.25
			],
			[
				0.25,
				0,
				0.25
			],
			[
				0.25,
				0.25,
				0
			],
			[
				0.25,
				0.25,
				0
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0,
				0.75
			],
			[
				0.75,
				0,
				0.75
			],
			[
				0,
				0.75,
				0.75
			],
			[
				0,
				0.75,
				0.75
			],
			[
				0.25,
				0.75,
				0.5
			],
			[
				0.25,
				0.75,
				0.5
			],
			[
				0.75,
				0,
				0.75
			],
			[
				0.75,
				0,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.75,
				0.5
			],
			[
				0.25,
				0.75,
				0.5
			],
			[
				0,
				0.75,
				0.75
			],
			[
				0,
				0.75,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.25,
				0.5
			],
			[
				0.75,
				0.25,
				0.5
			],
			[
				0.75,
				0.5,
				0.25
			],
			[
				0.75,
				0.5,
				0.25
			],
			[
				0.5,
				0.75,
				0.25
			],
			[
				0.5,
				0.75,
				0.25
			],
			[
				0.75,
				0.25,
				0.5
			],
			[
				0.75,
				0.25,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.75,
				0.25
			],
			[
				0.5,
				0.75,
				0.25
			],
			[
				0.75,
				0.5,
				0.25
			],
			[
				0.75,
				0.5,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.75,
				0.25
			],
			[
				0.5,
				0.75,
				0.25
			],
			[
				0.25,
				0.75,
				0.5
			],
			[
				0.25,
				0.75,
				0.5
			],
			[
				0.25,
				0.5,
				0.75
			],
			[
				0.25,
				0.5,
				0.75
			],
			[
				0.5,
				0.75,
				0.25
			],
			[
				0.5,
				0.75,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.5,
				0.75
			],
			[
				0.25,
				0.5,
				0.75
			],
			[
				0.25,
				0.75,
				0.5
			],
			[
				0.25,
				0.75,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.5,
				0.25
			],
			[
				0.75,
				0.5,
				0.25
			],
			[
				0,
				0.25,
				0.25
			],
			[
				0,
				0.25,
				0.25
			],
			[
				0.25,
				0.25,
				0
			],
			[
				0.25,
				0.25,
				0
			],
			[
				0.75,
				0.5,
				0.25
			],
			[
				0.75,
				0.5,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.25,
				0
			],
			[
				0.25,
				0.25,
				0
			],
			[
				0,
				0.25,
				0.25
			],
			[
				0,
				0.25,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0
			],
			[
				0.75,
				0.75,
				0
			],
			[
				0.75,
				0,
				0.75
			],
			[
				0.75,
				0,
				0.75
			],
			[
				0.5,
				0.25,
				0.75
			],
			[
				0.5,
				0.25,
				0.75
			],
			[
				0.75,
				0.75,
				0
			],
			[
				0.75,
				0.75,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.25,
				0.75
			],
			[
				0.5,
				0.25,
				0.75
			],
			[
				0.75,
				0,
				0.75
			],
			[
				0.75,
				0,
				0.75
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			]
		],
		number: 227,
		choice: "2",
		international_full: "F 4_1/d -3 2/m",
		hall_symbol: "-F 4vw 2vw 3",
		international: "F d -3 m",
		arithmetic_crystal_class_number: 72,
		arithmetic_crystal_class_symbol: "m-3mF"
	},
		"527": {
		pointgroup_international: "Oh",
		schoenflies: "Oh^8",
		pointgroup_schoenflies: "m-3m",
		international_short: "Fd-3c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0,
				0,
				0.5
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0.5,
				0,
				0
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0,
				0.5,
				0
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0,
				0,
				0.5
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0.5,
				0,
				0
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0,
				0.5,
				0
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0,
				0,
				0.5
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0,
				0.5,
				0
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0.5,
				0,
				0
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0,
				0.5,
				0
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0,
				0,
				0.5
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0.5,
				0,
				0
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0.5,
				0,
				0
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0,
				0,
				0.5
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0,
				0.5,
				0
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0,
				0,
				0.5
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0.5,
				0,
				0
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0.5,
				0,
				0
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0,
				0,
				0.5
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0,
				0.5,
				0
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0.5,
				0,
				0
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0,
				0.5,
				0
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0,
				0,
				0.5
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0.5,
				0,
				0
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0,
				0.5,
				0
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0,
				0,
				0.5
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0.5,
				0,
				0
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0,
				0,
				0.5
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0,
				0,
				0.5
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0,
				0.5,
				0
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0.5,
				0,
				0
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0.5,
				0,
				0
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0,
				0,
				0.5
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0,
				0.5,
				0
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			]
		],
		number: 228,
		choice: "1",
		international_full: "F 4_1/d -3 2/c",
		hall_symbol: "F 4d 2 3 -1cd",
		international: "F d -3 c",
		arithmetic_crystal_class_number: 72,
		arithmetic_crystal_class_symbol: "m-3mF"
	},
		"528": {
		pointgroup_international: "Oh",
		schoenflies: "Oh^8",
		pointgroup_schoenflies: "m-3m",
		international_short: "Fd-3c",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0.25,
				0.75
			],
			[
				0,
				0.25,
				0.75
			],
			[
				0.75,
				0.25,
				0.5
			],
			[
				0.75,
				0.25,
				0.5
			],
			[
				0.75,
				0,
				0.25
			],
			[
				0.75,
				0,
				0.25
			],
			[
				0,
				0.25,
				0.25
			],
			[
				0,
				0.25,
				0.25
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.75,
				0,
				0.75
			],
			[
				0.75,
				0,
				0.75
			],
			[
				0.75,
				0.25,
				0
			],
			[
				0.75,
				0.25,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0,
				0.25
			],
			[
				0.75,
				0,
				0.25
			],
			[
				0.5,
				0.75,
				0.25
			],
			[
				0.5,
				0.75,
				0.25
			],
			[
				0.25,
				0.75,
				0
			],
			[
				0.25,
				0.75,
				0
			],
			[
				0.25,
				0,
				0.25
			],
			[
				0.25,
				0,
				0.25
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.75,
				0.75,
				0
			],
			[
				0.75,
				0.75,
				0
			],
			[
				0,
				0.75,
				0.25
			],
			[
				0,
				0.75,
				0.25
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.75,
				0
			],
			[
				0.25,
				0.75,
				0
			],
			[
				0.25,
				0.5,
				0.75
			],
			[
				0.25,
				0.5,
				0.75
			],
			[
				0,
				0.25,
				0.75
			],
			[
				0,
				0.25,
				0.75
			],
			[
				0.25,
				0.25,
				0
			],
			[
				0.25,
				0.25,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.75,
				0.75
			],
			[
				0,
				0.75,
				0.75
			],
			[
				0.25,
				0,
				0.75
			],
			[
				0.25,
				0,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.75,
				0.25
			],
			[
				0,
				0.75,
				0.25
			],
			[
				0.75,
				0.75,
				0
			],
			[
				0.75,
				0.75,
				0
			],
			[
				0.75,
				0.5,
				0.75
			],
			[
				0.75,
				0.5,
				0.75
			],
			[
				0,
				0.75,
				0.75
			],
			[
				0,
				0.75,
				0.75
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.75,
				0.5,
				0.25
			],
			[
				0.75,
				0.5,
				0.25
			],
			[
				0.75,
				0.75,
				0.5
			],
			[
				0.75,
				0.75,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.5,
				0.75
			],
			[
				0.75,
				0.5,
				0.75
			],
			[
				0.5,
				0.25,
				0.75
			],
			[
				0.5,
				0.25,
				0.75
			],
			[
				0.25,
				0.25,
				0.5
			],
			[
				0.25,
				0.25,
				0.5
			],
			[
				0.25,
				0.5,
				0.75
			],
			[
				0.25,
				0.5,
				0.75
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.5
			],
			[
				0.75,
				0.25,
				0.5
			],
			[
				0,
				0.25,
				0.75
			],
			[
				0,
				0.25,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.25,
				0.5
			],
			[
				0.25,
				0.25,
				0.5
			],
			[
				0.25,
				0,
				0.25
			],
			[
				0.25,
				0,
				0.25
			],
			[
				0,
				0.75,
				0.25
			],
			[
				0,
				0.75,
				0.25
			],
			[
				0.25,
				0.75,
				0.5
			],
			[
				0.25,
				0.75,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0.25,
				0.25
			],
			[
				0,
				0.25,
				0.25
			],
			[
				0.25,
				0.5,
				0.25
			],
			[
				0.25,
				0.5,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0.25,
				0.25
			],
			[
				0.5,
				0.25,
				0.25
			],
			[
				0.25,
				0.25,
				0
			],
			[
				0.25,
				0.25,
				0
			],
			[
				0.25,
				0,
				0.75
			],
			[
				0.25,
				0,
				0.75
			],
			[
				0.5,
				0.25,
				0.75
			],
			[
				0.5,
				0.25,
				0.75
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.25,
				0,
				0.25
			],
			[
				0.25,
				0,
				0.25
			],
			[
				0.25,
				0.25,
				0.5
			],
			[
				0.25,
				0.25,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0,
				0.75
			],
			[
				0.25,
				0,
				0.75
			],
			[
				0,
				0.75,
				0.75
			],
			[
				0,
				0.75,
				0.75
			],
			[
				0.75,
				0.75,
				0.5
			],
			[
				0.75,
				0.75,
				0.5
			],
			[
				0.75,
				0,
				0.75
			],
			[
				0.75,
				0,
				0.75
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.25,
				0.75,
				0.5
			],
			[
				0.25,
				0.75,
				0.5
			],
			[
				0.5,
				0.75,
				0.75
			],
			[
				0.5,
				0.75,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.75,
				0.5
			],
			[
				0.75,
				0.75,
				0.5
			],
			[
				0.75,
				0.5,
				0.25
			],
			[
				0.75,
				0.5,
				0.25
			],
			[
				0.5,
				0.25,
				0.25
			],
			[
				0.5,
				0.25,
				0.25
			],
			[
				0.75,
				0.25,
				0.5
			],
			[
				0.75,
				0.25,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.75,
				0.25
			],
			[
				0.5,
				0.75,
				0.25
			],
			[
				0.75,
				0,
				0.25
			],
			[
				0.75,
				0,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.75,
				0.75
			],
			[
				0.5,
				0.75,
				0.75
			],
			[
				0.25,
				0.75,
				0.5
			],
			[
				0.25,
				0.75,
				0.5
			],
			[
				0.25,
				0.5,
				0.25
			],
			[
				0.25,
				0.5,
				0.25
			],
			[
				0.5,
				0.75,
				0.25
			],
			[
				0.5,
				0.75,
				0.25
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.25,
				0.5,
				0.75
			],
			[
				0.25,
				0.5,
				0.75
			],
			[
				0.25,
				0.75,
				0
			],
			[
				0.25,
				0.75,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.5,
				0.25
			],
			[
				0.25,
				0.5,
				0.25
			],
			[
				0,
				0.25,
				0.25
			],
			[
				0,
				0.25,
				0.25
			],
			[
				0.75,
				0.25,
				0
			],
			[
				0.75,
				0.25,
				0
			],
			[
				0.75,
				0.5,
				0.25
			],
			[
				0.75,
				0.5,
				0.25
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.25,
				0.25,
				0
			],
			[
				0.25,
				0.25,
				0
			],
			[
				0.5,
				0.25,
				0.25
			],
			[
				0.5,
				0.25,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.25,
				0
			],
			[
				0.75,
				0.25,
				0
			],
			[
				0.75,
				0,
				0.75
			],
			[
				0.75,
				0,
				0.75
			],
			[
				0.5,
				0.75,
				0.75
			],
			[
				0.5,
				0.75,
				0.75
			],
			[
				0.75,
				0.75,
				0
			],
			[
				0.75,
				0.75,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0.25,
				0.75
			],
			[
				0.5,
				0.25,
				0.75
			],
			[
				0.75,
				0.5,
				0.75
			],
			[
				0.75,
				0.5,
				0.75
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			]
		],
		number: 228,
		choice: "2",
		international_full: "F 4_1/d -3 2/c",
		hall_symbol: "-F 4cvw 2vw 3",
		international: "F d -3 c",
		arithmetic_crystal_class_number: 72,
		arithmetic_crystal_class_symbol: "m-3mF"
	},
		"529": {
		pointgroup_international: "Oh",
		schoenflies: "Oh^9",
		pointgroup_schoenflies: "m-3m",
		international_short: "Im-3m",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			]
		],
		number: 229,
		choice: "",
		international_full: "I 4/m -3 2/m",
		hall_symbol: "-I 4 2 3",
		international: "I m -3 m",
		arithmetic_crystal_class_number: 73,
		arithmetic_crystal_class_symbol: "m-3mI"
	},
		"530": {
		pointgroup_international: "Oh",
		schoenflies: "Oh^10",
		pointgroup_schoenflies: "m-3m",
		international_short: "Ia-3d",
		translations: [
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0.25,
				0.25,
				0.25
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0,
				0.5,
				0
			],
			[
				0,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0.75,
				0.25,
				0.25
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0.75,
				0.75,
				0.25
			],
			[
				0,
				0,
				0.5
			],
			[
				0,
				0,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0,
				0.5,
				0.5
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0.25,
				0.75,
				0.25
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.5,
				0.5,
				0.5
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.25,
				0.75,
				0.75
			],
			[
				0.5,
				0,
				0
			],
			[
				0.5,
				0,
				0
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.75,
				0.25,
				0.75
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.5,
				0,
				0.5
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0.75,
				0.75,
				0.75
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.5,
				0.5,
				0
			],
			[
				0.25,
				0.25,
				0.75
			],
			[
				0.25,
				0.25,
				0.75
			]
		],
		rotations: [
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					-1,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					0,
					1,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					-1,
					0,
					0
				]
			],
			[
				[
					0,
					-1,
					0
				],
				[
					0,
					0,
					1
				],
				[
					1,
					0,
					0
				]
			],
			[
				[
					1,
					0,
					0
				],
				[
					0,
					0,
					-1
				],
				[
					0,
					1,
					0
				]
			],
			[
				[
					-1,
					0,
					0
				],
				[
					0,
					0,
					1
				],
				[
					0,
					-1,
					0
				]
			]
		],
		number: 230,
		choice: "",
		international_full: "I 4_1/a -3 2/d",
		hall_symbol: "-I 4bd 2c 3",
		international: "I a -3 d",
		arithmetic_crystal_class_number: 73,
		arithmetic_crystal_class_symbol: "m-3mI"
	}
	};

	/* Symmetry and space group related methods 
	 */

	/**
	 * Parse a symmetry operation string in the format:
	 *     +x,y-1/2,z
	 * into a rotation matrix + translation vector representation.
	 * @param  {string} symopstr A string representation of the symmetry operation
	 * @return {Object}          The symmetry operation as [rotation, translation]
	 */


	function parseSymOp(symopstr) {
	  // First, split by commas
	  var xyz = symopstr.split(',');

	  if (xyz.length != 3) {
	    throw 'Invalid symop string';
	  } // Then capture all elements


	  var symre = /([+-]{0,1})(?:([xyz])|(?:([0-9]+)\/([0-9]+)))/g;
	  var rotm = []; // Rotation

	  var trns = []; // Translation

	  for (var i = 0; i < 3; ++i) {
	    symre.lastIndex = 0;
	    var r = [0, 0, 0];
	    var t = 0.0;

	    do {
	      var res = symre.exec(xyz[i]);
	      if (!res) break;
	      var sign = res[1] == '-' ? -1 : 1;

	      if (res[2] === undefined) {
	        // Translation!
	        t += sign * parseFloat(res[3]) / parseFloat(res[4]);
	      } else {
	        // Rotation!
	        var j = 'xyz'.search(res[2]);
	        r[j] += sign;
	      }
	    } while (res);

	    rotm.push(r);
	    trns.push(t);
	  }

	  return [rotm, trns];
	}

	var parseSymOp_1 = parseSymOp;
	/**
	 * Interpret a Hall symbol and return a full list of symmetry
	 * operations for it in.
	 * @param  {string} hsym Hall symbol
	 * @return {Object}      Symmetry operations as list of [rotation, translation]
	 */

	function interpretHallSymbol(hsym) {
	  var hsym = hsym.trim();

	  for (var i = 1; i <= 530; ++i) {
	    // Iterate over all spacegroups
	    if (symdata[i]['hall_symbol'] == hsym) {
	      var rotms = symdata[i]['rotations'];
	      var trnss = symdata[i]['translations'];
	      return rotms.map(function (r, i) {
	        return [r, trnss[i]];
	      });
	    }
	  }

	  throw 'Invalid Hall symbol';
	}

	var interpretHallSymbol_1 = interpretHallSymbol;
	var symmetry = {
	  parseSymOp: parseSymOp_1,
	  interpretHallSymbol: interpretHallSymbol_1
	};

	var mndtable = mendeleev.PeriodicTable;
	var parseCif$1 = parse.parseCif;
	/*

	Functions and classes useful to transform a parsed CIF data structure into a
	series of crystallographic structures.

	*/

	/**
	 *   Convert a cartesian coordinates cell into a lengths and angles representation
	 *   @param  {Array} cell    Cartesian form cell (must be 3x3)
	 *   @param  {bool}  radians If true, angles are returned in radians
	 *   @return {Array}         Parameters in form [lengths, angles]
	 */

	function cellToCellpar(cell, radians) {
	  var lengths = cell.map(function (c) {
	    return numeric1_2_6.norm2(c);
	  });
	  var angles = [];

	  for (var i = 0; i < 3; ++i) {
	    var j = (i + 2) % 3;
	    var k = (i + 1) % 3;
	    var ll = lengths[j] * lengths[k];

	    if (ll > 1e-16) {
	      var x = numeric1_2_6.dot(cell[j], cell[k]) / ll;
	      var angle = Math.acos(x);
	    } else {
	      var angle = Math.PI / 2.0;
	    }

	    angles.push(angle);
	  }

	  if (!radians) {
	    angles = angles.map(utils.radToDeg);
	  }

	  return [lengths, angles];
	}

	var cellToCellpar_1 = cellToCellpar;
	/**
	 *  Convert a cell into lengths and angles representation to cartesian form
	 *  @param  {Array} cellpar     Lengths and angles form of cell (must be 2x3)
	 *  @param  {Array} ab_normal   Desired direction for the normal to the AB plane
	 *  @param  {Array} a_direction Direction for the a parameter
	 *  @param  {bool}  radians     If true, consider the angles in radians
	 *  @return {Array}             Cell in Cartesian form
	 */

	function cellparToCell(cellpar, ab_normal, a_direction, radians) {
	  ab_normal = ab_normal || [0, 0, 1]; // Default is the XY plane

	  if (!a_direction) {
	    if (numeric1_2_6.norm2(utils.cross(ab_normal, [1, 0, 0])) < 1e-5) {
	      a_direction = [0, 0, 1]; // Only if the AB plane contains X
	    } else {
	      a_direction = [1, 0, 0];
	    }
	  } // Define rotated X,Y,Z-system, with Z along ab_normal and X along
	  // the projection of a_direction onto the normal plane of Z.


	  var ad = utils.unit(a_direction);
	  var Z = utils.unit(ab_normal);
	  var X = utils.unit(numeric1_2_6.sub(ad, numeric1_2_6.mul(numeric1_2_6.dot(ad, Z), Z)));
	  var Y = utils.cross(Z, X); // Express va, vb and vc in the X,Y,Z-system

	  var l = cellpar[0];
	  var angs = cellpar[1];

	  if (!radians) {
	    angs = angs.map(utils.degToRad);
	  }

	  var cosa = angs.map(Math.cos);
	  var sina = angs.map(Math.sin);

	  for (var i = 0; i < 3; ++i) {
	    // Round for orthorombic cells
	    if (Math.abs(Math.abs(sina[i]) - 1) < 1e-14) {
	      sina[i] = Math.sign(sina[i]);
	      cosa[i] = 0.0;
	    }
	  } // Build the cell vectors


	  var va = [l[0], 0, 0];
	  var vb = [l[1] * cosa[2], l[1] * sina[2], 0];
	  var vc = [l[2] * cosa[1], l[2] * (cosa[0] - cosa[1] * cosa[2]) / sina[2], 0];
	  vc[2] = Math.sqrt(l[2] * l[2] - vc[0] * vc[0] - vc[1] * vc[1]); // Convert to the Cartesian x, y, z - system

	  var cell = numeric1_2_6.dot([va, vb, vc], [X, Y, Z]);
	  return cell;
	}

	var cellparToCell_1 = cellparToCell;
	/** 
	 *  A class holding a crystallographic structure. Inspired by the Atoms class
	 *  of the Atomic Simulation Environment.
	 *  @class
	 *  @param {Array}  elems       Array of element symbols or atomic numbers
	 *  @param {Array}  positions   Array of 3D positions
	 *  @param {Array}  cell        Array describing the unit cell. Can be any of
	 *                              the following:
	 *                              - false/null: no periodic boundary
	 *                              - Single float: cubic cell with that parameter
	 *                              - Array of 3 floats: orthorombic cell with 
	 *                                those parameters
	 *                              - Array of 3x3 floats: full carthesian cell
	 *                                definition
	 *                              - Any of the previous two, but with one or two
	 *                                elements replaced by false/null: partial 
	 *                                periodicity
	 *  @param {Object} info        Additional data attached to the structure
	 *  @param {bool}   scaled      If true, interpret the positions as scaled
	 *                              instead of absolute
	 *  @param {bool}   tolerant    If true, accept even symbols of elements that
	 *                              do not exist in the periodic table
	 */

	var Atoms = function (elems, positions, cell, info, scaled, tolerant) {
	  // Sanity checks
	  var symbols = [];
	  var numbers = [];

	  for (var i = 0; i < elems.length; ++i) {
	    var el = elems[i];
	    var a;
	    var is_num = typeof el == 'number';

	    if (is_num) {
	      a = mndtable.getAtomic(el);
	    } else {
	      a = mndtable.getElement(el);
	    }

	    if (a === null) {
	      if (is_num || !tolerant) {
	        throw 'Non-existing element passed to Atoms';
	      } else {
	        a = {
	          'symbol': el,
	          // Default for unknown element symbols
	          'number': -1
	        };
	      }
	    }

	    symbols.push(a.symbol);
	    numbers.push(a.number);
	  }

	  this._arrays = {
	    'symbols': symbols,
	    'numbers': numbers
	  };
	  this._N = symbols.length; // Now on to storing the cell

	  this._pbc = [true, true, true];
	  this._inv_cell = null;

	  if (!cell) {
	    this._pbc = [false, false, false];
	    this._cell = null;
	  } else if (typeof cell == 'number') {
	    var a = cell;
	    this._cell = [[a, 0, 0], [0, a, 0], [0, 0, a]];
	  } else if (cell.length != 3) {
	    throw 'Invalid cell passed to set_cell';
	  } else {
	    this._cell = [];

	    for (var i = 0; i < 3; ++i) {
	      if (!cell[i]) {
	        this._cell.push(null);

	        this._pbc[i] = false;
	      } else if (typeof cell[i] == 'number') {
	        var row = [0, 0, 0];
	        row[i] = cell[i];

	        this._cell.push(row);
	      } else if (cell[i].length != 3) {
	        throw 'Invalid cell passed to set_cell';
	      } else {
	        this._cell.push(cell[i]);
	      }
	    }
	  }

	  if (cell && !this._cell.includes(null)) this._inv_cell = numeric1_2_6.inv(this._cell); // Check that the positions are the right size

	  var check_pos = positions.length == this._N;

	  for (var i = 0; i < positions.length; ++i) {
	    check_pos = check_pos && positions[i].length == 3;
	  }

	  if (!check_pos) {
	    throw 'Invalid positions array passed to Atoms';
	  }

	  if (scaled) {
	    if (this._inv_cell === null) {
	      // Periodicity isn't full!
	      throw 'Impossible to use scaled coordinates with non-periodic system';
	    }

	    positions = numeric1_2_6.dot(positions, this._cell);
	  }

	  this.set_array('positions', positions);
	  info = info || {};
	  this.info = info;
	}; // Prototype for Atoms. We focus on getters, not setters, because it's not 
	// meant to be modified besides its arrays.


	Atoms.prototype = {
	  length: function () {
	    return this._N;
	  },
	  set_array: function (name, arr) {
	    // Check that it's the right shape
	    if (!(arr.length == this._N)) {
	      throw 'Invalid array size';
	    }

	    this._arrays[name] = arr;
	  },
	  get_array: function (name) {
	    return this._arrays[name];
	  },
	  get_chemical_symbols: function () {
	    return utils.deepClone(this.get_array('symbols'));
	  },
	  get_atomic_numbers: function () {
	    return utils.deepClone(this.get_array('numbers'));
	  },
	  get_cell: function () {
	    return utils.deepClone(this._cell);
	  },
	  get_inv_cell: function () {
	    return utils.deepClone(this._inv_cell);
	  },
	  get_pbc: function () {
	    return utils.deepClone(this._pbc);
	  },
	  get_positions: function () {
	    return utils.deepClone(this.get_array('positions'));
	  },
	  get_scaled_positions: function () {
	    var pos = this.get_array('positions');
	    return numeric1_2_6.dot(pos, this._inv_cell);
	  }
	}; // Utility functions needed for CIF parsing. Not meant for outside use!

	/** 
	 *  This function extracts a series of tags from a cif block. It searches for
	 *  them and, if they are loops, only returns the ones that are as long as the
	 *  FIRST element of tags (which is assumed obligatory; if not found, null is
	 *  returned)
	 */

	function _extract_tags(cblock, tags) {
	  var extracted = tags.map(function (tag) {
	    return cblock[tag];
	  });
	  if (extracted[0] === undefined) return null; // Verify that, in case of loops, all tags have the same length

	  var basetype = extracted[0].type;
	  var baselen = null;

	  if (basetype == 'loop') {
	    baselen = extracted[0].value.length;
	  }

	  extracted = extracted.map(function (x) {
	    if (x === undefined) return null;
	    if (x.type != basetype) return null;
	    if (basetype == 'loop' && x.value.length != baselen) return null;

	    if (basetype == 'loop') {
	      return x.value;
	    } else {
	      return [x.value];
	    }
	  });
	  return extracted;
	}

	function _atom_types(cblock) {
	  // Extract atom types from cblock
	  var atype_tags = ['_atom_type_symbol', '_atom_type_description', '_atom_type_radius_bond'];

	  var typevals = _extract_tags(cblock, atype_tags);

	  if (!typevals) {
	    return null; // No types found
	  }

	  var atypes = {};

	  for (var i = 0; i < typevals[0].length; ++i) {
	    var sym = typevals[0][i].text;
	    atypes[sym] = {};

	    for (var j = 1; j < atype_tags.length; ++j) {
	      if (typevals[j] != null) atypes[sym][atype_tags[j].slice(11)] = typevals[j][i].get_value();
	    }
	  }

	  return atypes;
	}

	function _atom_sites(cblock) {
	  // Extract atom sites from cblock
	  var asite_tags = ['_atom_site_label', '_atom_site_type_symbol', '_atom_site_Cartn_x', '_atom_site_Cartn_y', '_atom_site_Cartn_z', '_atom_site_fract_x', '_atom_site_fract_y', '_atom_site_fract_z'];

	  var sitevals = _extract_tags(cblock, asite_tags);

	  if (!sitevals) {
	    return null; // No sites found
	  }

	  var asites = [];

	  for (var i = 0; i < sitevals[0].length; ++i) {
	    asites.push({});

	    for (var j = 0; j < asite_tags.length; ++j) {
	      if (sitevals[j] != null) asites[i][asite_tags[j].slice(11)] = sitevals[j][i].get_value();
	    }
	  }

	  return asites;
	}

	function _cellpars(cblock) {
	  var cell_tags = ['_cell_length_a', '_cell_length_b', '_cell_length_c', '_cell_angle_alpha', '_cell_angle_beta', '_cell_angle_gamma'];
	  var cellpars = [[], []];

	  for (var i = 0; i < 6; ++i) {
	    var val = cblock[cell_tags[i]];
	    if (val === undefined) return null;
	    cellpars[Math.floor(i / 3)].push(val.value.get_value());
	  } // If any of a, b, c is zero, then it's invalid


	  if (cellpars[0].some(function (x) {
	    return x == 0;
	  })) {
	    return null;
	  }

	  return cellpars;
	}

	function _symops(cblock) {
	  // Look for either tag
	  var symopvals = cblock._space_group_symop_operation_xyz || cblock._symmetry_equiv_pos_as_xyz; // Hall symbol?

	  var hallsymbol = cblock._space_group_name_Hall || cblock._symmetry_space_group_name_Hall;
	  var symops = null;

	  if (symopvals) {
	    symops = [];

	    if (symopvals.type == 'single' || symopvals.value.length == 1) {
	      // Either way is pointless (only one value means identity)
	      return null;
	    }

	    for (var i = 1; i < symopvals.value.length; ++i) {
	      symops.push(symmetry.parseSymOp(symopvals.value[i].text));
	    }
	  } else if (hallsymbol) {
	    symops = symmetry.interpretHallSymbol(hallsymbol);
	  }

	  return symops;
	}
	/** CIF to Atoms parser
	 *  @static
	 *  @param  {string}    cif     CIF file in text format
	 *  @return {Object}            Dictionary of parsed crystal structures
	 */


	Atoms.readCif = function (cif) {
	  var cifdict = parseCif$1(cif); // Consider any data block

	  var structs = {};

	  for (var bname in cifdict) {
	    var block = cifdict[bname];

	    if ('_atom_site_label' in block) {
	      structs[bname] = block;
	    }
	  }

	  for (var sname in structs) {
	    var cblock = cifdict[sname]; // Start by identifying atom types, if present

	    var atypes = _atom_types(cblock);

	    var asites = _atom_sites(cblock);

	    var cellpars = _cellpars(cblock); // Is this system periodic?


	    var pbc = cellpars !== null;

	    if (pbc) {
	      var cell = cellparToCell(cellpars);
	    } // Extract symbols, labels, and positions


	    var symbols = [];
	    var labels = [];
	    var positions = [];

	    for (var i = 0; i < asites.length; ++i) {
	      symbols.push(asites[i].type_symbol);
	      labels.push(asites[i].label);
	      var p = [asites[i].Cartn_x, asites[i].Cartn_y, asites[i].Cartn_z];

	      if (p.some(function (x) {
	        return x === undefined;
	      })) {
	        // Then we need the fractional ones!
	        if (!pbc) {
	          // Does not make sense...
	          throw 'Absolute coordinates are necessary without a unit cell';
	        }

	        p = [asites[i].fract_x, asites[i].fract_y, asites[i].fract_z];
	        p = numeric1_2_6.dot(p, cell);
	      }

	      positions.push(p);
	    } // Now for symmetry oprations...


	    if (pbc) {
	      var symops = _symops(cblock);

	      if (symops) {
	        var fpos = numeric1_2_6.dot(positions, numeric1_2_6.inv(cell));
	        var allfpos = [];
	        var allsyms = [];
	        var alllabs = []; // Otherwise, find the new positions

	        for (var i = 0; i < positions.length; ++i) {
	          var p0 = fpos[i];
	          var allp = [p0];

	          for (var j = 0; j < symops.length; ++j) {
	            var rot = symops[j][0];
	            var tr = symops[j][1];
	            var p = numeric1_2_6.add(numeric1_2_6.dot(rot, p0), tr);
	            p = utils.mod1(p); // Is it equivalent to something else?

	            var eq = false;

	            for (var k = 0; k < allp.length; ++k) {
	              var r = numeric1_2_6.norm2(numeric1_2_6.sub(p, allp[k]));

	              if (r < 1e-8) {
	                eq = true;
	                break;
	              }
	            }

	            if (!eq) {
	              allp.push(p);
	            }
	          } // Concatenate


	          allfpos = allfpos.concat(allp);
	          allsyms = allsyms.concat(Array(allp.length).fill(symbols[i]));
	          alllabs = alllabs.concat(Array(allp.length).fill(labels[i]));
	        }

	        symbols = allsyms;
	        labels = alllabs;
	        positions = numeric1_2_6.dot(allfpos, cell);
	      }
	    } // Create the atoms object


	    var a = new Atoms(symbols, positions, cell, {});
	    a.set_array('labels', labels);
	    structs[sname] = a;
	  }

	  return structs;
	};

	var Atoms_1 = Atoms;
	var cryst = {
	  cellToCellpar: cellToCellpar_1,
	  cellparToCell: cellparToCell_1,
	  Atoms: Atoms_1
	};

	var Atoms$1 = cryst.Atoms;


	var Atoms_1$1 = Atoms$1;

	var DEFAULT_CONFIG = {
	  // minimum relative difference between two compared values,
	  // used by all comparison functions
	  epsilon: 1e-12,
	  // type of default matrix output. Choose 'matrix' (default) or 'array'
	  matrix: 'Matrix',
	  // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction
	  number: 'number',
	  // number of significant digits in BigNumbers
	  precision: 64,
	  // predictable output type of functions. When true, output type depends only
	  // on the input types. When false (default), output type can vary depending
	  // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when
	  // predictable is false, and returns `NaN` when true.
	  predictable: false,
	  // random seed for seeded pseudo random number generation
	  // null = randomly seed
	  randomSeed: null
	};

	function _typeof(obj) {
	  "@babel/helpers - typeof";

	  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
	    _typeof = function _typeof(obj) {
	      return typeof obj;
	    };
	  } else {
	    _typeof = function _typeof(obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	    };
	  }

	  return _typeof(obj);
	} // type checks for all known types
	//
	// note that:
	//
	// - check by duck-typing on a property like `isUnit`, instead of checking instanceof.
	//   instanceof cannot be used because that would not allow to pass data from
	//   one instance of math.js to another since each has it's own instance of Unit.
	// - check the `isUnit` property via the constructor, so there will be no
	//   matches for "fake" instances like plain objects with a property `isUnit`.
	//   That is important for security reasons.
	// - It must not be possible to override the type checks used internally,
	//   for security reasons, so these functions are not exposed in the expression
	//   parser.


	function isNumber(x) {
	  return typeof x === 'number';
	}
	function isBigNumber(x) {
	  return x && x.constructor.prototype.isBigNumber === true || false;
	}
	function isComplex(x) {
	  return x && _typeof(x) === 'object' && Object.getPrototypeOf(x).isComplex === true || false;
	}
	function isFraction(x) {
	  return x && _typeof(x) === 'object' && Object.getPrototypeOf(x).isFraction === true || false;
	}
	function isUnit(x) {
	  return x && x.constructor.prototype.isUnit === true || false;
	}
	function isString(x) {
	  return typeof x === 'string';
	}
	var isArray = Array.isArray;
	function isMatrix(x) {
	  return x && x.constructor.prototype.isMatrix === true || false;
	}
	/**
	 * Test whether a value is a collection: an Array or Matrix
	 * @param {*} x
	 * @returns {boolean} isCollection
	 */

	function isCollection(x) {
	  return Array.isArray(x) || isMatrix(x);
	}
	function isDenseMatrix(x) {
	  return x && x.isDenseMatrix && x.constructor.prototype.isMatrix === true || false;
	}
	function isSparseMatrix(x) {
	  return x && x.isSparseMatrix && x.constructor.prototype.isMatrix === true || false;
	}
	function isRange(x) {
	  return x && x.constructor.prototype.isRange === true || false;
	}
	function isIndex(x) {
	  return x && x.constructor.prototype.isIndex === true || false;
	}
	function isBoolean(x) {
	  return typeof x === 'boolean';
	}
	function isResultSet(x) {
	  return x && x.constructor.prototype.isResultSet === true || false;
	}
	function isHelp(x) {
	  return x && x.constructor.prototype.isHelp === true || false;
	}
	function isFunction(x) {
	  return typeof x === 'function';
	}
	function isDate(x) {
	  return x instanceof Date;
	}
	function isRegExp(x) {
	  return x instanceof RegExp;
	}
	function isObject(x) {
	  return !!(x && _typeof(x) === 'object' && x.constructor === Object && !isComplex(x) && !isFraction(x));
	}
	function isNull(x) {
	  return x === null;
	}
	function isUndefined(x) {
	  return x === undefined;
	}
	function isAccessorNode(x) {
	  return x && x.isAccessorNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isArrayNode(x) {
	  return x && x.isArrayNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isAssignmentNode(x) {
	  return x && x.isAssignmentNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isBlockNode(x) {
	  return x && x.isBlockNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isConditionalNode(x) {
	  return x && x.isConditionalNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isConstantNode(x) {
	  return x && x.isConstantNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isFunctionAssignmentNode(x) {
	  return x && x.isFunctionAssignmentNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isFunctionNode(x) {
	  return x && x.isFunctionNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isIndexNode(x) {
	  return x && x.isIndexNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isNode(x) {
	  return x && x.isNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isObjectNode(x) {
	  return x && x.isObjectNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isOperatorNode(x) {
	  return x && x.isOperatorNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isParenthesisNode(x) {
	  return x && x.isParenthesisNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isRangeNode(x) {
	  return x && x.isRangeNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isSymbolNode(x) {
	  return x && x.isSymbolNode === true && x.constructor.prototype.isNode === true || false;
	}
	function isChain(x) {
	  return x && x.constructor.prototype.isChain === true || false;
	}
	function typeOf(x) {
	  var t = _typeof(x);

	  if (t === 'object') {
	    // JavaScript types
	    if (x === null) return 'null';
	    if (Array.isArray(x)) return 'Array';
	    if (x instanceof Date) return 'Date';
	    if (x instanceof RegExp) return 'RegExp'; // math.js types

	    if (isBigNumber(x)) return 'BigNumber';
	    if (isComplex(x)) return 'Complex';
	    if (isFraction(x)) return 'Fraction';
	    if (isMatrix(x)) return 'Matrix';
	    if (isUnit(x)) return 'Unit';
	    if (isIndex(x)) return 'Index';
	    if (isRange(x)) return 'Range';
	    if (isResultSet(x)) return 'ResultSet';
	    if (isNode(x)) return x.type;
	    if (isChain(x)) return 'Chain';
	    if (isHelp(x)) return 'Help';
	    return 'Object';
	  }

	  if (t === 'function') return 'Function';
	  return t; // can be 'string', 'number', 'boolean', ...
	}

	function _typeof$1(obj) {
	  "@babel/helpers - typeof";

	  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
	    _typeof$1 = function _typeof(obj) {
	      return typeof obj;
	    };
	  } else {
	    _typeof$1 = function _typeof(obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	    };
	  }

	  return _typeof$1(obj);
	}
	/**
	 * Clone an object
	 *
	 *     clone(x)
	 *
	 * Can clone any primitive type, array, and object.
	 * If x has a function clone, this function will be invoked to clone the object.
	 *
	 * @param {*} x
	 * @return {*} clone
	 */

	function clone(x) {
	  var type = _typeof$1(x); // immutable primitive types


	  if (type === 'number' || type === 'string' || type === 'boolean' || x === null || x === undefined) {
	    return x;
	  } // use clone function of the object when available


	  if (typeof x.clone === 'function') {
	    return x.clone();
	  } // array


	  if (Array.isArray(x)) {
	    return x.map(function (value) {
	      return clone(value);
	    });
	  }

	  if (x instanceof Date) return new Date(x.valueOf());
	  if (isBigNumber(x)) return x; // bignumbers are immutable

	  if (x instanceof RegExp) throw new TypeError('Cannot clone ' + x); // TODO: clone a RegExp
	  // object

	  return mapObject(x, clone);
	}
	/**
	 * Apply map to all properties of an object
	 * @param {Object} object
	 * @param {function} callback
	 * @return {Object} Returns a copy of the object with mapped properties
	 */

	function mapObject(object, callback) {
	  var clone = {};

	  for (var key in object) {
	    if (hasOwnProperty(object, key)) {
	      clone[key] = callback(object[key]);
	    }
	  }

	  return clone;
	}
	/**
	 * Extend object a with the properties of object b
	 * @param {Object} a
	 * @param {Object} b
	 * @return {Object} a
	 */

	function extend(a, b) {
	  for (var prop in b) {
	    if (hasOwnProperty(b, prop)) {
	      a[prop] = b[prop];
	    }
	  }

	  return a;
	}
	/**
	 * Deep test equality of all fields in two pairs of arrays or objects.
	 * Compares values and functions strictly (ie. 2 is not the same as '2').
	 * @param {Array | Object} a
	 * @param {Array | Object} b
	 * @returns {boolean}
	 */

	function deepStrictEqual(a, b) {
	  var prop, i, len;

	  if (Array.isArray(a)) {
	    if (!Array.isArray(b)) {
	      return false;
	    }

	    if (a.length !== b.length) {
	      return false;
	    }

	    for (i = 0, len = a.length; i < len; i++) {
	      if (!deepStrictEqual(a[i], b[i])) {
	        return false;
	      }
	    }

	    return true;
	  } else if (typeof a === 'function') {
	    return a === b;
	  } else if (a instanceof Object) {
	    if (Array.isArray(b) || !(b instanceof Object)) {
	      return false;
	    }

	    for (prop in a) {
	      // noinspection JSUnfilteredForInLoop
	      if (!(prop in b) || !deepStrictEqual(a[prop], b[prop])) {
	        return false;
	      }
	    }

	    for (prop in b) {
	      // noinspection JSUnfilteredForInLoop
	      if (!(prop in a) || !deepStrictEqual(a[prop], b[prop])) {
	        return false;
	      }
	    }

	    return true;
	  } else {
	    return a === b;
	  }
	}
	/**
	 * A safe hasOwnProperty
	 * @param {Object} object
	 * @param {string} property
	 */

	function hasOwnProperty(object, property) {
	  return object && Object.hasOwnProperty.call(object, property);
	}
	/**
	 * Shallow version of pick, creating an object composed of the picked object properties
	 * but not for nested properties
	 * @param {Object} object
	 * @param {string[]} properties
	 * @return {Object}
	 */

	function pickShallow(object, properties) {
	  var copy = {};

	  for (var i = 0; i < properties.length; i++) {
	    var key = properties[i];
	    var value = object[key];

	    if (value !== undefined) {
	      copy[key] = value;
	    }
	  }

	  return copy;
	}

	var MATRIX_OPTIONS = ['Matrix', 'Array']; // valid values for option matrix

	var NUMBER_OPTIONS = ['number', 'BigNumber', 'Fraction']; // valid values for option number

	function _extends() {
	  _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends.apply(this, arguments);
	}

	var config = /* #__PURE__ */function config(options) {
	  if (options) {
	    throw new Error('The global config is readonly. \n' + 'Please create a mathjs instance if you want to change the default configuration. \n' + 'Example:\n' + '\n' + '  import { create, all } from \'mathjs\';\n' + '  const mathjs = create(all);\n' + '  mathjs.config({ number: \'BigNumber\' });\n');
	  }

	  return Object.freeze(DEFAULT_CONFIG);
	};

	_extends(config, DEFAULT_CONFIG, {
	  MATRIX_OPTIONS: MATRIX_OPTIONS,
	  NUMBER_OPTIONS: NUMBER_OPTIONS
	});

	var typedFunction = createCommonjsModule(function (module, exports) {

	  (function (root, factory) {
	    {
	      // OldNode. Does not work with strict CommonJS, but
	      // only CommonJS-like environments that support module.exports,
	      // like OldNode.
	      module.exports = factory();
	    }
	  })(commonjsGlobal, function () {
	    function ok() {
	      return true;
	    }

	    function notOk() {
	      return false;
	    }

	    function undef() {
	      return undefined;
	    }
	    /**
	     * @typedef {{
	     *   params: Param[],
	     *   fn: function
	     * }} Signature
	     *
	     * @typedef {{
	     *   types: Type[],
	     *   restParam: boolean
	     * }} Param
	     *
	     * @typedef {{
	     *   name: string,
	     *   typeIndex: number,
	     *   test: function,
	     *   conversion?: ConversionDef,
	     *   conversionIndex: number,
	     * }} Type
	     *
	     * @typedef {{
	     *   from: string,
	     *   to: string,
	     *   convert: function (*) : *
	     * }} ConversionDef
	     *
	     * @typedef {{
	     *   name: string,
	     *   test: function(*) : boolean
	     * }} TypeDef
	     */
	    // create a new instance of typed-function


	    function create() {
	      // data type tests
	      var _types = [{
	        name: 'number',
	        test: function (x) {
	          return typeof x === 'number';
	        }
	      }, {
	        name: 'string',
	        test: function (x) {
	          return typeof x === 'string';
	        }
	      }, {
	        name: 'boolean',
	        test: function (x) {
	          return typeof x === 'boolean';
	        }
	      }, {
	        name: 'Function',
	        test: function (x) {
	          return typeof x === 'function';
	        }
	      }, {
	        name: 'Array',
	        test: Array.isArray
	      }, {
	        name: 'Date',
	        test: function (x) {
	          return x instanceof Date;
	        }
	      }, {
	        name: 'RegExp',
	        test: function (x) {
	          return x instanceof RegExp;
	        }
	      }, {
	        name: 'Object',
	        test: function (x) {
	          return typeof x === 'object' && x !== null && x.constructor === Object;
	        }
	      }, {
	        name: 'null',
	        test: function (x) {
	          return x === null;
	        }
	      }, {
	        name: 'undefined',
	        test: function (x) {
	          return x === undefined;
	        }
	      }];
	      var anyType = {
	        name: 'any',
	        test: ok
	      }; // types which need to be ignored

	      var _ignore = []; // type conversions

	      var _conversions = []; // This is a temporary object, will be replaced with a typed function at the end

	      var typed = {
	        types: _types,
	        conversions: _conversions,
	        ignore: _ignore
	      };
	      /**
	       * Find the test function for a type
	       * @param {String} typeName
	       * @return {TypeDef} Returns the type definition when found,
	       *                    Throws a TypeError otherwise
	       */

	      function findTypeByName(typeName) {
	        var entry = findInArray(typed.types, function (entry) {
	          return entry.name === typeName;
	        });

	        if (entry) {
	          return entry;
	        }

	        if (typeName === 'any') {
	          // special baked-in case 'any'
	          return anyType;
	        }

	        var hint = findInArray(typed.types, function (entry) {
	          return entry.name.toLowerCase() === typeName.toLowerCase();
	        });
	        throw new TypeError('Unknown type "' + typeName + '"' + (hint ? '. Did you mean "' + hint.name + '"?' : ''));
	      }
	      /**
	       * Find the index of a type definition. Handles special case 'any'
	       * @param {TypeDef} type
	       * @return {number}
	       */


	      function findTypeIndex(type) {
	        if (type === anyType) {
	          return 999;
	        }

	        return typed.types.indexOf(type);
	      }
	      /**
	       * Find a type that matches a value.
	       * @param {*} value
	       * @return {string} Returns the name of the first type for which
	       *                  the type test matches the value.
	       */


	      function findTypeName(value) {
	        var entry = findInArray(typed.types, function (entry) {
	          return entry.test(value);
	        });

	        if (entry) {
	          return entry.name;
	        }

	        throw new TypeError('Value has unknown type. Value: ' + value);
	      }
	      /**
	       * Find a specific signature from a (composed) typed function, for example:
	       *
	       *   typed.find(fn, ['number', 'string'])
	       *   typed.find(fn, 'number, string')
	       *
	       * Function find only only works for exact matches.
	       *
	       * @param {Function} fn                   A typed-function
	       * @param {string | string[]} signature   Signature to be found, can be
	       *                                        an array or a comma separated string.
	       * @return {Function}                     Returns the matching signature, or
	       *                                        throws an error when no signature
	       *                                        is found.
	       */


	      function find(fn, signature) {
	        if (!fn.signatures) {
	          throw new TypeError('Function is no typed-function');
	        } // normalize input


	        var arr;

	        if (typeof signature === 'string') {
	          arr = signature.split(',');

	          for (var i = 0; i < arr.length; i++) {
	            arr[i] = arr[i].trim();
	          }
	        } else if (Array.isArray(signature)) {
	          arr = signature;
	        } else {
	          throw new TypeError('String array or a comma separated string expected');
	        }

	        var str = arr.join(','); // find an exact match

	        var match = fn.signatures[str];

	        if (match) {
	          return match;
	        } // TODO: extend find to match non-exact signatures


	        throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + arr.join(', ') + '))');
	      }
	      /**
	       * Convert a given value to another data type.
	       * @param {*} value
	       * @param {string} type
	       */


	      function convert(value, type) {
	        var from = findTypeName(value); // check conversion is needed

	        if (type === from) {
	          return value;
	        }

	        for (var i = 0; i < typed.conversions.length; i++) {
	          var conversion = typed.conversions[i];

	          if (conversion.from === from && conversion.to === type) {
	            return conversion.convert(value);
	          }
	        }

	        throw new Error('Cannot convert from ' + from + ' to ' + type);
	      }
	      /**
	       * Stringify parameters in a normalized way
	       * @param {Param[]} params
	       * @return {string}
	       */


	      function stringifyParams(params) {
	        return params.map(function (param) {
	          var typeNames = param.types.map(getTypeName);
	          return (param.restParam ? '...' : '') + typeNames.join('|');
	        }).join(',');
	      }
	      /**
	       * Parse a parameter, like "...number | boolean"
	       * @param {string} param
	       * @param {ConversionDef[]} conversions
	       * @return {Param} param
	       */


	      function parseParam(param, conversions) {
	        var restParam = param.indexOf('...') === 0;
	        var types = !restParam ? param : param.length > 3 ? param.slice(3) : 'any';
	        var typeNames = types.split('|').map(trim).filter(notEmpty).filter(notIgnore);
	        var matchingConversions = filterConversions(conversions, typeNames);
	        var exactTypes = typeNames.map(function (typeName) {
	          var type = findTypeByName(typeName);
	          return {
	            name: typeName,
	            typeIndex: findTypeIndex(type),
	            test: type.test,
	            conversion: null,
	            conversionIndex: -1
	          };
	        });
	        var convertibleTypes = matchingConversions.map(function (conversion) {
	          var type = findTypeByName(conversion.from);
	          return {
	            name: conversion.from,
	            typeIndex: findTypeIndex(type),
	            test: type.test,
	            conversion: conversion,
	            conversionIndex: conversions.indexOf(conversion)
	          };
	        });
	        return {
	          types: exactTypes.concat(convertibleTypes),
	          restParam: restParam
	        };
	      }
	      /**
	       * Parse a signature with comma separated parameters,
	       * like "number | boolean, ...string"
	       * @param {string} signature
	       * @param {function} fn
	       * @param {ConversionDef[]} conversions
	       * @return {Signature | null} signature
	       */


	      function parseSignature(signature, fn, conversions) {
	        var params = [];

	        if (signature.trim() !== '') {
	          params = signature.split(',').map(trim).map(function (param, index, array) {
	            var parsedParam = parseParam(param, conversions);

	            if (parsedParam.restParam && index !== array.length - 1) {
	              throw new SyntaxError('Unexpected rest parameter "' + param + '": ' + 'only allowed for the last parameter');
	            }

	            return parsedParam;
	          });
	        }

	        if (params.some(isInvalidParam)) {
	          // invalid signature: at least one parameter has no types
	          // (they may have been filtered)
	          return null;
	        }

	        return {
	          params: params,
	          fn: fn
	        };
	      }
	      /**
	       * Test whether a set of params contains a restParam
	       * @param {Param[]} params
	       * @return {boolean} Returns true when the last parameter is a restParam
	       */


	      function hasRestParam(params) {
	        var param = last(params);
	        return param ? param.restParam : false;
	      }
	      /**
	       * Test whether a parameter contains conversions
	       * @param {Param} param
	       * @return {boolean} Returns true when at least one of the parameters
	       *                   contains a conversion.
	       */


	      function hasConversions(param) {
	        return param.types.some(function (type) {
	          return type.conversion != null;
	        });
	      }
	      /**
	       * Create a type test for a single parameter, which can have one or multiple
	       * types.
	       * @param {Param} param
	       * @return {function(x: *) : boolean} Returns a test function
	       */


	      function compileTest(param) {
	        if (!param || param.types.length === 0) {
	          // nothing to do
	          return ok;
	        } else if (param.types.length === 1) {
	          return findTypeByName(param.types[0].name).test;
	        } else if (param.types.length === 2) {
	          var test0 = findTypeByName(param.types[0].name).test;
	          var test1 = findTypeByName(param.types[1].name).test;
	          return function or(x) {
	            return test0(x) || test1(x);
	          };
	        } else {
	          // param.types.length > 2
	          var tests = param.types.map(function (type) {
	            return findTypeByName(type.name).test;
	          });
	          return function or(x) {
	            for (var i = 0; i < tests.length; i++) {
	              if (tests[i](x)) {
	                return true;
	              }
	            }

	            return false;
	          };
	        }
	      }
	      /**
	       * Create a test for all parameters of a signature
	       * @param {Param[]} params
	       * @return {function(args: Array<*>) : boolean}
	       */


	      function compileTests(params) {
	        var tests, test0, test1;

	        if (hasRestParam(params)) {
	          // variable arguments like '...number'
	          tests = initial(params).map(compileTest);
	          var varIndex = tests.length;
	          var lastTest = compileTest(last(params));

	          var testRestParam = function (args) {
	            for (var i = varIndex; i < args.length; i++) {
	              if (!lastTest(args[i])) {
	                return false;
	              }
	            }

	            return true;
	          };

	          return function testArgs(args) {
	            for (var i = 0; i < tests.length; i++) {
	              if (!tests[i](args[i])) {
	                return false;
	              }
	            }

	            return testRestParam(args) && args.length >= varIndex + 1;
	          };
	        } else {
	          // no variable arguments
	          if (params.length === 0) {
	            return function testArgs(args) {
	              return args.length === 0;
	            };
	          } else if (params.length === 1) {
	            test0 = compileTest(params[0]);
	            return function testArgs(args) {
	              return test0(args[0]) && args.length === 1;
	            };
	          } else if (params.length === 2) {
	            test0 = compileTest(params[0]);
	            test1 = compileTest(params[1]);
	            return function testArgs(args) {
	              return test0(args[0]) && test1(args[1]) && args.length === 2;
	            };
	          } else {
	            // arguments.length > 2
	            tests = params.map(compileTest);
	            return function testArgs(args) {
	              for (var i = 0; i < tests.length; i++) {
	                if (!tests[i](args[i])) {
	                  return false;
	                }
	              }

	              return args.length === tests.length;
	            };
	          }
	        }
	      }
	      /**
	       * Find the parameter at a specific index of a signature.
	       * Handles rest parameters.
	       * @param {Signature} signature
	       * @param {number} index
	       * @return {Param | null} Returns the matching parameter when found,
	       *                        null otherwise.
	       */


	      function getParamAtIndex(signature, index) {
	        return index < signature.params.length ? signature.params[index] : hasRestParam(signature.params) ? last(signature.params) : null;
	      }
	      /**
	       * Get all type names of a parameter
	       * @param {Signature} signature
	       * @param {number} index
	       * @param {boolean} excludeConversions
	       * @return {string[]} Returns an array with type names
	       */


	      function getExpectedTypeNames(signature, index, excludeConversions) {
	        var param = getParamAtIndex(signature, index);
	        var types = param ? excludeConversions ? param.types.filter(isExactType) : param.types : [];
	        return types.map(getTypeName);
	      }
	      /**
	       * Returns the name of a type
	       * @param {Type} type
	       * @return {string} Returns the type name
	       */


	      function getTypeName(type) {
	        return type.name;
	      }
	      /**
	       * Test whether a type is an exact type or conversion
	       * @param {Type} type
	       * @return {boolean} Returns true when
	       */


	      function isExactType(type) {
	        return type.conversion === null || type.conversion === undefined;
	      }
	      /**
	       * Helper function for creating error messages: create an array with
	       * all available types on a specific argument index.
	       * @param {Signature[]} signatures
	       * @param {number} index
	       * @return {string[]} Returns an array with available types
	       */


	      function mergeExpectedParams(signatures, index) {
	        var typeNames = uniq(flatMap(signatures, function (signature) {
	          return getExpectedTypeNames(signature, index, false);
	        }));
	        return typeNames.indexOf('any') !== -1 ? ['any'] : typeNames;
	      }
	      /**
	       * Create
	       * @param {string} name             The name of the function
	       * @param {array.<*>} args          The actual arguments passed to the function
	       * @param {Signature[]} signatures  A list with available signatures
	       * @return {TypeError} Returns a type error with additional data
	       *                     attached to it in the property `data`
	       */


	      function createError(name, args, signatures) {
	        var err, expected;

	        var _name = name || 'unnamed'; // test for wrong type at some index


	        var matchingSignatures = signatures;
	        var index;

	        for (index = 0; index < args.length; index++) {
	          var nextMatchingDefs = matchingSignatures.filter(function (signature) {
	            var test = compileTest(getParamAtIndex(signature, index));
	            return (index < signature.params.length || hasRestParam(signature.params)) && test(args[index]);
	          });

	          if (nextMatchingDefs.length === 0) {
	            // no matching signatures anymore, throw error "wrong type"
	            expected = mergeExpectedParams(matchingSignatures, index);

	            if (expected.length > 0) {
	              var actualType = findTypeName(args[index]);
	              err = new TypeError('Unexpected type of argument in function ' + _name + ' (expected: ' + expected.join(' or ') + ', actual: ' + actualType + ', index: ' + index + ')');
	              err.data = {
	                category: 'wrongType',
	                fn: _name,
	                index: index,
	                actual: actualType,
	                expected: expected
	              };
	              return err;
	            }
	          } else {
	            matchingSignatures = nextMatchingDefs;
	          }
	        } // test for too few arguments


	        var lengths = matchingSignatures.map(function (signature) {
	          return hasRestParam(signature.params) ? Infinity : signature.params.length;
	        });

	        if (args.length < Math.min.apply(null, lengths)) {
	          expected = mergeExpectedParams(matchingSignatures, index);
	          err = new TypeError('Too few arguments in function ' + _name + ' (expected: ' + expected.join(' or ') + ', index: ' + args.length + ')');
	          err.data = {
	            category: 'tooFewArgs',
	            fn: _name,
	            index: args.length,
	            expected: expected
	          };
	          return err;
	        } // test for too many arguments


	        var maxLength = Math.max.apply(null, lengths);

	        if (args.length > maxLength) {
	          err = new TypeError('Too many arguments in function ' + _name + ' (expected: ' + maxLength + ', actual: ' + args.length + ')');
	          err.data = {
	            category: 'tooManyArgs',
	            fn: _name,
	            index: args.length,
	            expectedLength: maxLength
	          };
	          return err;
	        }

	        err = new TypeError('Arguments of type "' + args.join(', ') + '" do not match any of the defined signatures of function ' + _name + '.');
	        err.data = {
	          category: 'mismatch',
	          actual: args.map(findTypeName)
	        };
	        return err;
	      }
	      /**
	       * Find the lowest index of all exact types of a parameter (no conversions)
	       * @param {Param} param
	       * @return {number} Returns the index of the lowest type in typed.types
	       */


	      function getLowestTypeIndex(param) {
	        var min = 999;

	        for (var i = 0; i < param.types.length; i++) {
	          if (isExactType(param.types[i])) {
	            min = Math.min(min, param.types[i].typeIndex);
	          }
	        }

	        return min;
	      }
	      /**
	       * Find the lowest index of the conversion of all types of the parameter
	       * having a conversion
	       * @param {Param} param
	       * @return {number} Returns the lowest index of the conversions of this type
	       */


	      function getLowestConversionIndex(param) {
	        var min = 999;

	        for (var i = 0; i < param.types.length; i++) {
	          if (!isExactType(param.types[i])) {
	            min = Math.min(min, param.types[i].conversionIndex);
	          }
	        }

	        return min;
	      }
	      /**
	       * Compare two params
	       * @param {Param} param1
	       * @param {Param} param2
	       * @return {number} returns a negative number when param1 must get a lower
	       *                  index than param2, a positive number when the opposite,
	       *                  or zero when both are equal
	       */


	      function compareParams(param1, param2) {
	        var c; // compare having a rest parameter or not

	        c = param1.restParam - param2.restParam;

	        if (c !== 0) {
	          return c;
	        } // compare having conversions or not


	        c = hasConversions(param1) - hasConversions(param2);

	        if (c !== 0) {
	          return c;
	        } // compare the index of the types


	        c = getLowestTypeIndex(param1) - getLowestTypeIndex(param2);

	        if (c !== 0) {
	          return c;
	        } // compare the index of any conversion


	        return getLowestConversionIndex(param1) - getLowestConversionIndex(param2);
	      }
	      /**
	       * Compare two signatures
	       * @param {Signature} signature1
	       * @param {Signature} signature2
	       * @return {number} returns a negative number when param1 must get a lower
	       *                  index than param2, a positive number when the opposite,
	       *                  or zero when both are equal
	       */


	      function compareSignatures(signature1, signature2) {
	        var len = Math.min(signature1.params.length, signature2.params.length);
	        var i;
	        var c; // compare whether the params have conversions at all or not

	        c = signature1.params.some(hasConversions) - signature2.params.some(hasConversions);

	        if (c !== 0) {
	          return c;
	        } // next compare whether the params have conversions one by one


	        for (i = 0; i < len; i++) {
	          c = hasConversions(signature1.params[i]) - hasConversions(signature2.params[i]);

	          if (c !== 0) {
	            return c;
	          }
	        } // compare the types of the params one by one


	        for (i = 0; i < len; i++) {
	          c = compareParams(signature1.params[i], signature2.params[i]);

	          if (c !== 0) {
	            return c;
	          }
	        } // compare the number of params


	        return signature1.params.length - signature2.params.length;
	      }
	      /**
	       * Get params containing all types that can be converted to the defined types.
	       *
	       * @param {ConversionDef[]} conversions
	       * @param {string[]} typeNames
	       * @return {ConversionDef[]} Returns the conversions that are available
	       *                        for every type (if any)
	       */


	      function filterConversions(conversions, typeNames) {
	        var matches = {};
	        conversions.forEach(function (conversion) {
	          if (typeNames.indexOf(conversion.from) === -1 && typeNames.indexOf(conversion.to) !== -1 && !matches[conversion.from]) {
	            matches[conversion.from] = conversion;
	          }
	        });
	        return Object.keys(matches).map(function (from) {
	          return matches[from];
	        });
	      }
	      /**
	       * Preprocess arguments before calling the original function:
	       * - if needed convert the parameters
	       * - in case of rest parameters, move the rest parameters into an Array
	       * @param {Param[]} params
	       * @param {function} fn
	       * @return {function} Returns a wrapped function
	       */


	      function compileArgsPreprocessing(params, fn) {
	        var fnConvert = fn; // TODO: can we make this wrapper function smarter/simpler?

	        if (params.some(hasConversions)) {
	          var restParam = hasRestParam(params);
	          var compiledConversions = params.map(compileArgConversion);

	          fnConvert = function convertArgs() {
	            var args = [];
	            var last = restParam ? arguments.length - 1 : arguments.length;

	            for (var i = 0; i < last; i++) {
	              args[i] = compiledConversions[i](arguments[i]);
	            }

	            if (restParam) {
	              args[last] = arguments[last].map(compiledConversions[last]);
	            }

	            return fn.apply(this, args);
	          };
	        }

	        var fnPreprocess = fnConvert;

	        if (hasRestParam(params)) {
	          var offset = params.length - 1;

	          fnPreprocess = function preprocessRestParams() {
	            return fnConvert.apply(this, slice(arguments, 0, offset).concat([slice(arguments, offset)]));
	          };
	        }

	        return fnPreprocess;
	      }
	      /**
	       * Compile conversion for a parameter to the right type
	       * @param {Param} param
	       * @return {function} Returns the wrapped function that will convert arguments
	       *
	       */


	      function compileArgConversion(param) {
	        var test0, test1, conversion0, conversion1;
	        var tests = [];
	        var conversions = [];
	        param.types.forEach(function (type) {
	          if (type.conversion) {
	            tests.push(findTypeByName(type.conversion.from).test);
	            conversions.push(type.conversion.convert);
	          }
	        }); // create optimized conversion functions depending on the number of conversions

	        switch (conversions.length) {
	          case 0:
	            return function convertArg(arg) {
	              return arg;
	            };

	          case 1:
	            test0 = tests[0];
	            conversion0 = conversions[0];
	            return function convertArg(arg) {
	              if (test0(arg)) {
	                return conversion0(arg);
	              }

	              return arg;
	            };

	          case 2:
	            test0 = tests[0];
	            test1 = tests[1];
	            conversion0 = conversions[0];
	            conversion1 = conversions[1];
	            return function convertArg(arg) {
	              if (test0(arg)) {
	                return conversion0(arg);
	              }

	              if (test1(arg)) {
	                return conversion1(arg);
	              }

	              return arg;
	            };

	          default:
	            return function convertArg(arg) {
	              for (var i = 0; i < conversions.length; i++) {
	                if (tests[i](arg)) {
	                  return conversions[i](arg);
	                }
	              }

	              return arg;
	            };
	        }
	      }
	      /**
	       * Convert an array with signatures into a map with signatures,
	       * where signatures with union types are split into separate signatures
	       *
	       * Throws an error when there are conflicting types
	       *
	       * @param {Signature[]} signatures
	       * @return {Object.<string, function>}  Returns a map with signatures
	       *                                      as key and the original function
	       *                                      of this signature as value.
	       */


	      function createSignaturesMap(signatures) {
	        var signaturesMap = {};
	        signatures.forEach(function (signature) {
	          if (!signature.params.some(hasConversions)) {
	            splitParams(signature.params, true).forEach(function (params) {
	              signaturesMap[stringifyParams(params)] = signature.fn;
	            });
	          }
	        });
	        return signaturesMap;
	      }
	      /**
	       * Split params with union types in to separate params.
	       *
	       * For example:
	       *
	       *     splitParams([['Array', 'Object'], ['string', 'RegExp'])
	       *     // returns:
	       *     // [
	       *     //   ['Array', 'string'],
	       *     //   ['Array', 'RegExp'],
	       *     //   ['Object', 'string'],
	       *     //   ['Object', 'RegExp']
	       *     // ]
	       *
	       * @param {Param[]} params
	       * @param {boolean} ignoreConversionTypes
	       * @return {Param[]}
	       */


	      function splitParams(params, ignoreConversionTypes) {
	        function _splitParams(params, index, types) {
	          if (index < params.length) {
	            var param = params[index];
	            var filteredTypes = ignoreConversionTypes ? param.types.filter(isExactType) : param.types;
	            var typeGroups;

	            if (param.restParam) {
	              // split the types of a rest parameter in two:
	              // one with only exact types, and one with exact types and conversions
	              var exactTypes = filteredTypes.filter(isExactType);
	              typeGroups = exactTypes.length < filteredTypes.length ? [exactTypes, filteredTypes] : [filteredTypes];
	            } else {
	              // split all the types of a regular parameter into one type per group
	              typeGroups = filteredTypes.map(function (type) {
	                return [type];
	              });
	            } // recurse over the groups with types


	            return flatMap(typeGroups, function (typeGroup) {
	              return _splitParams(params, index + 1, types.concat([typeGroup]));
	            });
	          } else {
	            // we've reached the end of the parameters. Now build a new Param
	            var splittedParams = types.map(function (type, typeIndex) {
	              return {
	                types: type,
	                restParam: typeIndex === params.length - 1 && hasRestParam(params)
	              };
	            });
	            return [splittedParams];
	          }
	        }

	        return _splitParams(params, 0, []);
	      }
	      /**
	       * Test whether two signatures have a conflicting signature
	       * @param {Signature} signature1
	       * @param {Signature} signature2
	       * @return {boolean} Returns true when the signatures conflict, false otherwise.
	       */


	      function hasConflictingParams(signature1, signature2) {
	        var ii = Math.max(signature1.params.length, signature2.params.length);

	        for (var i = 0; i < ii; i++) {
	          var typesNames1 = getExpectedTypeNames(signature1, i, true);
	          var typesNames2 = getExpectedTypeNames(signature2, i, true);

	          if (!hasOverlap(typesNames1, typesNames2)) {
	            return false;
	          }
	        }

	        var len1 = signature1.params.length;
	        var len2 = signature2.params.length;
	        var restParam1 = hasRestParam(signature1.params);
	        var restParam2 = hasRestParam(signature2.params);
	        return restParam1 ? restParam2 ? len1 === len2 : len2 >= len1 : restParam2 ? len1 >= len2 : len1 === len2;
	      }
	      /**
	       * Create a typed function
	       * @param {String} name               The name for the typed function
	       * @param {Object.<string, function>} signaturesMap
	       *                                    An object with one or
	       *                                    multiple signatures as key, and the
	       *                                    function corresponding to the
	       *                                    signature as value.
	       * @return {function}  Returns the created typed function.
	       */


	      function createTypedFunction(name, signaturesMap) {
	        if (Object.keys(signaturesMap).length === 0) {
	          throw new SyntaxError('No signatures provided');
	        } // parse the signatures, and check for conflicts


	        var parsedSignatures = [];
	        Object.keys(signaturesMap).map(function (signature) {
	          return parseSignature(signature, signaturesMap[signature], typed.conversions);
	        }).filter(notNull).forEach(function (parsedSignature) {
	          // check whether this parameter conflicts with already parsed signatures
	          var conflictingSignature = findInArray(parsedSignatures, function (s) {
	            return hasConflictingParams(s, parsedSignature);
	          });

	          if (conflictingSignature) {
	            throw new TypeError('Conflicting signatures "' + stringifyParams(conflictingSignature.params) + '" and "' + stringifyParams(parsedSignature.params) + '".');
	          }

	          parsedSignatures.push(parsedSignature);
	        }); // split and filter the types of the signatures, and then order them

	        var signatures = flatMap(parsedSignatures, function (parsedSignature) {
	          var params = parsedSignature ? splitParams(parsedSignature.params, false) : [];
	          return params.map(function (params) {
	            return {
	              params: params,
	              fn: parsedSignature.fn
	            };
	          });
	        }).filter(notNull);
	        signatures.sort(compareSignatures); // we create a highly optimized checks for the first couple of signatures with max 2 arguments

	        var ok0 = signatures[0] && signatures[0].params.length <= 2 && !hasRestParam(signatures[0].params);
	        var ok1 = signatures[1] && signatures[1].params.length <= 2 && !hasRestParam(signatures[1].params);
	        var ok2 = signatures[2] && signatures[2].params.length <= 2 && !hasRestParam(signatures[2].params);
	        var ok3 = signatures[3] && signatures[3].params.length <= 2 && !hasRestParam(signatures[3].params);
	        var ok4 = signatures[4] && signatures[4].params.length <= 2 && !hasRestParam(signatures[4].params);
	        var ok5 = signatures[5] && signatures[5].params.length <= 2 && !hasRestParam(signatures[5].params);
	        var allOk = ok0 && ok1 && ok2 && ok3 && ok4 && ok5; // compile the tests

	        var tests = signatures.map(function (signature) {
	          return compileTests(signature.params);
	        });
	        var test00 = ok0 ? compileTest(signatures[0].params[0]) : notOk;
	        var test10 = ok1 ? compileTest(signatures[1].params[0]) : notOk;
	        var test20 = ok2 ? compileTest(signatures[2].params[0]) : notOk;
	        var test30 = ok3 ? compileTest(signatures[3].params[0]) : notOk;
	        var test40 = ok4 ? compileTest(signatures[4].params[0]) : notOk;
	        var test50 = ok5 ? compileTest(signatures[5].params[0]) : notOk;
	        var test01 = ok0 ? compileTest(signatures[0].params[1]) : notOk;
	        var test11 = ok1 ? compileTest(signatures[1].params[1]) : notOk;
	        var test21 = ok2 ? compileTest(signatures[2].params[1]) : notOk;
	        var test31 = ok3 ? compileTest(signatures[3].params[1]) : notOk;
	        var test41 = ok4 ? compileTest(signatures[4].params[1]) : notOk;
	        var test51 = ok5 ? compileTest(signatures[5].params[1]) : notOk; // compile the functions

	        var fns = signatures.map(function (signature) {
	          return compileArgsPreprocessing(signature.params, signature.fn);
	        });
	        var fn0 = ok0 ? fns[0] : undef;
	        var fn1 = ok1 ? fns[1] : undef;
	        var fn2 = ok2 ? fns[2] : undef;
	        var fn3 = ok3 ? fns[3] : undef;
	        var fn4 = ok4 ? fns[4] : undef;
	        var fn5 = ok5 ? fns[5] : undef;
	        var len0 = ok0 ? signatures[0].params.length : -1;
	        var len1 = ok1 ? signatures[1].params.length : -1;
	        var len2 = ok2 ? signatures[2].params.length : -1;
	        var len3 = ok3 ? signatures[3].params.length : -1;
	        var len4 = ok4 ? signatures[4].params.length : -1;
	        var len5 = ok5 ? signatures[5].params.length : -1; // simple and generic, but also slow

	        var iStart = allOk ? 6 : 0;
	        var iEnd = signatures.length;

	        var generic = function generic() {

	          for (var i = iStart; i < iEnd; i++) {
	            if (tests[i](arguments)) {
	              return fns[i].apply(this, arguments);
	            }
	          }

	          throw createError(name, arguments, signatures);
	        }; // create the typed function
	        // fast, specialized version. Falls back to the slower, generic one if needed


	        var fn = function fn(arg0, arg1) {

	          if (arguments.length === len0 && test00(arg0) && test01(arg1)) {
	            return fn0.apply(fn, arguments);
	          }

	          if (arguments.length === len1 && test10(arg0) && test11(arg1)) {
	            return fn1.apply(fn, arguments);
	          }

	          if (arguments.length === len2 && test20(arg0) && test21(arg1)) {
	            return fn2.apply(fn, arguments);
	          }

	          if (arguments.length === len3 && test30(arg0) && test31(arg1)) {
	            return fn3.apply(fn, arguments);
	          }

	          if (arguments.length === len4 && test40(arg0) && test41(arg1)) {
	            return fn4.apply(fn, arguments);
	          }

	          if (arguments.length === len5 && test50(arg0) && test51(arg1)) {
	            return fn5.apply(fn, arguments);
	          }

	          return generic.apply(fn, arguments);
	        }; // attach name the typed function


	        try {
	          Object.defineProperty(fn, 'name', {
	            value: name
	          });
	        } catch (err) {// old browsers do not support Object.defineProperty and some don't support setting the name property
	          // the function name is not essential for the functioning, it's mostly useful for debugging,
	          // so it's fine to have unnamed functions.
	        } // attach signatures to the function


	        fn.signatures = createSignaturesMap(signatures);
	        return fn;
	      }
	      /**
	       * Test whether a type should be NOT be ignored
	       * @param {string} typeName
	       * @return {boolean}
	       */


	      function notIgnore(typeName) {
	        return typed.ignore.indexOf(typeName) === -1;
	      }
	      /**
	       * trim a string
	       * @param {string} str
	       * @return {string}
	       */


	      function trim(str) {
	        return str.trim();
	      }
	      /**
	       * Test whether a string is not empty
	       * @param {string} str
	       * @return {boolean}
	       */


	      function notEmpty(str) {
	        return !!str;
	      }
	      /**
	       * test whether a value is not strict equal to null
	       * @param {*} value
	       * @return {boolean}
	       */


	      function notNull(value) {
	        return value !== null;
	      }
	      /**
	       * Test whether a parameter has no types defined
	       * @param {Param} param
	       * @return {boolean}
	       */


	      function isInvalidParam(param) {
	        return param.types.length === 0;
	      }
	      /**
	       * Return all but the last items of an array
	       * @param {Array} arr
	       * @return {Array}
	       */


	      function initial(arr) {
	        return arr.slice(0, arr.length - 1);
	      }
	      /**
	       * return the last item of an array
	       * @param {Array} arr
	       * @return {*}
	       */


	      function last(arr) {
	        return arr[arr.length - 1];
	      }
	      /**
	       * Slice an array or function Arguments
	       * @param {Array | Arguments | IArguments} arr
	       * @param {number} start
	       * @param {number} [end]
	       * @return {Array}
	       */


	      function slice(arr, start, end) {
	        return Array.prototype.slice.call(arr, start, end);
	      }
	      /**
	       * Test whether an array contains some item
	       * @param {Array} array
	       * @param {*} item
	       * @return {boolean} Returns true if array contains item, false if not.
	       */


	      function contains(array, item) {
	        return array.indexOf(item) !== -1;
	      }
	      /**
	       * Test whether two arrays have overlapping items
	       * @param {Array} array1
	       * @param {Array} array2
	       * @return {boolean} Returns true when at least one item exists in both arrays
	       */


	      function hasOverlap(array1, array2) {
	        for (var i = 0; i < array1.length; i++) {
	          if (contains(array2, array1[i])) {
	            return true;
	          }
	        }

	        return false;
	      }
	      /**
	       * Return the first item from an array for which test(arr[i]) returns true
	       * @param {Array} arr
	       * @param {function} test
	       * @return {* | undefined} Returns the first matching item
	       *                         or undefined when there is no match
	       */


	      function findInArray(arr, test) {
	        for (var i = 0; i < arr.length; i++) {
	          if (test(arr[i])) {
	            return arr[i];
	          }
	        }

	        return undefined;
	      }
	      /**
	       * Filter unique items of an array with strings
	       * @param {string[]} arr
	       * @return {string[]}
	       */


	      function uniq(arr) {
	        var entries = {};

	        for (var i = 0; i < arr.length; i++) {
	          entries[arr[i]] = true;
	        }

	        return Object.keys(entries);
	      }
	      /**
	       * Flat map the result invoking a callback for every item in an array.
	       * https://gist.github.com/samgiles/762ee337dff48623e729
	       * @param {Array} arr
	       * @param {function} callback
	       * @return {Array}
	       */


	      function flatMap(arr, callback) {
	        return Array.prototype.concat.apply([], arr.map(callback));
	      }
	      /**
	       * Retrieve the function name from a set of typed functions,
	       * and check whether the name of all functions match (if given)
	       * @param {function[]} fns
	       */


	      function getName(fns) {
	        var name = '';

	        for (var i = 0; i < fns.length; i++) {
	          var fn = fns[i]; // check whether the names are the same when defined

	          if ((typeof fn.signatures === 'object' || typeof fn.signature === 'string') && fn.name !== '') {
	            if (name === '') {
	              name = fn.name;
	            } else if (name !== fn.name) {
	              var err = new Error('Function names do not match (expected: ' + name + ', actual: ' + fn.name + ')');
	              err.data = {
	                actual: fn.name,
	                expected: name
	              };
	              throw err;
	            }
	          }
	        }

	        return name;
	      } // extract and merge all signatures of a list with typed functions


	      function extractSignatures(fns) {
	        var err;
	        var signaturesMap = {};

	        function validateUnique(_signature, _fn) {
	          if (signaturesMap.hasOwnProperty(_signature) && _fn !== signaturesMap[_signature]) {
	            err = new Error('Signature "' + _signature + '" is defined twice');
	            err.data = {
	              signature: _signature
	            };
	            throw err; // else: both signatures point to the same function, that's fine
	          }
	        }

	        for (var i = 0; i < fns.length; i++) {
	          var fn = fns[i]; // test whether this is a typed-function

	          if (typeof fn.signatures === 'object') {
	            // merge the signatures
	            for (var signature in fn.signatures) {
	              if (fn.signatures.hasOwnProperty(signature)) {
	                validateUnique(signature, fn.signatures[signature]);
	                signaturesMap[signature] = fn.signatures[signature];
	              }
	            }
	          } else if (typeof fn.signature === 'string') {
	            validateUnique(fn.signature, fn);
	            signaturesMap[fn.signature] = fn;
	          } else {
	            err = new TypeError('Function is no typed-function (index: ' + i + ')');
	            err.data = {
	              index: i
	            };
	            throw err;
	          }
	        }

	        return signaturesMap;
	      }

	      typed = createTypedFunction('typed', {
	        'string, Object': createTypedFunction,
	        'Object': function (signaturesMap) {
	          // find existing name
	          var fns = [];

	          for (var signature in signaturesMap) {
	            if (signaturesMap.hasOwnProperty(signature)) {
	              fns.push(signaturesMap[signature]);
	            }
	          }

	          var name = getName(fns);
	          return createTypedFunction(name, signaturesMap);
	        },
	        '...Function': function (fns) {
	          return createTypedFunction(getName(fns), extractSignatures(fns));
	        },
	        'string, ...Function': function (name, fns) {
	          return createTypedFunction(name, extractSignatures(fns));
	        }
	      });
	      typed.create = create;
	      typed.types = _types;
	      typed.conversions = _conversions;
	      typed.ignore = _ignore;
	      typed.convert = convert;
	      typed.find = find;
	      /**
	       * add a type
	       * @param {{name: string, test: function}} type
	       * @param {boolean} [beforeObjectTest=true]
	       *                          If true, the new test will be inserted before
	       *                          the test with name 'Object' (if any), since
	       *                          tests for Object match Array and classes too.
	       */

	      typed.addType = function (type, beforeObjectTest) {
	        if (!type || typeof type.name !== 'string' || typeof type.test !== 'function') {
	          throw new TypeError('Object with properties {name: string, test: function} expected');
	        }

	        if (beforeObjectTest !== false) {
	          for (var i = 0; i < typed.types.length; i++) {
	            if (typed.types[i].name === 'Object') {
	              typed.types.splice(i, 0, type);
	              return;
	            }
	          }
	        }

	        typed.types.push(type);
	      }; // add a conversion


	      typed.addConversion = function (conversion) {
	        if (!conversion || typeof conversion.from !== 'string' || typeof conversion.to !== 'string' || typeof conversion.convert !== 'function') {
	          throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');
	        }

	        typed.conversions.push(conversion);
	      };

	      return typed;
	    }

	    return create();
	  });
	});

	/**
	 * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue
	 */

	/**
	 * Check if a number is integer
	 * @param {number | boolean} value
	 * @return {boolean} isInteger
	 */

	function isInteger(value) {
	  if (typeof value === 'boolean') {
	    return true;
	  }

	  return isFinite(value) ? value === Math.round(value) : false; // Note: we use ==, not ===, as we can have Booleans as well
	}
	/**
	 * Convert a number to a formatted string representation.
	 *
	 * Syntax:
	 *
	 *    format(value)
	 *    format(value, options)
	 *    format(value, precision)
	 *    format(value, fn)
	 *
	 * Where:
	 *
	 *    {number} value   The value to be formatted
	 *    {Object} options An object with formatting options. Available options:
	 *                     {string} notation
	 *                         Number notation. Choose from:
	 *                         'fixed'          Always use regular number notation.
	 *                                          For example '123.40' and '14000000'
	 *                         'exponential'    Always use exponential notation.
	 *                                          For example '1.234e+2' and '1.4e+7'
	 *                         'engineering'    Always use engineering notation.
	 *                                          For example '123.4e+0' and '14.0e+6'
	 *                         'auto' (default) Regular number notation for numbers
	 *                                          having an absolute value between
	 *                                          `lowerExp` and `upperExp` bounds, and
	 *                                          uses exponential notation elsewhere.
	 *                                          Lower bound is included, upper bound
	 *                                          is excluded.
	 *                                          For example '123.4' and '1.4e7'.
	 *                     {number} precision   A number between 0 and 16 to round
	 *                                          the digits of the number.
	 *                                          In case of notations 'exponential',
	 *                                          'engineering', and 'auto',
	 *                                          `precision` defines the total
	 *                                          number of significant digits returned.
	 *                                          In case of notation 'fixed',
	 *                                          `precision` defines the number of
	 *                                          significant digits after the decimal
	 *                                          point.
	 *                                          `precision` is undefined by default,
	 *                                          not rounding any digits.
	 *                     {number} lowerExp    Exponent determining the lower boundary
	 *                                          for formatting a value with an exponent
	 *                                          when `notation='auto`.
	 *                                          Default value is `-3`.
	 *                     {number} upperExp    Exponent determining the upper boundary
	 *                                          for formatting a value with an exponent
	 *                                          when `notation='auto`.
	 *                                          Default value is `5`.
	 *    {Function} fn    A custom formatting function. Can be used to override the
	 *                     built-in notations. Function `fn` is called with `value` as
	 *                     parameter and must return a string. Is useful for example to
	 *                     format all values inside a matrix in a particular way.
	 *
	 * Examples:
	 *
	 *    format(6.4)                                        // '6.4'
	 *    format(1240000)                                    // '1.24e6'
	 *    format(1/3)                                        // '0.3333333333333333'
	 *    format(1/3, 3)                                     // '0.333'
	 *    format(21385, 2)                                   // '21000'
	 *    format(12.071, {notation: 'fixed'})                // '12'
	 *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'
	 *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'
	 *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'
	 *
	 * @param {number} value
	 * @param {Object | Function | number} [options]
	 * @return {string} str The formatted value
	 */

	function format(value, options) {
	  if (typeof options === 'function') {
	    // handle format(value, fn)
	    return options(value);
	  } // handle special cases


	  if (value === Infinity) {
	    return 'Infinity';
	  } else if (value === -Infinity) {
	    return '-Infinity';
	  } else if (isNaN(value)) {
	    return 'NaN';
	  } // default values for options


	  var notation = 'auto';
	  var precision;

	  if (options) {
	    // determine notation from options
	    if (options.notation) {
	      notation = options.notation;
	    } // determine precision from options


	    if (isNumber(options)) {
	      precision = options;
	    } else if (isNumber(options.precision)) {
	      precision = options.precision;
	    }
	  } // handle the various notations


	  switch (notation) {
	    case 'fixed':
	      return toFixed(value, precision);

	    case 'exponential':
	      return toExponential(value, precision);

	    case 'engineering':
	      return toEngineering(value, precision);

	    case 'auto':
	      // remove trailing zeros after the decimal point
	      return toPrecision(value, precision, options && options).replace(/((\.\d*?)(0+))($|e)/, function () {
	        var digits = arguments[2];
	        var e = arguments[4];
	        return digits !== '.' ? digits + e : e;
	      });

	    default:
	      throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", or "fixed".');
	  }
	}
	/**
	 * Split a number into sign, coefficients, and exponent
	 * @param {number | string} value
	 * @return {SplitValue}
	 *              Returns an object containing sign, coefficients, and exponent
	 */

	function splitNumber(value) {
	  // parse the input value
	  var match = String(value).toLowerCase().match(/^0*?(-?)(\d+\.?\d*)(e([+-]?\d+))?$/);

	  if (!match) {
	    throw new SyntaxError('Invalid number ' + value);
	  }

	  var sign = match[1];
	  var digits = match[2];
	  var exponent = parseFloat(match[4] || '0');
	  var dot = digits.indexOf('.');
	  exponent += dot !== -1 ? dot - 1 : digits.length - 1;
	  var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)
	  .replace(/^0*/, function (zeros) {
	    // remove leading zeros, add their count to the exponent
	    exponent -= zeros.length;
	    return '';
	  }).replace(/0*$/, '') // remove trailing zeros
	  .split('').map(function (d) {
	    return parseInt(d);
	  });

	  if (coefficients.length === 0) {
	    coefficients.push(0);
	    exponent++;
	  }

	  return {
	    sign: sign,
	    coefficients: coefficients,
	    exponent: exponent
	  };
	}
	/**
	 * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'
	 * @param {number | string} value
	 * @param {number} [precision]        Optional number of significant figures to return.
	 */

	function toEngineering(value, precision) {
	  if (isNaN(value) || !isFinite(value)) {
	    return String(value);
	  }

	  var split = splitNumber(value);
	  var rounded = roundDigits(split, precision);
	  var e = rounded.exponent;
	  var c = rounded.coefficients; // find nearest lower multiple of 3 for exponent

	  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;

	  if (isNumber(precision)) {
	    // add zeroes to give correct sig figs
	    while (precision > c.length || e - newExp + 1 > c.length) {
	      c.push(0);
	    }
	  } else {
	    // concatenate coefficients with necessary zeros
	    // add zeros if necessary (for example: 1e+8 -> 100e+6)
	    var missingZeros = Math.abs(e - newExp) - (c.length - 1);

	    for (var i = 0; i < missingZeros; i++) {
	      c.push(0);
	    }
	  } // find difference in exponents


	  var expDiff = Math.abs(e - newExp);
	  var decimalIdx = 1; // push decimal index over by expDiff times

	  while (expDiff > 0) {
	    decimalIdx++;
	    expDiff--;
	  } // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.
	  // otherwise concat with the rest of the coefficients


	  var decimals = c.slice(decimalIdx).join('');
	  var decimalVal = isNumber(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';
	  var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();
	  return rounded.sign + str;
	}
	/**
	 * Format a number with fixed notation.
	 * @param {number | string} value
	 * @param {number} [precision=undefined]  Optional number of decimals after the
	 *                                        decimal point. null by default.
	 */

	function toFixed(value, precision) {
	  if (isNaN(value) || !isFinite(value)) {
	    return String(value);
	  }

	  var splitValue = splitNumber(value);
	  var rounded = typeof precision === 'number' ? roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;
	  var c = rounded.coefficients;
	  var p = rounded.exponent + 1; // exponent may have changed
	  // append zeros if needed

	  var pp = p + (precision || 0);

	  if (c.length < pp) {
	    c = c.concat(zeros(pp - c.length));
	  } // prepend zeros if needed


	  if (p < 0) {
	    c = zeros(-p + 1).concat(c);
	    p = 1;
	  } // insert a dot if needed


	  if (p < c.length) {
	    c.splice(p, 0, p === 0 ? '0.' : '.');
	  }

	  return rounded.sign + c.join('');
	}
	/**
	 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
	 * @param {number | string} value
	 * @param {number} [precision]  Number of digits in formatted output.
	 *                              If not provided, the maximum available digits
	 *                              is used.
	 */

	function toExponential(value, precision) {
	  if (isNaN(value) || !isFinite(value)) {
	    return String(value);
	  } // round if needed, else create a clone


	  var split = splitNumber(value);
	  var rounded = precision ? roundDigits(split, precision) : split;
	  var c = rounded.coefficients;
	  var e = rounded.exponent; // append zeros if needed

	  if (c.length < precision) {
	    c = c.concat(zeros(precision - c.length));
	  } // format as `C.CCCe+EEE` or `C.CCCe-EEE`


	  var first = c.shift();
	  return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;
	}
	/**
	 * Format a number with a certain precision
	 * @param {number | string} value
	 * @param {number} [precision=undefined] Optional number of digits.
	 * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]
	 *                                       By default:
	 *                                         lowerExp = -3 (incl)
	 *                                         upper = +5 (excl)
	 * @return {string}
	 */

	function toPrecision(value, precision, options) {
	  if (isNaN(value) || !isFinite(value)) {
	    return String(value);
	  } // determine lower and upper bound for exponential notation.


	  var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;
	  var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;
	  var split = splitNumber(value);
	  var rounded = precision ? roundDigits(split, precision) : split;

	  if (rounded.exponent < lowerExp || rounded.exponent >= upperExp) {
	    // exponential notation
	    return toExponential(value, precision);
	  } else {
	    var c = rounded.coefficients;
	    var e = rounded.exponent; // append trailing zeros

	    if (c.length < precision) {
	      c = c.concat(zeros(precision - c.length));
	    } // append trailing zeros
	    // TODO: simplify the next statement


	    c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0))); // prepend zeros

	    c = zeros(-e).concat(c);
	    var dot = e > 0 ? e : 0;

	    if (dot < c.length - 1) {
	      c.splice(dot + 1, 0, '.');
	    }

	    return rounded.sign + c.join('');
	  }
	}
	/**
	 * Round the number of digits of a number *
	 * @param {SplitValue} split       A value split with .splitNumber(value)
	 * @param {number} precision  A positive integer
	 * @return {SplitValue}
	 *              Returns an object containing sign, coefficients, and exponent
	 *              with rounded digits
	 */

	function roundDigits(split, precision) {
	  // create a clone
	  var rounded = {
	    sign: split.sign,
	    coefficients: split.coefficients,
	    exponent: split.exponent
	  };
	  var c = rounded.coefficients; // prepend zeros if needed

	  while (precision <= 0) {
	    c.unshift(0);
	    rounded.exponent++;
	    precision++;
	  }

	  if (c.length > precision) {
	    var removed = c.splice(precision, c.length - precision);

	    if (removed[0] >= 5) {
	      var i = precision - 1;
	      c[i]++;

	      while (c[i] === 10) {
	        c.pop();

	        if (i === 0) {
	          c.unshift(0);
	          rounded.exponent++;
	          i++;
	        }

	        i--;
	        c[i]++;
	      }
	    }
	  }

	  return rounded;
	}
	/**
	 * Create an array filled with zeros.
	 * @param {number} length
	 * @return {Array}
	 */

	function zeros(length) {
	  var arr = [];

	  for (var i = 0; i < length; i++) {
	    arr.push(0);
	  }

	  return arr;
	}
	/**
	 * Count the number of significant digits of a number.
	 *
	 * For example:
	 *   2.34 returns 3
	 *   0.0034 returns 2
	 *   120.5e+30 returns 4
	 *
	 * @param {number} value
	 * @return {number} digits   Number of significant digits
	 */


	function digits(value) {
	  return value.toExponential().replace(/e.*$/, '') // remove exponential notation
	  .replace(/^0\.?0*|\./, '') // remove decimal point and leading zeros
	  .length;
	}
	/**
	 * Minimum number added to one that makes the result different than one
	 */

	var DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;
	/**
	 * Compares two floating point numbers.
	 * @param {number} x          First value to compare
	 * @param {number} y          Second value to compare
	 * @param {number} [epsilon]  The maximum relative difference between x and y
	 *                            If epsilon is undefined or null, the function will
	 *                            test whether x and y are exactly equal.
	 * @return {boolean} whether the two numbers are nearly equal
	*/

	function nearlyEqual(x, y, epsilon) {
	  // if epsilon is null or undefined, test whether x and y are exactly equal
	  if (epsilon === null || epsilon === undefined) {
	    return x === y;
	  }

	  if (x === y) {
	    return true;
	  } // NaN


	  if (isNaN(x) || isNaN(y)) {
	    return false;
	  } // at this point x and y should be finite


	  if (isFinite(x) && isFinite(y)) {
	    // check numbers are very close, needed when comparing numbers near zero
	    var diff = Math.abs(x - y);

	    if (diff < DBL_EPSILON) {
	      return true;
	    } else {
	      // use relative error
	      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;
	    }
	  } // Infinite and Number or negative Infinite and positive Infinite cases


	  return false;
	}

	/**
	 * Convert a BigNumber to a formatted string representation.
	 *
	 * Syntax:
	 *
	 *    format(value)
	 *    format(value, options)
	 *    format(value, precision)
	 *    format(value, fn)
	 *
	 * Where:
	 *
	 *    {number} value   The value to be formatted
	 *    {Object} options An object with formatting options. Available options:
	 *                     {string} notation
	 *                         Number notation. Choose from:
	 *                         'fixed'          Always use regular number notation.
	 *                                          For example '123.40' and '14000000'
	 *                         'exponential'    Always use exponential notation.
	 *                                          For example '1.234e+2' and '1.4e+7'
	 *                         'auto' (default) Regular number notation for numbers
	 *                                          having an absolute value between
	 *                                          `lower` and `upper` bounds, and uses
	 *                                          exponential notation elsewhere.
	 *                                          Lower bound is included, upper bound
	 *                                          is excluded.
	 *                                          For example '123.4' and '1.4e7'.
	 *                     {number} precision   A number between 0 and 16 to round
	 *                                          the digits of the number.
	 *                                          In case of notations 'exponential',
	 *                                          'engineering', and 'auto',
	 *                                          `precision` defines the total
	 *                                          number of significant digits returned.
	 *                                          In case of notation 'fixed',
	 *                                          `precision` defines the number of
	 *                                          significant digits after the decimal
	 *                                          point.
	 *                                          `precision` is undefined by default.
	 *                     {number} lowerExp    Exponent determining the lower boundary
	 *                                          for formatting a value with an exponent
	 *                                          when `notation='auto`.
	 *                                          Default value is `-3`.
	 *                     {number} upperExp    Exponent determining the upper boundary
	 *                                          for formatting a value with an exponent
	 *                                          when `notation='auto`.
	 *                                          Default value is `5`.
	 *    {Function} fn    A custom formatting function. Can be used to override the
	 *                     built-in notations. Function `fn` is called with `value` as
	 *                     parameter and must return a string. Is useful for example to
	 *                     format all values inside a matrix in a particular way.
	 *
	 * Examples:
	 *
	 *    format(6.4)                                        // '6.4'
	 *    format(1240000)                                    // '1.24e6'
	 *    format(1/3)                                        // '0.3333333333333333'
	 *    format(1/3, 3)                                     // '0.333'
	 *    format(21385, 2)                                   // '21000'
	 *    format(12e8, {notation: 'fixed'})                  // returns '1200000000'
	 *    format(2.3,    {notation: 'fixed', precision: 4})  // returns '2.3000'
	 *    format(52.8,   {notation: 'exponential'})          // returns '5.28e+1'
	 *    format(12400,  {notation: 'engineering'})          // returns '12.400e+3'
	 *
	 * @param {BigNumber} value
	 * @param {Object | Function | number} [options]
	 * @return {string} str The formatted value
	 */
	function format$1(value, options) {
	  if (typeof options === 'function') {
	    // handle format(value, fn)
	    return options(value);
	  } // handle special cases


	  if (!value.isFinite()) {
	    return value.isNaN() ? 'NaN' : value.gt(0) ? 'Infinity' : '-Infinity';
	  } // default values for options


	  var notation = 'auto';
	  var precision;

	  if (options !== undefined) {
	    // determine notation from options
	    if (options.notation) {
	      notation = options.notation;
	    } // determine precision from options


	    if (typeof options === 'number') {
	      precision = options;
	    } else if (options.precision) {
	      precision = options.precision;
	    }
	  } // handle the various notations


	  switch (notation) {
	    case 'fixed':
	      return toFixed$1(value, precision);

	    case 'exponential':
	      return toExponential$1(value, precision);

	    case 'engineering':
	      return toEngineering$1(value, precision);

	    case 'auto':
	      {
	        // determine lower and upper bound for exponential notation.
	        // TODO: implement support for upper and lower to be BigNumbers themselves
	        var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;
	        var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5; // handle special case zero

	        if (value.isZero()) return '0'; // determine whether or not to output exponential notation

	        var str;
	        var rounded = value.toSignificantDigits(precision);
	        var exp = rounded.e;

	        if (exp >= lowerExp && exp < upperExp) {
	          // normal number notation
	          str = rounded.toFixed();
	        } else {
	          // exponential notation
	          str = toExponential$1(value, precision);
	        } // remove trailing zeros after the decimal point


	        return str.replace(/((\.\d*?)(0+))($|e)/, function () {
	          var digits = arguments[2];
	          var e = arguments[4];
	          return digits !== '.' ? digits + e : e;
	        });
	      }

	    default:
	      throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", or "fixed".');
	  }
	}
	/**
	 * Format a BigNumber in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'
	 * @param {BigNumber | string} value
	 * @param {number} [precision]        Optional number of significant figures to return.
	 */

	function toEngineering$1(value, precision) {
	  // find nearest lower multiple of 3 for exponent
	  var e = value.e;
	  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3; // find difference in exponents, and calculate the value without exponent

	  var valueWithoutExp = value.mul(Math.pow(10, -newExp));
	  var valueStr = valueWithoutExp.toPrecision(precision);

	  if (valueStr.indexOf('e') !== -1) {
	    valueStr = valueWithoutExp.toString();
	  }

	  return valueStr + 'e' + (e >= 0 ? '+' : '') + newExp.toString();
	}
	/**
	 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
	 * @param {BigNumber} value
	 * @param {number} [precision]  Number of digits in formatted output.
	 *                              If not provided, the maximum available digits
	 *                              is used.
	 * @returns {string} str
	 */

	function toExponential$1(value, precision) {
	  if (precision !== undefined) {
	    return value.toExponential(precision - 1); // Note the offset of one
	  } else {
	    return value.toExponential();
	  }
	}
	/**
	 * Format a number with fixed notation.
	 * @param {BigNumber} value
	 * @param {number} [precision=undefined] Optional number of decimals after the
	 *                                       decimal point. Undefined by default.
	 */

	function toFixed$1(value, precision) {
	  return value.toFixed(precision);
	}

	function _typeof$2(obj) {
	  "@babel/helpers - typeof";

	  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
	    _typeof$2 = function _typeof(obj) {
	      return typeof obj;
	    };
	  } else {
	    _typeof$2 = function _typeof(obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	    };
	  }

	  return _typeof$2(obj);
	}
	/**
	 * Format a value of any type into a string.
	 *
	 * Usage:
	 *     math.format(value)
	 *     math.format(value, precision)
	 *
	 * When value is a function:
	 *
	 * - When the function has a property `syntax`, it returns this
	 *   syntax description.
	 * - In other cases, a string `'function'` is returned.
	 *
	 * When `value` is an Object:
	 *
	 * - When the object contains a property `format` being a function, this
	 *   function is invoked as `value.format(options)` and the result is returned.
	 * - When the object has its own `toString` method, this method is invoked
	 *   and the result is returned.
	 * - In other cases the function will loop over all object properties and
	 *   return JSON object notation like '{"a": 2, "b": 3}'.
	 *
	 * Example usage:
	 *     math.format(2/7)                // '0.2857142857142857'
	 *     math.format(math.pi, 3)         // '3.14'
	 *     math.format(new Complex(2, 3))  // '2 + 3i'
	 *     math.format('hello')            // '"hello"'
	 *
	 * @param {*} value             Value to be stringified
	 * @param {Object | number | Function} [options]  Formatting options. See
	 *                                                lib/utils/number:format for a
	 *                                                description of the available
	 *                                                options.
	 * @return {string} str
	 */

	function format$2(value, options) {
	  if (typeof value === 'number') {
	    return format(value, options);
	  }

	  if (isBigNumber(value)) {
	    return format$1(value, options);
	  } // note: we use unsafe duck-typing here to check for Fractions, this is
	  // ok here since we're only invoking toString or concatenating its values


	  if (looksLikeFraction(value)) {
	    if (!options || options.fraction !== 'decimal') {
	      // output as ratio, like '1/3'
	      return value.s * value.n + '/' + value.d;
	    } else {
	      // output as decimal, like '0.(3)'
	      return value.toString();
	    }
	  }

	  if (Array.isArray(value)) {
	    return formatArray(value, options);
	  }

	  if (isString(value)) {
	    return '"' + value + '"';
	  }

	  if (typeof value === 'function') {
	    return value.syntax ? String(value.syntax) : 'function';
	  }

	  if (value && _typeof$2(value) === 'object') {
	    if (typeof value.format === 'function') {
	      return value.format(options);
	    } else if (value && value.toString(options) !== {}.toString()) {
	      // this object has a non-native toString method, use that one
	      return value.toString(options);
	    } else {
	      var entries = Object.keys(value).map(function (key) {
	        return '"' + key + '": ' + format$2(value[key], options);
	      });
	      return '{' + entries.join(', ') + '}';
	    }
	  }

	  return String(value);
	}
	/**
	 * Recursively format an n-dimensional matrix
	 * Example output: "[[1, 2], [3, 4]]"
	 * @param {Array} array
	 * @param {Object | number | Function} [options]  Formatting options. See
	 *                                                lib/utils/number:format for a
	 *                                                description of the available
	 *                                                options.
	 * @returns {string} str
	 */

	function formatArray(array, options) {
	  if (Array.isArray(array)) {
	    var str = '[';
	    var len = array.length;

	    for (var i = 0; i < len; i++) {
	      if (i !== 0) {
	        str += ', ';
	      }

	      str += formatArray(array[i], options);
	    }

	    str += ']';
	    return str;
	  } else {
	    return format$2(array, options);
	  }
	}
	/**
	 * Check whether a value looks like a Fraction (unsafe duck-type check)
	 * @param {*} value
	 * @return {boolean}
	 */


	function looksLikeFraction(value) {
	  return value && _typeof$2(value) === 'object' && typeof value.s === 'number' && typeof value.n === 'number' && typeof value.d === 'number' || false;
	}

	/**
	 * Create a range error with the message:
	 *     'Dimension mismatch (<actual size> != <expected size>)'
	 * @param {number | number[]} actual        The actual size
	 * @param {number | number[]} expected      The expected size
	 * @param {string} [relation='!=']          Optional relation between actual
	 *                                          and expected size: '!=', '<', etc.
	 * @extends RangeError
	 */
	function DimensionError(actual, expected, relation) {
	  if (!(this instanceof DimensionError)) {
	    throw new SyntaxError('Constructor must be called with the new operator');
	  }

	  this.actual = actual;
	  this.expected = expected;
	  this.relation = relation;
	  this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? '[' + actual.join(', ') + ']' : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? '[' + expected.join(', ') + ']' : expected) + ')';
	  this.stack = new Error().stack;
	}
	DimensionError.prototype = new RangeError();
	DimensionError.prototype.constructor = RangeError;
	DimensionError.prototype.name = 'DimensionError';
	DimensionError.prototype.isDimensionError = true;

	/**
	 * Create a range error with the message:
	 *     'Index out of range (index < min)'
	 *     'Index out of range (index < max)'
	 *
	 * @param {number} index     The actual index
	 * @param {number} [min=0]   Minimum index (included)
	 * @param {number} [max]     Maximum index (excluded)
	 * @extends RangeError
	 */
	function IndexError(index, min, max) {
	  if (!(this instanceof IndexError)) {
	    throw new SyntaxError('Constructor must be called with the new operator');
	  }

	  this.index = index;

	  if (arguments.length < 3) {
	    this.min = 0;
	    this.max = min;
	  } else {
	    this.min = min;
	    this.max = max;
	  }

	  if (this.min !== undefined && this.index < this.min) {
	    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';
	  } else if (this.max !== undefined && this.index >= this.max) {
	    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';
	  } else {
	    this.message = 'Index out of range (' + this.index + ')';
	  }

	  this.stack = new Error().stack;
	}
	IndexError.prototype = new RangeError();
	IndexError.prototype.constructor = RangeError;
	IndexError.prototype.name = 'IndexError';
	IndexError.prototype.isIndexError = true;

	/**
	 * Calculate the size of a multi dimensional array.
	 * This function checks the size of the first entry, it does not validate
	 * whether all dimensions match. (use function `validate` for that)
	 * @param {Array} x
	 * @Return {Number[]} size
	 */

	function arraySize(x) {
	  var s = [];

	  while (Array.isArray(x)) {
	    s.push(x.length);
	    x = x[0];
	  }

	  return s;
	}
	/**
	 * Recursively validate whether each element in a multi dimensional array
	 * has a size corresponding to the provided size array.
	 * @param {Array} array    Array to be validated
	 * @param {number[]} size  Array with the size of each dimension
	 * @param {number} dim   Current dimension
	 * @throws DimensionError
	 * @private
	 */

	function _validate(array, size, dim) {
	  var i;
	  var len = array.length;

	  if (len !== size[dim]) {
	    throw new DimensionError(len, size[dim]);
	  }

	  if (dim < size.length - 1) {
	    // recursively validate each child array
	    var dimNext = dim + 1;

	    for (i = 0; i < len; i++) {
	      var child = array[i];

	      if (!Array.isArray(child)) {
	        throw new DimensionError(size.length - 1, size.length, '<');
	      }

	      _validate(array[i], size, dimNext);
	    }
	  } else {
	    // last dimension. none of the childs may be an array
	    for (i = 0; i < len; i++) {
	      if (Array.isArray(array[i])) {
	        throw new DimensionError(size.length + 1, size.length, '>');
	      }
	    }
	  }
	}
	/**
	 * Validate whether each element in a multi dimensional array has
	 * a size corresponding to the provided size array.
	 * @param {Array} array    Array to be validated
	 * @param {number[]} size  Array with the size of each dimension
	 * @throws DimensionError
	 */


	function validate(array, size) {
	  var isScalar = size.length === 0;

	  if (isScalar) {
	    // scalar
	    if (Array.isArray(array)) {
	      throw new DimensionError(array.length, 0);
	    }
	  } else {
	    // array
	    _validate(array, size, 0);
	  }
	}
	/**
	 * Test whether index is an integer number with index >= 0 and index < length
	 * when length is provided
	 * @param {number} index    Zero-based index
	 * @param {number} [length] Length of the array
	 */

	function validateIndex(index, length) {
	  if (!isNumber(index) || !isInteger(index)) {
	    throw new TypeError('Index must be an integer (value: ' + index + ')');
	  }

	  if (index < 0 || typeof length === 'number' && index >= length) {
	    throw new IndexError(index, length);
	  }
	}
	/**
	 * Resize a multi dimensional array. The resized array is returned.
	 * @param {Array} array         Array to be resized
	 * @param {Array.<number>} size Array with the size of each dimension
	 * @param {*} [defaultValue=0]  Value to be filled in in new entries,
	 *                              zero by default. Specify for example `null`,
	 *                              to clearly see entries that are not explicitly
	 *                              set.
	 * @return {Array} array         The resized array
	 */

	function resize(array, size, defaultValue) {
	  // TODO: add support for scalars, having size=[] ?
	  // check the type of the arguments
	  if (!Array.isArray(array) || !Array.isArray(size)) {
	    throw new TypeError('Array expected');
	  }

	  if (size.length === 0) {
	    throw new Error('Resizing to scalar is not supported');
	  } // check whether size contains positive integers


	  size.forEach(function (value) {
	    if (!isNumber(value) || !isInteger(value) || value < 0) {
	      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format$2(size) + ')');
	    }
	  }); // recursively resize the array

	  var _defaultValue = defaultValue !== undefined ? defaultValue : 0;

	  _resize(array, size, 0, _defaultValue);

	  return array;
	}
	/**
	 * Recursively resize a multi dimensional array
	 * @param {Array} array         Array to be resized
	 * @param {number[]} size       Array with the size of each dimension
	 * @param {number} dim          Current dimension
	 * @param {*} [defaultValue]    Value to be filled in in new entries,
	 *                              undefined by default.
	 * @private
	 */

	function _resize(array, size, dim, defaultValue) {
	  var i;
	  var elem;
	  var oldLen = array.length;
	  var newLen = size[dim];
	  var minLen = Math.min(oldLen, newLen); // apply new length

	  array.length = newLen;

	  if (dim < size.length - 1) {
	    // non-last dimension
	    var dimNext = dim + 1; // resize existing child arrays

	    for (i = 0; i < minLen; i++) {
	      // resize child array
	      elem = array[i];

	      if (!Array.isArray(elem)) {
	        elem = [elem]; // add a dimension

	        array[i] = elem;
	      }

	      _resize(elem, size, dimNext, defaultValue);
	    } // create new child arrays


	    for (i = minLen; i < newLen; i++) {
	      // get child array
	      elem = [];
	      array[i] = elem; // resize new child array

	      _resize(elem, size, dimNext, defaultValue);
	    }
	  } else {
	    // last dimension
	    // remove dimensions of existing values
	    for (i = 0; i < minLen; i++) {
	      while (Array.isArray(array[i])) {
	        array[i] = array[i][0];
	      }
	    } // fill new elements with the default value


	    for (i = minLen; i < newLen; i++) {
	      array[i] = defaultValue;
	    }
	  }
	}
	/**
	 * Re-shape a multi dimensional array to fit the specified dimensions
	 * @param {Array} array           Array to be reshaped
	 * @param {Array.<number>} sizes  List of sizes for each dimension
	 * @returns {Array}               Array whose data has been formatted to fit the
	 *                                specified dimensions
	 *
	 * @throws {DimensionError}       If the product of the new dimension sizes does
	 *                                not equal that of the old ones
	 */


	function reshape(array, sizes) {
	  var flatArray = flatten(array);
	  var newArray;

	  function product(arr) {
	    return arr.reduce(function (prev, curr) {
	      return prev * curr;
	    });
	  }

	  if (!Array.isArray(array) || !Array.isArray(sizes)) {
	    throw new TypeError('Array expected');
	  }

	  if (sizes.length === 0) {
	    throw new DimensionError(0, product(arraySize(array)), '!=');
	  }

	  var totalSize = 1;

	  for (var sizeIndex = 0; sizeIndex < sizes.length; sizeIndex++) {
	    totalSize *= sizes[sizeIndex];
	  }

	  if (flatArray.length !== totalSize) {
	    throw new DimensionError(product(sizes), product(arraySize(array)), '!=');
	  }

	  try {
	    newArray = _reshape(flatArray, sizes);
	  } catch (e) {
	    if (e instanceof DimensionError) {
	      throw new DimensionError(product(sizes), product(arraySize(array)), '!=');
	    }

	    throw e;
	  }

	  return newArray;
	}
	/**
	 * Iteratively re-shape a multi dimensional array to fit the specified dimensions
	 * @param {Array} array           Array to be reshaped
	 * @param {Array.<number>} sizes  List of sizes for each dimension
	 * @returns {Array}               Array whose data has been formatted to fit the
	 *                                specified dimensions
	 */

	function _reshape(array, sizes) {
	  // testing if there are enough elements for the requested shape
	  var tmpArray = array;
	  var tmpArray2; // for each dimensions starting by the last one and ignoring the first one

	  for (var sizeIndex = sizes.length - 1; sizeIndex > 0; sizeIndex--) {
	    var size = sizes[sizeIndex];
	    tmpArray2 = []; // aggregate the elements of the current tmpArray in elements of the requested size

	    var length = tmpArray.length / size;

	    for (var i = 0; i < length; i++) {
	      tmpArray2.push(tmpArray.slice(i * size, (i + 1) * size));
	    } // set it as the new tmpArray for the next loop turn or for return


	    tmpArray = tmpArray2;
	  }

	  return tmpArray;
	}
	/**
	 * Squeeze a multi dimensional array
	 * @param {Array} array
	 * @param {Array} [size]
	 * @returns {Array} returns the array itself
	 */


	function squeeze(array, size) {
	  var s = size || arraySize(array); // squeeze outer dimensions

	  while (Array.isArray(array) && array.length === 1) {
	    array = array[0];
	    s.shift();
	  } // find the first dimension to be squeezed


	  var dims = s.length;

	  while (s[dims - 1] === 1) {
	    dims--;
	  } // squeeze inner dimensions


	  if (dims < s.length) {
	    array = _squeeze(array, dims, 0);
	    s.length = dims;
	  }

	  return array;
	}
	/**
	 * Recursively squeeze a multi dimensional array
	 * @param {Array} array
	 * @param {number} dims Required number of dimensions
	 * @param {number} dim  Current dimension
	 * @returns {Array | *} Returns the squeezed array
	 * @private
	 */

	function _squeeze(array, dims, dim) {
	  var i, ii;

	  if (dim < dims) {
	    var next = dim + 1;

	    for (i = 0, ii = array.length; i < ii; i++) {
	      array[i] = _squeeze(array[i], dims, next);
	    }
	  } else {
	    while (Array.isArray(array)) {
	      array = array[0];
	    }
	  }

	  return array;
	}
	/**
	 * Unsqueeze a multi dimensional array: add dimensions when missing
	 *
	 * Paramter `size` will be mutated to match the new, unqueezed matrix size.
	 *
	 * @param {Array} array
	 * @param {number} dims       Desired number of dimensions of the array
	 * @param {number} [outer]    Number of outer dimensions to be added
	 * @param {Array} [size] Current size of array.
	 * @returns {Array} returns the array itself
	 * @private
	 */


	function unsqueeze(array, dims, outer, size) {
	  var s = size || arraySize(array); // unsqueeze outer dimensions

	  if (outer) {
	    for (var i = 0; i < outer; i++) {
	      array = [array];
	      s.unshift(1);
	    }
	  } // unsqueeze inner dimensions


	  array = _unsqueeze(array, dims, 0);

	  while (s.length < dims) {
	    s.push(1);
	  }

	  return array;
	}
	/**
	 * Recursively unsqueeze a multi dimensional array
	 * @param {Array} array
	 * @param {number} dims Required number of dimensions
	 * @param {number} dim  Current dimension
	 * @returns {Array | *} Returns the squeezed array
	 * @private
	 */

	function _unsqueeze(array, dims, dim) {
	  var i, ii;

	  if (Array.isArray(array)) {
	    var next = dim + 1;

	    for (i = 0, ii = array.length; i < ii; i++) {
	      array[i] = _unsqueeze(array[i], dims, next);
	    }
	  } else {
	    for (var d = dim; d < dims; d++) {
	      array = [array];
	    }
	  }

	  return array;
	}
	/**
	 * Flatten a multi dimensional array, put all elements in a one dimensional
	 * array
	 * @param {Array} array   A multi dimensional array
	 * @return {Array}        The flattened array (1 dimensional)
	 */


	function flatten(array) {
	  if (!Array.isArray(array)) {
	    // if not an array, return as is
	    return array;
	  }

	  var flat = [];
	  array.forEach(function callback(value) {
	    if (Array.isArray(value)) {
	      value.forEach(callback); // traverse through sub-arrays recursively
	    } else {
	      flat.push(value);
	    }
	  });
	  return flat;
	}
	/**
	 * Check the datatype of a given object
	 * This is a low level implementation that should only be used by
	 * parent Matrix classes such as SparseMatrix or DenseMatrix
	 * This method does not validate Array Matrix shape
	 * @param {Array} array
	 * @param {function} typeOf   Callback function to use to determine the type of a value
	 * @return string
	 */

	function getArrayDataType(array, typeOf) {
	  var type; // to hold type info

	  var length = 0; // to hold length value to ensure it has consistent sizes

	  for (var i = 0; i < array.length; i++) {
	    var item = array[i];
	    var isArray = Array.isArray(item); // Saving the target matrix row size

	    if (i === 0 && isArray) {
	      length = item.length;
	    } // If the current item is an array but the length does not equal the targetVectorSize


	    if (isArray && item.length !== length) {
	      return undefined;
	    }

	    var itemType = isArray ? getArrayDataType(item, typeOf) // recurse into a nested array
	    : typeOf(item);

	    if (type === undefined) {
	      type = itemType; // first item
	    } else if (type !== itemType) {
	      return 'mixed';
	    } else ;
	  }

	  return type;
	}

	/**
	 * Create a factory function, which can be used to inject dependencies.
	 *
	 * The created functions are memoized, a consecutive call of the factory
	 * with the exact same inputs will return the same function instance.
	 * The memoized cache is exposed on `factory.cache` and can be cleared
	 * if needed.
	 *
	 * Example:
	 *
	 *     const name = 'log'
	 *     const dependencies = ['config', 'typed', 'divideScalar', 'Complex']
	 *
	 *     export const createLog = factory(name, dependencies, ({ typed, config, divideScalar, Complex }) => {
	 *       // ... create the function log here and return it
	 *     }
	 *
	 * @param {string} name           Name of the function to be created
	 * @param {string[]} dependencies The names of all required dependencies
	 * @param {function} create       Callback function called with an object with all dependencies
	 * @param {Object} [meta]         Optional object with meta information that will be attached
	 *                                to the created factory function as property `meta`.
	 * @returns {function}
	 */

	function factory(name, dependencies, create, meta) {
	  function assertAndCreate(scope) {
	    // we only pass the requested dependencies to the factory function
	    // to prevent functions to rely on dependencies that are not explicitly
	    // requested.
	    var deps = pickShallow(scope, dependencies.map(stripOptionalNotation));
	    assertDependencies(name, dependencies, scope);
	    return create(deps);
	  }

	  assertAndCreate.isFactory = true;
	  assertAndCreate.fn = name;
	  assertAndCreate.dependencies = dependencies.slice().sort();

	  if (meta) {
	    assertAndCreate.meta = meta;
	  }

	  return assertAndCreate;
	}
	/**
	 * Assert that all dependencies of a list with dependencies are available in the provided scope.
	 *
	 * Will throw an exception when there are dependencies missing.
	 *
	 * @param {string} name   Name for the function to be created. Used to generate a useful error message
	 * @param {string[]} dependencies
	 * @param {Object} scope
	 */

	function assertDependencies(name, dependencies, scope) {
	  var allDefined = dependencies.filter(function (dependency) {
	    return !isOptionalDependency(dependency);
	  }) // filter optionals
	  .every(function (dependency) {
	    return scope[dependency] !== undefined;
	  });

	  if (!allDefined) {
	    var missingDependencies = dependencies.filter(function (dependency) {
	      return scope[dependency] === undefined;
	    }); // TODO: create a custom error class for this, a MathjsError or something like that

	    throw new Error("Cannot create function \"".concat(name, "\", ") + "some dependencies are missing: ".concat(missingDependencies.map(function (d) {
	      return "\"".concat(d, "\"");
	    }).join(', '), "."));
	  }
	}
	function isOptionalDependency(dependency) {
	  return dependency && dependency[0] === '?';
	}
	function stripOptionalNotation(dependency) {
	  return dependency && dependency[0] === '?' ? dependency.slice(1) : dependency;
	}

	/**
	 * Create a typed-function which checks the types of the arguments and
	 * can match them against multiple provided signatures. The typed-function
	 * automatically converts inputs in order to find a matching signature.
	 * Typed functions throw informative errors in case of wrong input arguments.
	 *
	 * See the library [typed-function](https://github.com/josdejong/typed-function)
	 * for detailed documentation.
	 *
	 * Syntax:
	 *
	 *     math.typed(name, signatures) : function
	 *     math.typed(signatures) : function
	 *
	 * Examples:
	 *
	 *     // create a typed function with multiple types per argument (type union)
	 *     const fn2 = typed({
	 *       'number | boolean': function (b) {
	 *         return 'b is a number or boolean'
	 *       },
	 *       'string, number | boolean': function (a, b) {
	 *         return 'a is a string, b is a number or boolean'
	 *       }
	 *     })
	 *
	 *     // create a typed function with an any type argument
	 *     const log = typed({
	 *       'string, any': function (event, data) {
	 *         console.log('event: ' + event + ', data: ' + JSON.stringify(data))
	 *       }
	 *     })
	 *
	 * @param {string} [name]                          Optional name for the typed-function
	 * @param {Object<string, function>} signatures   Object with one or multiple function signatures
	 * @returns {function} The created typed-function.
	 */

	var _createTyped2 = function _createTyped() {
	  // initially, return the original instance of typed-function
	  // consecutively, return a new instance from typed.create.
	  _createTyped2 = typedFunction.create;
	  return typedFunction;
	};

	var dependencies = ['?BigNumber', '?Complex', '?DenseMatrix', '?Fraction'];
	/**
	 * Factory function for creating a new typed instance
	 * @param {Object} dependencies   Object with data types like Complex and BigNumber
	 * @returns {Function}
	 */

	var createTyped = /* #__PURE__ */factory('typed', dependencies, function createTyped(_ref) {
	  var BigNumber = _ref.BigNumber,
	      Complex = _ref.Complex,
	      DenseMatrix = _ref.DenseMatrix,
	      Fraction = _ref.Fraction; // TODO: typed-function must be able to silently ignore signatures with unknown data types
	  // get a new instance of typed-function

	  var typed = _createTyped2(); // define all types. The order of the types determines in which order function
	  // arguments are type-checked (so for performance it's important to put the
	  // most used types first).


	  typed.types = [{
	    name: 'number',
	    test: isNumber
	  }, {
	    name: 'Complex',
	    test: isComplex
	  }, {
	    name: 'BigNumber',
	    test: isBigNumber
	  }, {
	    name: 'Fraction',
	    test: isFraction
	  }, {
	    name: 'Unit',
	    test: isUnit
	  }, {
	    name: 'string',
	    test: isString
	  }, {
	    name: 'Chain',
	    test: isChain
	  }, {
	    name: 'Array',
	    test: isArray
	  }, {
	    name: 'Matrix',
	    test: isMatrix
	  }, {
	    name: 'DenseMatrix',
	    test: isDenseMatrix
	  }, {
	    name: 'SparseMatrix',
	    test: isSparseMatrix
	  }, {
	    name: 'Range',
	    test: isRange
	  }, {
	    name: 'Index',
	    test: isIndex
	  }, {
	    name: 'boolean',
	    test: isBoolean
	  }, {
	    name: 'ResultSet',
	    test: isResultSet
	  }, {
	    name: 'Help',
	    test: isHelp
	  }, {
	    name: 'function',
	    test: isFunction
	  }, {
	    name: 'Date',
	    test: isDate
	  }, {
	    name: 'RegExp',
	    test: isRegExp
	  }, {
	    name: 'null',
	    test: isNull
	  }, {
	    name: 'undefined',
	    test: isUndefined
	  }, {
	    name: 'AccessorNode',
	    test: isAccessorNode
	  }, {
	    name: 'ArrayNode',
	    test: isArrayNode
	  }, {
	    name: 'AssignmentNode',
	    test: isAssignmentNode
	  }, {
	    name: 'BlockNode',
	    test: isBlockNode
	  }, {
	    name: 'ConditionalNode',
	    test: isConditionalNode
	  }, {
	    name: 'ConstantNode',
	    test: isConstantNode
	  }, {
	    name: 'FunctionNode',
	    test: isFunctionNode
	  }, {
	    name: 'FunctionAssignmentNode',
	    test: isFunctionAssignmentNode
	  }, {
	    name: 'IndexNode',
	    test: isIndexNode
	  }, {
	    name: 'Node',
	    test: isNode
	  }, {
	    name: 'ObjectNode',
	    test: isObjectNode
	  }, {
	    name: 'OperatorNode',
	    test: isOperatorNode
	  }, {
	    name: 'ParenthesisNode',
	    test: isParenthesisNode
	  }, {
	    name: 'RangeNode',
	    test: isRangeNode
	  }, {
	    name: 'SymbolNode',
	    test: isSymbolNode
	  }, {
	    name: 'Object',
	    test: isObject
	  } // order 'Object' last, it matches on other classes too
	  ];
	  typed.conversions = [{
	    from: 'number',
	    to: 'BigNumber',
	    convert: function convert(x) {
	      if (!BigNumber) {
	        throwNoBignumber(x);
	      } // note: conversion from number to BigNumber can fail if x has >15 digits


	      if (digits(x) > 15) {
	        throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' + '(value: ' + x + '). ' + 'Use function bignumber(x) to convert to BigNumber.');
	      }

	      return new BigNumber(x);
	    }
	  }, {
	    from: 'number',
	    to: 'Complex',
	    convert: function convert(x) {
	      if (!Complex) {
	        throwNoComplex(x);
	      }

	      return new Complex(x, 0);
	    }
	  }, {
	    from: 'number',
	    to: 'string',
	    convert: function convert(x) {
	      return x + '';
	    }
	  }, {
	    from: 'BigNumber',
	    to: 'Complex',
	    convert: function convert(x) {
	      if (!Complex) {
	        throwNoComplex(x);
	      }

	      return new Complex(x.toNumber(), 0);
	    }
	  }, {
	    from: 'Fraction',
	    to: 'BigNumber',
	    convert: function convert(x) {
	      throw new TypeError('Cannot implicitly convert a Fraction to BigNumber or vice versa. ' + 'Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.');
	    }
	  }, {
	    from: 'Fraction',
	    to: 'Complex',
	    convert: function convert(x) {
	      if (!Complex) {
	        throwNoComplex(x);
	      }

	      return new Complex(x.valueOf(), 0);
	    }
	  }, {
	    from: 'number',
	    to: 'Fraction',
	    convert: function convert(x) {
	      if (!Fraction) {
	        throwNoFraction(x);
	      }

	      var f = new Fraction(x);

	      if (f.valueOf() !== x) {
	        throw new TypeError('Cannot implicitly convert a number to a Fraction when there will be a loss of precision ' + '(value: ' + x + '). ' + 'Use function fraction(x) to convert to Fraction.');
	      }

	      return f;
	    }
	  }, {
	    // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`
	    //  from: 'Fraction',
	    //  to: 'number',
	    //  convert: function (x) {
	    //    return x.valueOf()
	    //  }
	    // }, {
	    from: 'string',
	    to: 'number',
	    convert: function convert(x) {
	      var n = Number(x);

	      if (isNaN(n)) {
	        throw new Error('Cannot convert "' + x + '" to a number');
	      }

	      return n;
	    }
	  }, {
	    from: 'string',
	    to: 'BigNumber',
	    convert: function convert(x) {
	      if (!BigNumber) {
	        throwNoBignumber(x);
	      }

	      try {
	        return new BigNumber(x);
	      } catch (err) {
	        throw new Error('Cannot convert "' + x + '" to BigNumber');
	      }
	    }
	  }, {
	    from: 'string',
	    to: 'Fraction',
	    convert: function convert(x) {
	      if (!Fraction) {
	        throwNoFraction(x);
	      }

	      try {
	        return new Fraction(x);
	      } catch (err) {
	        throw new Error('Cannot convert "' + x + '" to Fraction');
	      }
	    }
	  }, {
	    from: 'string',
	    to: 'Complex',
	    convert: function convert(x) {
	      if (!Complex) {
	        throwNoComplex(x);
	      }

	      try {
	        return new Complex(x);
	      } catch (err) {
	        throw new Error('Cannot convert "' + x + '" to Complex');
	      }
	    }
	  }, {
	    from: 'boolean',
	    to: 'number',
	    convert: function convert(x) {
	      return +x;
	    }
	  }, {
	    from: 'boolean',
	    to: 'BigNumber',
	    convert: function convert(x) {
	      if (!BigNumber) {
	        throwNoBignumber(x);
	      }

	      return new BigNumber(+x);
	    }
	  }, {
	    from: 'boolean',
	    to: 'Fraction',
	    convert: function convert(x) {
	      if (!Fraction) {
	        throwNoFraction(x);
	      }

	      return new Fraction(+x);
	    }
	  }, {
	    from: 'boolean',
	    to: 'string',
	    convert: function convert(x) {
	      return String(x);
	    }
	  }, {
	    from: 'Array',
	    to: 'Matrix',
	    convert: function convert(array) {
	      if (!DenseMatrix) {
	        throwNoMatrix();
	      }

	      return new DenseMatrix(array);
	    }
	  }, {
	    from: 'Matrix',
	    to: 'Array',
	    convert: function convert(matrix) {
	      return matrix.valueOf();
	    }
	  }];
	  return typed;
	});

	function throwNoBignumber(x) {
	  throw new Error("Cannot convert value ".concat(x, " into a BigNumber: no class 'BigNumber' provided"));
	}

	function throwNoComplex(x) {
	  throw new Error("Cannot convert value ".concat(x, " into a Complex number: no class 'Complex' provided"));
	}

	function throwNoMatrix() {
	  throw new Error('Cannot convert array into a Matrix: no class \'DenseMatrix\' provided');
	}

	function throwNoFraction(x) {
	  throw new Error("Cannot convert value ".concat(x, " into a Fraction, no class 'Fraction' provided."));
	}

	var decimal = createCommonjsModule(function (module) {

	  (function (globalScope) {
	    /*
	     *  decimal.js v10.2.0
	     *  An arbitrary-precision Decimal type for JavaScript.
	     *  https://github.com/MikeMcl/decimal.js
	     *  Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>
	     *  MIT Licence
	     */
	    // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //
	    // The maximum exponent magnitude.
	    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.

	    var EXP_LIMIT = 9e15,
	        // 0 to 9e15
	    // The limit on the value of `precision`, and on the value of the first argument to
	    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.
	    MAX_DIGITS = 1e9,
	        // 0 to 1e9
	    // Base conversion alphabet.
	    NUMERALS = '0123456789abcdef',
	        // The natural logarithm of 10 (1025 digits).
	    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',
	        // Pi (1025 digits).
	    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',
	        // The initial configuration properties of the Decimal constructor.
	    DEFAULTS = {
	      // These values must be integers within the stated ranges (inclusive).
	      // Most of these values can be changed at run-time using the `Decimal.config` method.
	      // The maximum number of significant digits of the result of a calculation or base conversion.
	      // E.g. `Decimal.config({ precision: 20 });`
	      precision: 20,
	      // 1 to MAX_DIGITS
	      // The rounding mode used when rounding to `precision`.
	      //
	      // ROUND_UP         0 Away from zero.
	      // ROUND_DOWN       1 Towards zero.
	      // ROUND_CEIL       2 Towards +Infinity.
	      // ROUND_FLOOR      3 Towards -Infinity.
	      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
	      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
	      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
	      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
	      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
	      //
	      // E.g.
	      // `Decimal.rounding = 4;`
	      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
	      rounding: 4,
	      // 0 to 8
	      // The modulo mode used when calculating the modulus: a mod n.
	      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
	      // The remainder (r) is calculated as: r = a - n * q.
	      //
	      // UP         0 The remainder is positive if the dividend is negative, else is negative.
	      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).
	      // FLOOR      3 The remainder has the same sign as the divisor (Python %).
	      // HALF_EVEN  6 The IEEE 754 remainder function.
	      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.
	      //
	      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian
	      // division (9) are commonly used for the modulus operation. The other rounding modes can also
	      // be used, but they may not give useful results.
	      modulo: 1,
	      // 0 to 9
	      // The exponent value at and beneath which `toString` returns exponential notation.
	      // JavaScript numbers: -7
	      toExpNeg: -7,
	      // 0 to -EXP_LIMIT
	      // The exponent value at and above which `toString` returns exponential notation.
	      // JavaScript numbers: 21
	      toExpPos: 21,
	      // 0 to EXP_LIMIT
	      // The minimum exponent value, beneath which underflow to zero occurs.
	      // JavaScript numbers: -324  (5e-324)
	      minE: -EXP_LIMIT,
	      // -1 to -EXP_LIMIT
	      // The maximum exponent value, above which overflow to Infinity occurs.
	      // JavaScript numbers: 308  (1.7976931348623157e+308)
	      maxE: EXP_LIMIT,
	      // 1 to EXP_LIMIT
	      // Whether to use cryptographically-secure random number generation, if available.
	      crypto: false // true/false

	    },
	        // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //
	    Decimal,
	        inexact,
	        noConflict,
	        quadrant,
	        external = true,
	        decimalError = '[DecimalError] ',
	        invalidArgument = decimalError + 'Invalid argument: ',
	        precisionLimitExceeded = decimalError + 'Precision limit exceeded',
	        cryptoUnavailable = decimalError + 'crypto unavailable',
	        mathfloor = Math.floor,
	        mathpow = Math.pow,
	        isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,
	        isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,
	        isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,
	        isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
	        BASE = 1e7,
	        LOG_BASE = 7,
	        MAX_SAFE_INTEGER = 9007199254740991,
	        LN10_PRECISION = LN10.length - 1,
	        PI_PRECISION = PI.length - 1,
	        // Decimal.prototype object
	    P = {
	      name: '[object Decimal]'
	    }; // Decimal prototype methods

	    /*
	     *  absoluteValue             abs
	     *  ceil
	     *  comparedTo                cmp
	     *  cosine                    cos
	     *  cubeRoot                  cbrt
	     *  decimalPlaces             dp
	     *  dividedBy                 div
	     *  dividedToIntegerBy        divToInt
	     *  equals                    eq
	     *  floor
	     *  greaterThan               gt
	     *  greaterThanOrEqualTo      gte
	     *  hyperbolicCosine          cosh
	     *  hyperbolicSine            sinh
	     *  hyperbolicTangent         tanh
	     *  inverseCosine             acos
	     *  inverseHyperbolicCosine   acosh
	     *  inverseHyperbolicSine     asinh
	     *  inverseHyperbolicTangent  atanh
	     *  inverseSine               asin
	     *  inverseTangent            atan
	     *  isFinite
	     *  isInteger                 isInt
	     *  isNaN
	     *  isNegative                isNeg
	     *  isPositive                isPos
	     *  isZero
	     *  lessThan                  lt
	     *  lessThanOrEqualTo         lte
	     *  logarithm                 log
	     *  [maximum]                 [max]
	     *  [minimum]                 [min]
	     *  minus                     sub
	     *  modulo                    mod
	     *  naturalExponential        exp
	     *  naturalLogarithm          ln
	     *  negated                   neg
	     *  plus                      add
	     *  precision                 sd
	     *  round
	     *  sine                      sin
	     *  squareRoot                sqrt
	     *  tangent                   tan
	     *  times                     mul
	     *  toBinary
	     *  toDecimalPlaces           toDP
	     *  toExponential
	     *  toFixed
	     *  toFraction
	     *  toHexadecimal             toHex
	     *  toNearest
	     *  toNumber
	     *  toOctal
	     *  toPower                   pow
	     *  toPrecision
	     *  toSignificantDigits       toSD
	     *  toString
	     *  truncated                 trunc
	     *  valueOf                   toJSON
	     */

	    /*
	     * Return a new Decimal whose value is the absolute value of this Decimal.
	     *
	     */

	    P.absoluteValue = P.abs = function () {
	      var x = new this.constructor(this);
	      if (x.s < 0) x.s = 1;
	      return finalise(x);
	    };
	    /*
	     * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
	     * direction of positive Infinity.
	     *
	     */


	    P.ceil = function () {
	      return finalise(new this.constructor(this), this.e + 1, 2);
	    };
	    /*
	     * Return
	     *   1    if the value of this Decimal is greater than the value of `y`,
	     *  -1    if the value of this Decimal is less than the value of `y`,
	     *   0    if they have the same value,
	     *   NaN  if the value of either Decimal is NaN.
	     *
	     */


	    P.comparedTo = P.cmp = function (y) {
	      var i,
	          j,
	          xdL,
	          ydL,
	          x = this,
	          xd = x.d,
	          yd = (y = new x.constructor(y)).d,
	          xs = x.s,
	          ys = y.s; // Either NaN or Â±Infinity?

	      if (!xd || !yd) {
	        return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
	      } // Either zero?


	      if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0; // Signs differ?

	      if (xs !== ys) return xs; // Compare exponents.

	      if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;
	      xdL = xd.length;
	      ydL = yd.length; // Compare digit by digit.

	      for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
	        if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
	      } // Compare lengths.


	      return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
	    };
	    /*
	     * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.
	     *
	     * Domain: [-Infinity, Infinity]
	     * Range: [-1, 1]
	     *
	     * cos(0)         = 1
	     * cos(-0)        = 1
	     * cos(Infinity)  = NaN
	     * cos(-Infinity) = NaN
	     * cos(NaN)       = NaN
	     *
	     */


	    P.cosine = P.cos = function () {
	      var pr,
	          rm,
	          x = this,
	          Ctor = x.constructor;
	      if (!x.d) return new Ctor(NaN); // cos(0) = cos(-0) = 1

	      if (!x.d[0]) return new Ctor(1);
	      pr = Ctor.precision;
	      rm = Ctor.rounding;
	      Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
	      Ctor.rounding = 1;
	      x = cosine(Ctor, toLessThanHalfPi(Ctor, x));
	      Ctor.precision = pr;
	      Ctor.rounding = rm;
	      return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
	    };
	    /*
	     *
	     * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to
	     * `precision` significant digits using rounding mode `rounding`.
	     *
	     *  cbrt(0)  =  0
	     *  cbrt(-0) = -0
	     *  cbrt(1)  =  1
	     *  cbrt(-1) = -1
	     *  cbrt(N)  =  N
	     *  cbrt(-I) = -I
	     *  cbrt(I)  =  I
	     *
	     * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))
	     *
	     */


	    P.cubeRoot = P.cbrt = function () {
	      var e,
	          m,
	          n,
	          r,
	          rep,
	          s,
	          sd,
	          t,
	          t3,
	          t3plusx,
	          x = this,
	          Ctor = x.constructor;
	      if (!x.isFinite() || x.isZero()) return new Ctor(x);
	      external = false; // Initial estimate.

	      s = x.s * mathpow(x.s * x, 1 / 3); // Math.cbrt underflow/overflow?
	      // Pass x to Math.pow as integer, then adjust the exponent of the result.

	      if (!s || Math.abs(s) == 1 / 0) {
	        n = digitsToString(x.d);
	        e = x.e; // Adjust n exponent so it is a multiple of 3 away from x exponent.

	        if (s = (e - n.length + 1) % 3) n += s == 1 || s == -2 ? '0' : '00';
	        s = mathpow(n, 1 / 3); // Rarely, e may be one less than the result exponent value.

	        e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));

	        if (s == 1 / 0) {
	          n = '5e' + e;
	        } else {
	          n = s.toExponential();
	          n = n.slice(0, n.indexOf('e') + 1) + e;
	        }

	        r = new Ctor(n);
	        r.s = x.s;
	      } else {
	        r = new Ctor(s.toString());
	      }

	      sd = (e = Ctor.precision) + 3; // Halley's method.
	      // TODO? Compare Newton's method.

	      for (;;) {
	        t = r;
	        t3 = t.times(t).times(t);
	        t3plusx = t3.plus(x);
	        r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1); // TODO? Replace with for-loop and checkRoundingDigits.

	        if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
	          n = n.slice(sd - 3, sd + 1); // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999
	          // , i.e. approaching a rounding boundary, continue the iteration.

	          if (n == '9999' || !rep && n == '4999') {
	            // On the first iteration only, check to see if rounding up gives the exact result as the
	            // nines may infinitely repeat.
	            if (!rep) {
	              finalise(t, e + 1, 0);

	              if (t.times(t).times(t).eq(x)) {
	                r = t;
	                break;
	              }
	            }

	            sd += 4;
	            rep = 1;
	          } else {
	            // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
	            // If not, then there are further digits and m will be truthy.
	            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
	              // Truncate to the first rounding digit.
	              finalise(r, e + 1, 1);
	              m = !r.times(r).times(r).eq(x);
	            }

	            break;
	          }
	        }
	      }

	      external = true;
	      return finalise(r, e, Ctor.rounding, m);
	    };
	    /*
	     * Return the number of decimal places of the value of this Decimal.
	     *
	     */


	    P.decimalPlaces = P.dp = function () {
	      var w,
	          d = this.d,
	          n = NaN;

	      if (d) {
	        w = d.length - 1;
	        n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE; // Subtract the number of trailing zeros of the last word.

	        w = d[w];
	        if (w) for (; w % 10 == 0; w /= 10) n--;
	        if (n < 0) n = 0;
	      }

	      return n;
	    };
	    /*
	     *  n / 0 = I
	     *  n / N = N
	     *  n / I = 0
	     *  0 / n = 0
	     *  0 / 0 = N
	     *  0 / N = N
	     *  0 / I = 0
	     *  N / n = N
	     *  N / 0 = N
	     *  N / N = N
	     *  N / I = N
	     *  I / n = I
	     *  I / 0 = I
	     *  I / N = N
	     *  I / I = N
	     *
	     * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to
	     * `precision` significant digits using rounding mode `rounding`.
	     *
	     */


	    P.dividedBy = P.div = function (y) {
	      return divide(this, new this.constructor(y));
	    };
	    /*
	     * Return a new Decimal whose value is the integer part of dividing the value of this Decimal
	     * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.
	     *
	     */


	    P.dividedToIntegerBy = P.divToInt = function (y) {
	      var x = this,
	          Ctor = x.constructor;
	      return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
	    };
	    /*
	     * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.
	     *
	     */


	    P.equals = P.eq = function (y) {
	      return this.cmp(y) === 0;
	    };
	    /*
	     * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
	     * direction of negative Infinity.
	     *
	     */


	    P.floor = function () {
	      return finalise(new this.constructor(this), this.e + 1, 3);
	    };
	    /*
	     * Return true if the value of this Decimal is greater than the value of `y`, otherwise return
	     * false.
	     *
	     */


	    P.greaterThan = P.gt = function (y) {
	      return this.cmp(y) > 0;
	    };
	    /*
	     * Return true if the value of this Decimal is greater than or equal to the value of `y`,
	     * otherwise return false.
	     *
	     */


	    P.greaterThanOrEqualTo = P.gte = function (y) {
	      var k = this.cmp(y);
	      return k == 1 || k === 0;
	    };
	    /*
	     * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this
	     * Decimal.
	     *
	     * Domain: [-Infinity, Infinity]
	     * Range: [1, Infinity]
	     *
	     * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...
	     *
	     * cosh(0)         = 1
	     * cosh(-0)        = 1
	     * cosh(Infinity)  = Infinity
	     * cosh(-Infinity) = Infinity
	     * cosh(NaN)       = NaN
	     *
	     *  x        time taken (ms)   result
	     * 1000      9                 9.8503555700852349694e+433
	     * 10000     25                4.4034091128314607936e+4342
	     * 100000    171               1.4033316802130615897e+43429
	     * 1000000   3817              1.5166076984010437725e+434294
	     * 10000000  abandoned after 2 minute wait
	     *
	     * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))
	     *
	     */


	    P.hyperbolicCosine = P.cosh = function () {
	      var k,
	          n,
	          pr,
	          rm,
	          len,
	          x = this,
	          Ctor = x.constructor,
	          one = new Ctor(1);
	      if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);
	      if (x.isZero()) return one;
	      pr = Ctor.precision;
	      rm = Ctor.rounding;
	      Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
	      Ctor.rounding = 1;
	      len = x.d.length; // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1
	      // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))
	      // Estimate the optimum number of times to use the argument reduction.
	      // TODO? Estimation reused from cosine() and may not be optimal here.

	      if (len < 32) {
	        k = Math.ceil(len / 3);
	        n = (1 / tinyPow(4, k)).toString();
	      } else {
	        k = 16;
	        n = '2.3283064365386962890625e-10';
	      }

	      x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true); // Reverse argument reduction

	      var cosh2_x,
	          i = k,
	          d8 = new Ctor(8);

	      for (; i--;) {
	        cosh2_x = x.times(x);
	        x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
	      }

	      return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
	    };
	    /*
	     * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this
	     * Decimal.
	     *
	     * Domain: [-Infinity, Infinity]
	     * Range: [-Infinity, Infinity]
	     *
	     * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...
	     *
	     * sinh(0)         = 0
	     * sinh(-0)        = -0
	     * sinh(Infinity)  = Infinity
	     * sinh(-Infinity) = -Infinity
	     * sinh(NaN)       = NaN
	     *
	     * x        time taken (ms)
	     * 10       2 ms
	     * 100      5 ms
	     * 1000     14 ms
	     * 10000    82 ms
	     * 100000   886 ms            1.4033316802130615897e+43429
	     * 200000   2613 ms
	     * 300000   5407 ms
	     * 400000   8824 ms
	     * 500000   13026 ms          8.7080643612718084129e+217146
	     * 1000000  48543 ms
	     *
	     * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))
	     *
	     */


	    P.hyperbolicSine = P.sinh = function () {
	      var k,
	          pr,
	          rm,
	          len,
	          x = this,
	          Ctor = x.constructor;
	      if (!x.isFinite() || x.isZero()) return new Ctor(x);
	      pr = Ctor.precision;
	      rm = Ctor.rounding;
	      Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
	      Ctor.rounding = 1;
	      len = x.d.length;

	      if (len < 3) {
	        x = taylorSeries(Ctor, 2, x, x, true);
	      } else {
	        // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))
	        // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))
	        // 3 multiplications and 1 addition
	        // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))
	        // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))
	        // 4 multiplications and 2 additions
	        // Estimate the optimum number of times to use the argument reduction.
	        k = 1.4 * Math.sqrt(len);
	        k = k > 16 ? 16 : k | 0;
	        x = x.times(1 / tinyPow(5, k));
	        x = taylorSeries(Ctor, 2, x, x, true); // Reverse argument reduction

	        var sinh2_x,
	            d5 = new Ctor(5),
	            d16 = new Ctor(16),
	            d20 = new Ctor(20);

	        for (; k--;) {
	          sinh2_x = x.times(x);
	          x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
	        }
	      }

	      Ctor.precision = pr;
	      Ctor.rounding = rm;
	      return finalise(x, pr, rm, true);
	    };
	    /*
	     * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this
	     * Decimal.
	     *
	     * Domain: [-Infinity, Infinity]
	     * Range: [-1, 1]
	     *
	     * tanh(x) = sinh(x) / cosh(x)
	     *
	     * tanh(0)         = 0
	     * tanh(-0)        = -0
	     * tanh(Infinity)  = 1
	     * tanh(-Infinity) = -1
	     * tanh(NaN)       = NaN
	     *
	     */


	    P.hyperbolicTangent = P.tanh = function () {
	      var pr,
	          rm,
	          x = this,
	          Ctor = x.constructor;
	      if (!x.isFinite()) return new Ctor(x.s);
	      if (x.isZero()) return new Ctor(x);
	      pr = Ctor.precision;
	      rm = Ctor.rounding;
	      Ctor.precision = pr + 7;
	      Ctor.rounding = 1;
	      return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
	    };
	    /*
	     * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of
	     * this Decimal.
	     *
	     * Domain: [-1, 1]
	     * Range: [0, pi]
	     *
	     * acos(x) = pi/2 - asin(x)
	     *
	     * acos(0)       = pi/2
	     * acos(-0)      = pi/2
	     * acos(1)       = 0
	     * acos(-1)      = pi
	     * acos(1/2)     = pi/3
	     * acos(-1/2)    = 2*pi/3
	     * acos(|x| > 1) = NaN
	     * acos(NaN)     = NaN
	     *
	     */


	    P.inverseCosine = P.acos = function () {
	      var halfPi,
	          x = this,
	          Ctor = x.constructor,
	          k = x.abs().cmp(1),
	          pr = Ctor.precision,
	          rm = Ctor.rounding;

	      if (k !== -1) {
	        return k === 0 // |x| is 1
	        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0) // |x| > 1 or x is NaN
	        : new Ctor(NaN);
	      }

	      if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5); // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3

	      Ctor.precision = pr + 6;
	      Ctor.rounding = 1;
	      x = x.asin();
	      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
	      Ctor.precision = pr;
	      Ctor.rounding = rm;
	      return halfPi.minus(x);
	    };
	    /*
	     * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the
	     * value of this Decimal.
	     *
	     * Domain: [1, Infinity]
	     * Range: [0, Infinity]
	     *
	     * acosh(x) = ln(x + sqrt(x^2 - 1))
	     *
	     * acosh(x < 1)     = NaN
	     * acosh(NaN)       = NaN
	     * acosh(Infinity)  = Infinity
	     * acosh(-Infinity) = NaN
	     * acosh(0)         = NaN
	     * acosh(-0)        = NaN
	     * acosh(1)         = 0
	     * acosh(-1)        = NaN
	     *
	     */


	    P.inverseHyperbolicCosine = P.acosh = function () {
	      var pr,
	          rm,
	          x = this,
	          Ctor = x.constructor;
	      if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);
	      if (!x.isFinite()) return new Ctor(x);
	      pr = Ctor.precision;
	      rm = Ctor.rounding;
	      Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
	      Ctor.rounding = 1;
	      external = false;
	      x = x.times(x).minus(1).sqrt().plus(x);
	      external = true;
	      Ctor.precision = pr;
	      Ctor.rounding = rm;
	      return x.ln();
	    };
	    /*
	     * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value
	     * of this Decimal.
	     *
	     * Domain: [-Infinity, Infinity]
	     * Range: [-Infinity, Infinity]
	     *
	     * asinh(x) = ln(x + sqrt(x^2 + 1))
	     *
	     * asinh(NaN)       = NaN
	     * asinh(Infinity)  = Infinity
	     * asinh(-Infinity) = -Infinity
	     * asinh(0)         = 0
	     * asinh(-0)        = -0
	     *
	     */


	    P.inverseHyperbolicSine = P.asinh = function () {
	      var pr,
	          rm,
	          x = this,
	          Ctor = x.constructor;
	      if (!x.isFinite() || x.isZero()) return new Ctor(x);
	      pr = Ctor.precision;
	      rm = Ctor.rounding;
	      Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
	      Ctor.rounding = 1;
	      external = false;
	      x = x.times(x).plus(1).sqrt().plus(x);
	      external = true;
	      Ctor.precision = pr;
	      Ctor.rounding = rm;
	      return x.ln();
	    };
	    /*
	     * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the
	     * value of this Decimal.
	     *
	     * Domain: [-1, 1]
	     * Range: [-Infinity, Infinity]
	     *
	     * atanh(x) = 0.5 * ln((1 + x) / (1 - x))
	     *
	     * atanh(|x| > 1)   = NaN
	     * atanh(NaN)       = NaN
	     * atanh(Infinity)  = NaN
	     * atanh(-Infinity) = NaN
	     * atanh(0)         = 0
	     * atanh(-0)        = -0
	     * atanh(1)         = Infinity
	     * atanh(-1)        = -Infinity
	     *
	     */


	    P.inverseHyperbolicTangent = P.atanh = function () {
	      var pr,
	          rm,
	          wpr,
	          xsd,
	          x = this,
	          Ctor = x.constructor;
	      if (!x.isFinite()) return new Ctor(NaN);
	      if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);
	      pr = Ctor.precision;
	      rm = Ctor.rounding;
	      xsd = x.sd();
	      if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);
	      Ctor.precision = wpr = xsd - x.e;
	      x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);
	      Ctor.precision = pr + 4;
	      Ctor.rounding = 1;
	      x = x.ln();
	      Ctor.precision = pr;
	      Ctor.rounding = rm;
	      return x.times(0.5);
	    };
	    /*
	     * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this
	     * Decimal.
	     *
	     * Domain: [-Infinity, Infinity]
	     * Range: [-pi/2, pi/2]
	     *
	     * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))
	     *
	     * asin(0)       = 0
	     * asin(-0)      = -0
	     * asin(1/2)     = pi/6
	     * asin(-1/2)    = -pi/6
	     * asin(1)       = pi/2
	     * asin(-1)      = -pi/2
	     * asin(|x| > 1) = NaN
	     * asin(NaN)     = NaN
	     *
	     * TODO? Compare performance of Taylor series.
	     *
	     */


	    P.inverseSine = P.asin = function () {
	      var halfPi,
	          k,
	          pr,
	          rm,
	          x = this,
	          Ctor = x.constructor;
	      if (x.isZero()) return new Ctor(x);
	      k = x.abs().cmp(1);
	      pr = Ctor.precision;
	      rm = Ctor.rounding;

	      if (k !== -1) {
	        // |x| is 1
	        if (k === 0) {
	          halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
	          halfPi.s = x.s;
	          return halfPi;
	        } // |x| > 1 or x is NaN


	        return new Ctor(NaN);
	      } // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6


	      Ctor.precision = pr + 6;
	      Ctor.rounding = 1;
	      x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();
	      Ctor.precision = pr;
	      Ctor.rounding = rm;
	      return x.times(2);
	    };
	    /*
	     * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value
	     * of this Decimal.
	     *
	     * Domain: [-Infinity, Infinity]
	     * Range: [-pi/2, pi/2]
	     *
	     * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
	     *
	     * atan(0)         = 0
	     * atan(-0)        = -0
	     * atan(1)         = pi/4
	     * atan(-1)        = -pi/4
	     * atan(Infinity)  = pi/2
	     * atan(-Infinity) = -pi/2
	     * atan(NaN)       = NaN
	     *
	     */


	    P.inverseTangent = P.atan = function () {
	      var i,
	          j,
	          k,
	          n,
	          px,
	          t,
	          r,
	          wpr,
	          x2,
	          x = this,
	          Ctor = x.constructor,
	          pr = Ctor.precision,
	          rm = Ctor.rounding;

	      if (!x.isFinite()) {
	        if (!x.s) return new Ctor(NaN);

	        if (pr + 4 <= PI_PRECISION) {
	          r = getPi(Ctor, pr + 4, rm).times(0.5);
	          r.s = x.s;
	          return r;
	        }
	      } else if (x.isZero()) {
	        return new Ctor(x);
	      } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
	        r = getPi(Ctor, pr + 4, rm).times(0.25);
	        r.s = x.s;
	        return r;
	      }

	      Ctor.precision = wpr = pr + 10;
	      Ctor.rounding = 1; // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);
	      // Argument reduction
	      // Ensure |x| < 0.42
	      // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))

	      k = Math.min(28, wpr / LOG_BASE + 2 | 0);

	      for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));

	      external = false;
	      j = Math.ceil(wpr / LOG_BASE);
	      n = 1;
	      x2 = x.times(x);
	      r = new Ctor(x);
	      px = x; // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...

	      for (; i !== -1;) {
	        px = px.times(x2);
	        t = r.minus(px.div(n += 2));
	        px = px.times(x2);
	        r = t.plus(px.div(n += 2));
	        if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);
	      }

	      if (k) r = r.times(2 << k - 1);
	      external = true;
	      return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
	    };
	    /*
	     * Return true if the value of this Decimal is a finite number, otherwise return false.
	     *
	     */


	    P.isFinite = function () {
	      return !!this.d;
	    };
	    /*
	     * Return true if the value of this Decimal is an integer, otherwise return false.
	     *
	     */


	    P.isInteger = P.isInt = function () {
	      return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
	    };
	    /*
	     * Return true if the value of this Decimal is NaN, otherwise return false.
	     *
	     */


	    P.isNaN = function () {
	      return !this.s;
	    };
	    /*
	     * Return true if the value of this Decimal is negative, otherwise return false.
	     *
	     */


	    P.isNegative = P.isNeg = function () {
	      return this.s < 0;
	    };
	    /*
	     * Return true if the value of this Decimal is positive, otherwise return false.
	     *
	     */


	    P.isPositive = P.isPos = function () {
	      return this.s > 0;
	    };
	    /*
	     * Return true if the value of this Decimal is 0 or -0, otherwise return false.
	     *
	     */


	    P.isZero = function () {
	      return !!this.d && this.d[0] === 0;
	    };
	    /*
	     * Return true if the value of this Decimal is less than `y`, otherwise return false.
	     *
	     */


	    P.lessThan = P.lt = function (y) {
	      return this.cmp(y) < 0;
	    };
	    /*
	     * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.
	     *
	     */


	    P.lessThanOrEqualTo = P.lte = function (y) {
	      return this.cmp(y) < 1;
	    };
	    /*
	     * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`
	     * significant digits using rounding mode `rounding`.
	     *
	     * If no base is specified, return log[10](arg).
	     *
	     * log[base](arg) = ln(arg) / ln(base)
	     *
	     * The result will always be correctly rounded if the base of the log is 10, and 'almost always'
	     * otherwise:
	     *
	     * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen
	     * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error
	     * between the result and the correctly rounded result will be one ulp (unit in the last place).
	     *
	     * log[-b](a)       = NaN
	     * log[0](a)        = NaN
	     * log[1](a)        = NaN
	     * log[NaN](a)      = NaN
	     * log[Infinity](a) = NaN
	     * log[b](0)        = -Infinity
	     * log[b](-0)       = -Infinity
	     * log[b](-a)       = NaN
	     * log[b](1)        = 0
	     * log[b](Infinity) = Infinity
	     * log[b](NaN)      = NaN
	     *
	     * [base] {number|string|Decimal} The base of the logarithm.
	     *
	     */


	    P.logarithm = P.log = function (base) {
	      var isBase10,
	          d,
	          denominator,
	          k,
	          inf,
	          num,
	          sd,
	          r,
	          arg = this,
	          Ctor = arg.constructor,
	          pr = Ctor.precision,
	          rm = Ctor.rounding,
	          guard = 5; // Default base is 10.

	      if (base == null) {
	        base = new Ctor(10);
	        isBase10 = true;
	      } else {
	        base = new Ctor(base);
	        d = base.d; // Return NaN if base is negative, or non-finite, or is 0 or 1.

	        if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);
	        isBase10 = base.eq(10);
	      }

	      d = arg.d; // Is arg negative, non-finite, 0 or 1?

	      if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {
	        return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
	      } // The result will have a non-terminating decimal expansion if base is 10 and arg is not an
	      // integer power of 10.


	      if (isBase10) {
	        if (d.length > 1) {
	          inf = true;
	        } else {
	          for (k = d[0]; k % 10 === 0;) k /= 10;

	          inf = k !== 1;
	        }
	      }

	      external = false;
	      sd = pr + guard;
	      num = naturalLogarithm(arg, sd);
	      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd); // The result will have 5 rounding digits.

	      r = divide(num, denominator, sd, 1); // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,
	      // calculate 10 further digits.
	      //
	      // If the result is known to have an infinite decimal expansion, repeat this until it is clear
	      // that the result is above or below the boundary. Otherwise, if after calculating the 10
	      // further digits, the last 14 are nines, round up and assume the result is exact.
	      // Also assume the result is exact if the last 14 are zero.
	      //
	      // Example of a result that will be incorrectly rounded:
	      // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...
	      // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it
	      // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so
	      // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal
	      // place is still 2.6.

	      if (checkRoundingDigits(r.d, k = pr, rm)) {
	        do {
	          sd += 10;
	          num = naturalLogarithm(arg, sd);
	          denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
	          r = divide(num, denominator, sd, 1);

	          if (!inf) {
	            // Check for 14 nines from the 2nd rounding digit, as the first may be 4.
	            if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
	              r = finalise(r, pr + 1, 0);
	            }

	            break;
	          }
	        } while (checkRoundingDigits(r.d, k += 10, rm));
	      }

	      external = true;
	      return finalise(r, pr, rm);
	    };
	    /*
	     * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.
	     *
	     * arguments {number|string|Decimal}
	     *
	    P.max = function () {
	      Array.prototype.push.call(arguments, this);
	      return maxOrMin(this.constructor, arguments, 'lt');
	    };
	     */

	    /*
	     * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.
	     *
	     * arguments {number|string|Decimal}
	     *
	    P.min = function () {
	      Array.prototype.push.call(arguments, this);
	      return maxOrMin(this.constructor, arguments, 'gt');
	    };
	     */

	    /*
	     *  n - 0 = n
	     *  n - N = N
	     *  n - I = -I
	     *  0 - n = -n
	     *  0 - 0 = 0
	     *  0 - N = N
	     *  0 - I = -I
	     *  N - n = N
	     *  N - 0 = N
	     *  N - N = N
	     *  N - I = N
	     *  I - n = I
	     *  I - 0 = I
	     *  I - N = N
	     *  I - I = N
	     *
	     * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`
	     * significant digits using rounding mode `rounding`.
	     *
	     */


	    P.minus = P.sub = function (y) {
	      var d,
	          e,
	          i,
	          j,
	          k,
	          len,
	          pr,
	          rm,
	          xd,
	          xe,
	          xLTy,
	          yd,
	          x = this,
	          Ctor = x.constructor;
	      y = new Ctor(y); // If either is not finite...

	      if (!x.d || !y.d) {
	        // Return NaN if either is NaN.
	        if (!x.s || !y.s) y = new Ctor(NaN); // Return y negated if x is finite and y is Â±Infinity.
	        else if (x.d) y.s = -y.s; // Return x if y is finite and x is Â±Infinity.
	          // Return x if both are Â±Infinity with different signs.
	          // Return NaN if both are Â±Infinity with the same sign.
	          else y = new Ctor(y.d || x.s !== y.s ? x : NaN);
	        return y;
	      } // If signs differ...


	      if (x.s != y.s) {
	        y.s = -y.s;
	        return x.plus(y);
	      }

	      xd = x.d;
	      yd = y.d;
	      pr = Ctor.precision;
	      rm = Ctor.rounding; // If either is zero...

	      if (!xd[0] || !yd[0]) {
	        // Return y negated if x is zero and y is non-zero.
	        if (yd[0]) y.s = -y.s; // Return x if y is zero and x is non-zero.
	        else if (xd[0]) y = new Ctor(x); // Return zero if both are zero.
	          // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.
	          else return new Ctor(rm === 3 ? -0 : 0);
	        return external ? finalise(y, pr, rm) : y;
	      } // x and y are finite, non-zero numbers with the same sign.
	      // Calculate base 1e7 exponents.


	      e = mathfloor(y.e / LOG_BASE);
	      xe = mathfloor(x.e / LOG_BASE);
	      xd = xd.slice();
	      k = xe - e; // If base 1e7 exponents differ...

	      if (k) {
	        xLTy = k < 0;

	        if (xLTy) {
	          d = xd;
	          k = -k;
	          len = yd.length;
	        } else {
	          d = yd;
	          e = xe;
	          len = xd.length;
	        } // Numbers with massively different exponents would result in a very high number of
	        // zeros needing to be prepended, but this can be avoided while still ensuring correct
	        // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.


	        i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;

	        if (k > i) {
	          k = i;
	          d.length = 1;
	        } // Prepend zeros to equalise exponents.


	        d.reverse();

	        for (i = k; i--;) d.push(0);

	        d.reverse(); // Base 1e7 exponents equal.
	      } else {
	        // Check digits to determine which is the bigger number.
	        i = xd.length;
	        len = yd.length;
	        xLTy = i < len;
	        if (xLTy) len = i;

	        for (i = 0; i < len; i++) {
	          if (xd[i] != yd[i]) {
	            xLTy = xd[i] < yd[i];
	            break;
	          }
	        }

	        k = 0;
	      }

	      if (xLTy) {
	        d = xd;
	        xd = yd;
	        yd = d;
	        y.s = -y.s;
	      }

	      len = xd.length; // Append zeros to `xd` if shorter.
	      // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.

	      for (i = yd.length - len; i > 0; --i) xd[len++] = 0; // Subtract yd from xd.


	      for (i = yd.length; i > k;) {
	        if (xd[--i] < yd[i]) {
	          for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;

	          --xd[j];
	          xd[i] += BASE;
	        }

	        xd[i] -= yd[i];
	      } // Remove trailing zeros.


	      for (; xd[--len] === 0;) xd.pop(); // Remove leading zeros and adjust exponent accordingly.


	      for (; xd[0] === 0; xd.shift()) --e; // Zero?


	      if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);
	      y.d = xd;
	      y.e = getBase10Exponent(xd, e);
	      return external ? finalise(y, pr, rm) : y;
	    };
	    /*
	     *   n % 0 =  N
	     *   n % N =  N
	     *   n % I =  n
	     *   0 % n =  0
	     *  -0 % n = -0
	     *   0 % 0 =  N
	     *   0 % N =  N
	     *   0 % I =  0
	     *   N % n =  N
	     *   N % 0 =  N
	     *   N % N =  N
	     *   N % I =  N
	     *   I % n =  N
	     *   I % 0 =  N
	     *   I % N =  N
	     *   I % I =  N
	     *
	     * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to
	     * `precision` significant digits using rounding mode `rounding`.
	     *
	     * The result depends on the modulo mode.
	     *
	     */


	    P.modulo = P.mod = function (y) {
	      var q,
	          x = this,
	          Ctor = x.constructor;
	      y = new Ctor(y); // Return NaN if x is Â±Infinity or NaN, or y is NaN or Â±0.

	      if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN); // Return x if y is Â±Infinity or x is Â±0.

	      if (!y.d || x.d && !x.d[0]) {
	        return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
	      } // Prevent rounding of intermediate calculations.


	      external = false;

	      if (Ctor.modulo == 9) {
	        // Euclidian division: q = sign(y) * floor(x / abs(y))
	        // result = x - q * y    where  0 <= result < abs(y)
	        q = divide(x, y.abs(), 0, 3, 1);
	        q.s *= y.s;
	      } else {
	        q = divide(x, y, 0, Ctor.modulo, 1);
	      }

	      q = q.times(y);
	      external = true;
	      return x.minus(q);
	    };
	    /*
	     * Return a new Decimal whose value is the natural exponential of the value of this Decimal,
	     * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`
	     * significant digits using rounding mode `rounding`.
	     *
	     */


	    P.naturalExponential = P.exp = function () {
	      return naturalExponential(this);
	    };
	    /*
	     * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
	     * rounded to `precision` significant digits using rounding mode `rounding`.
	     *
	     */


	    P.naturalLogarithm = P.ln = function () {
	      return naturalLogarithm(this);
	    };
	    /*
	     * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by
	     * -1.
	     *
	     */


	    P.negated = P.neg = function () {
	      var x = new this.constructor(this);
	      x.s = -x.s;
	      return finalise(x);
	    };
	    /*
	     *  n + 0 = n
	     *  n + N = N
	     *  n + I = I
	     *  0 + n = n
	     *  0 + 0 = 0
	     *  0 + N = N
	     *  0 + I = I
	     *  N + n = N
	     *  N + 0 = N
	     *  N + N = N
	     *  N + I = N
	     *  I + n = I
	     *  I + 0 = I
	     *  I + N = N
	     *  I + I = I
	     *
	     * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`
	     * significant digits using rounding mode `rounding`.
	     *
	     */


	    P.plus = P.add = function (y) {
	      var carry,
	          d,
	          e,
	          i,
	          k,
	          len,
	          pr,
	          rm,
	          xd,
	          yd,
	          x = this,
	          Ctor = x.constructor;
	      y = new Ctor(y); // If either is not finite...

	      if (!x.d || !y.d) {
	        // Return NaN if either is NaN.
	        if (!x.s || !y.s) y = new Ctor(NaN); // Return x if y is finite and x is Â±Infinity.
	        // Return x if both are Â±Infinity with the same sign.
	        // Return NaN if both are Â±Infinity with different signs.
	        // Return y if x is finite and y is Â±Infinity.
	        else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);
	        return y;
	      } // If signs differ...


	      if (x.s != y.s) {
	        y.s = -y.s;
	        return x.minus(y);
	      }

	      xd = x.d;
	      yd = y.d;
	      pr = Ctor.precision;
	      rm = Ctor.rounding; // If either is zero...

	      if (!xd[0] || !yd[0]) {
	        // Return x if y is zero.
	        // Return y if y is non-zero.
	        if (!yd[0]) y = new Ctor(x);
	        return external ? finalise(y, pr, rm) : y;
	      } // x and y are finite, non-zero numbers with the same sign.
	      // Calculate base 1e7 exponents.


	      k = mathfloor(x.e / LOG_BASE);
	      e = mathfloor(y.e / LOG_BASE);
	      xd = xd.slice();
	      i = k - e; // If base 1e7 exponents differ...

	      if (i) {
	        if (i < 0) {
	          d = xd;
	          i = -i;
	          len = yd.length;
	        } else {
	          d = yd;
	          e = k;
	          len = xd.length;
	        } // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.


	        k = Math.ceil(pr / LOG_BASE);
	        len = k > len ? k + 1 : len + 1;

	        if (i > len) {
	          i = len;
	          d.length = 1;
	        } // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.


	        d.reverse();

	        for (; i--;) d.push(0);

	        d.reverse();
	      }

	      len = xd.length;
	      i = yd.length; // If yd is longer than xd, swap xd and yd so xd points to the longer array.

	      if (len - i < 0) {
	        i = len;
	        d = yd;
	        yd = xd;
	        xd = d;
	      } // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.


	      for (carry = 0; i;) {
	        carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
	        xd[i] %= BASE;
	      }

	      if (carry) {
	        xd.unshift(carry);
	        ++e;
	      } // Remove trailing zeros.
	      // No need to check for zero, as +x + +y != 0 && -x + -y != 0


	      for (len = xd.length; xd[--len] == 0;) xd.pop();

	      y.d = xd;
	      y.e = getBase10Exponent(xd, e);
	      return external ? finalise(y, pr, rm) : y;
	    };
	    /*
	     * Return the number of significant digits of the value of this Decimal.
	     *
	     * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
	     *
	     */


	    P.precision = P.sd = function (z) {
	      var k,
	          x = this;
	      if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);

	      if (x.d) {
	        k = getPrecision(x.d);
	        if (z && x.e + 1 > k) k = x.e + 1;
	      } else {
	        k = NaN;
	      }

	      return k;
	    };
	    /*
	     * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
	     * rounding mode `rounding`.
	     *
	     */


	    P.round = function () {
	      var x = this,
	          Ctor = x.constructor;
	      return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
	    };
	    /*
	     * Return a new Decimal whose value is the sine of the value in radians of this Decimal.
	     *
	     * Domain: [-Infinity, Infinity]
	     * Range: [-1, 1]
	     *
	     * sin(x) = x - x^3/3! + x^5/5! - ...
	     *
	     * sin(0)         = 0
	     * sin(-0)        = -0
	     * sin(Infinity)  = NaN
	     * sin(-Infinity) = NaN
	     * sin(NaN)       = NaN
	     *
	     */


	    P.sine = P.sin = function () {
	      var pr,
	          rm,
	          x = this,
	          Ctor = x.constructor;
	      if (!x.isFinite()) return new Ctor(NaN);
	      if (x.isZero()) return new Ctor(x);
	      pr = Ctor.precision;
	      rm = Ctor.rounding;
	      Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
	      Ctor.rounding = 1;
	      x = sine(Ctor, toLessThanHalfPi(Ctor, x));
	      Ctor.precision = pr;
	      Ctor.rounding = rm;
	      return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
	    };
	    /*
	     * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`
	     * significant digits using rounding mode `rounding`.
	     *
	     *  sqrt(-n) =  N
	     *  sqrt(N)  =  N
	     *  sqrt(-I) =  N
	     *  sqrt(I)  =  I
	     *  sqrt(0)  =  0
	     *  sqrt(-0) = -0
	     *
	     */


	    P.squareRoot = P.sqrt = function () {
	      var m,
	          n,
	          sd,
	          r,
	          rep,
	          t,
	          x = this,
	          d = x.d,
	          e = x.e,
	          s = x.s,
	          Ctor = x.constructor; // Negative/NaN/Infinity/zero?

	      if (s !== 1 || !d || !d[0]) {
	        return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
	      }

	      external = false; // Initial estimate.

	      s = Math.sqrt(+x); // Math.sqrt underflow/overflow?
	      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.

	      if (s == 0 || s == 1 / 0) {
	        n = digitsToString(d);
	        if ((n.length + e) % 2 == 0) n += '0';
	        s = Math.sqrt(n);
	        e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);

	        if (s == 1 / 0) {
	          n = '1e' + e;
	        } else {
	          n = s.toExponential();
	          n = n.slice(0, n.indexOf('e') + 1) + e;
	        }

	        r = new Ctor(n);
	      } else {
	        r = new Ctor(s.toString());
	      }

	      sd = (e = Ctor.precision) + 3; // Newton-Raphson iteration.

	      for (;;) {
	        t = r;
	        r = t.plus(divide(x, t, sd + 2, 1)).times(0.5); // TODO? Replace with for-loop and checkRoundingDigits.

	        if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
	          n = n.slice(sd - 3, sd + 1); // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or
	          // 4999, i.e. approaching a rounding boundary, continue the iteration.

	          if (n == '9999' || !rep && n == '4999') {
	            // On the first iteration only, check to see if rounding up gives the exact result as the
	            // nines may infinitely repeat.
	            if (!rep) {
	              finalise(t, e + 1, 0);

	              if (t.times(t).eq(x)) {
	                r = t;
	                break;
	              }
	            }

	            sd += 4;
	            rep = 1;
	          } else {
	            // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
	            // If not, then there are further digits and m will be truthy.
	            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
	              // Truncate to the first rounding digit.
	              finalise(r, e + 1, 1);
	              m = !r.times(r).eq(x);
	            }

	            break;
	          }
	        }
	      }

	      external = true;
	      return finalise(r, e, Ctor.rounding, m);
	    };
	    /*
	     * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.
	     *
	     * Domain: [-Infinity, Infinity]
	     * Range: [-Infinity, Infinity]
	     *
	     * tan(0)         = 0
	     * tan(-0)        = -0
	     * tan(Infinity)  = NaN
	     * tan(-Infinity) = NaN
	     * tan(NaN)       = NaN
	     *
	     */


	    P.tangent = P.tan = function () {
	      var pr,
	          rm,
	          x = this,
	          Ctor = x.constructor;
	      if (!x.isFinite()) return new Ctor(NaN);
	      if (x.isZero()) return new Ctor(x);
	      pr = Ctor.precision;
	      rm = Ctor.rounding;
	      Ctor.precision = pr + 10;
	      Ctor.rounding = 1;
	      x = x.sin();
	      x.s = 1;
	      x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);
	      Ctor.precision = pr;
	      Ctor.rounding = rm;
	      return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
	    };
	    /*
	     *  n * 0 = 0
	     *  n * N = N
	     *  n * I = I
	     *  0 * n = 0
	     *  0 * 0 = 0
	     *  0 * N = N
	     *  0 * I = N
	     *  N * n = N
	     *  N * 0 = N
	     *  N * N = N
	     *  N * I = N
	     *  I * n = I
	     *  I * 0 = N
	     *  I * N = N
	     *  I * I = I
	     *
	     * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant
	     * digits using rounding mode `rounding`.
	     *
	     */


	    P.times = P.mul = function (y) {
	      var carry,
	          e,
	          i,
	          k,
	          r,
	          rL,
	          t,
	          xdL,
	          ydL,
	          x = this,
	          Ctor = x.constructor,
	          xd = x.d,
	          yd = (y = new Ctor(y)).d;
	      y.s *= x.s; // If either is NaN, Â±Infinity or Â±0...

	      if (!xd || !xd[0] || !yd || !yd[0]) {
	        return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd // Return NaN if either is NaN.
	        // Return NaN if x is Â±0 and y is Â±Infinity, or y is Â±0 and x is Â±Infinity.
	        ? NaN // Return Â±Infinity if either is Â±Infinity.
	        // Return Â±0 if either is Â±0.
	        : !xd || !yd ? y.s / 0 : y.s * 0);
	      }

	      e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
	      xdL = xd.length;
	      ydL = yd.length; // Ensure xd points to the longer array.

	      if (xdL < ydL) {
	        r = xd;
	        xd = yd;
	        yd = r;
	        rL = xdL;
	        xdL = ydL;
	        ydL = rL;
	      } // Initialise the result array with zeros.


	      r = [];
	      rL = xdL + ydL;

	      for (i = rL; i--;) r.push(0); // Multiply!


	      for (i = ydL; --i >= 0;) {
	        carry = 0;

	        for (k = xdL + i; k > i;) {
	          t = r[k] + yd[i] * xd[k - i - 1] + carry;
	          r[k--] = t % BASE | 0;
	          carry = t / BASE | 0;
	        }

	        r[k] = (r[k] + carry) % BASE | 0;
	      } // Remove trailing zeros.


	      for (; !r[--rL];) r.pop();

	      if (carry) ++e;else r.shift();
	      y.d = r;
	      y.e = getBase10Exponent(r, e);
	      return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
	    };
	    /*
	     * Return a string representing the value of this Decimal in base 2, round to `sd` significant
	     * digits using rounding mode `rm`.
	     *
	     * If the optional `sd` argument is present then return binary exponential notation.
	     *
	     * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     */


	    P.toBinary = function (sd, rm) {
	      return toStringBinary(this, 2, sd, rm);
	    };
	    /*
	     * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`
	     * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.
	     *
	     * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.
	     *
	     * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     */


	    P.toDecimalPlaces = P.toDP = function (dp, rm) {
	      var x = this,
	          Ctor = x.constructor;
	      x = new Ctor(x);
	      if (dp === void 0) return x;
	      checkInt32(dp, 0, MAX_DIGITS);
	      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
	      return finalise(x, dp + x.e + 1, rm);
	    };
	    /*
	     * Return a string representing the value of this Decimal in exponential notation rounded to
	     * `dp` fixed decimal places using rounding mode `rounding`.
	     *
	     * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     */


	    P.toExponential = function (dp, rm) {
	      var str,
	          x = this,
	          Ctor = x.constructor;

	      if (dp === void 0) {
	        str = finiteToString(x, true);
	      } else {
	        checkInt32(dp, 0, MAX_DIGITS);
	        if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
	        x = finalise(new Ctor(x), dp + 1, rm);
	        str = finiteToString(x, true, dp + 1);
	      }

	      return x.isNeg() && !x.isZero() ? '-' + str : str;
	    };
	    /*
	     * Return a string representing the value of this Decimal in normal (fixed-point) notation to
	     * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is
	     * omitted.
	     *
	     * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
	     *
	     * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
	     * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
	     * (-0).toFixed(3) is '0.000'.
	     * (-0.5).toFixed(0) is '-0'.
	     *
	     */


	    P.toFixed = function (dp, rm) {
	      var str,
	          y,
	          x = this,
	          Ctor = x.constructor;

	      if (dp === void 0) {
	        str = finiteToString(x);
	      } else {
	        checkInt32(dp, 0, MAX_DIGITS);
	        if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
	        y = finalise(new Ctor(x), dp + x.e + 1, rm);
	        str = finiteToString(y, false, dp + y.e + 1);
	      } // To determine whether to add the minus sign look at the value before it was rounded,
	      // i.e. look at `x` rather than `y`.


	      return x.isNeg() && !x.isZero() ? '-' + str : str;
	    };
	    /*
	     * Return an array representing the value of this Decimal as a simple fraction with an integer
	     * numerator and an integer denominator.
	     *
	     * The denominator will be a positive non-zero value less than or equal to the specified maximum
	     * denominator. If a maximum denominator is not specified, the denominator will be the lowest
	     * value necessary to represent the number exactly.
	     *
	     * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.
	     *
	     */


	    P.toFraction = function (maxD) {
	      var d,
	          d0,
	          d1,
	          d2,
	          e,
	          k,
	          n,
	          n0,
	          n1,
	          pr,
	          q,
	          r,
	          x = this,
	          xd = x.d,
	          Ctor = x.constructor;
	      if (!xd) return new Ctor(x);
	      n1 = d0 = new Ctor(1);
	      d1 = n0 = new Ctor(0);
	      d = new Ctor(d1);
	      e = d.e = getPrecision(xd) - x.e - 1;
	      k = e % LOG_BASE;
	      d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);

	      if (maxD == null) {
	        // d is 10**e, the minimum max-denominator needed.
	        maxD = e > 0 ? d : n1;
	      } else {
	        n = new Ctor(maxD);
	        if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);
	        maxD = n.gt(d) ? e > 0 ? d : n1 : n;
	      }

	      external = false;
	      n = new Ctor(digitsToString(xd));
	      pr = Ctor.precision;
	      Ctor.precision = e = xd.length * LOG_BASE * 2;

	      for (;;) {
	        q = divide(n, d, 0, 1, 1);
	        d2 = d0.plus(q.times(d1));
	        if (d2.cmp(maxD) == 1) break;
	        d0 = d1;
	        d1 = d2;
	        d2 = n1;
	        n1 = n0.plus(q.times(d2));
	        n0 = d2;
	        d2 = d;
	        d = n.minus(q.times(d2));
	        n = d2;
	      }

	      d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
	      n0 = n0.plus(d2.times(n1));
	      d0 = d0.plus(d2.times(d1));
	      n0.s = n1.s = x.s; // Determine which fraction is closer to x, n0/d0 or n1/d1?

	      r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];
	      Ctor.precision = pr;
	      external = true;
	      return r;
	    };
	    /*
	     * Return a string representing the value of this Decimal in base 16, round to `sd` significant
	     * digits using rounding mode `rm`.
	     *
	     * If the optional `sd` argument is present then return binary exponential notation.
	     *
	     * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     */


	    P.toHexadecimal = P.toHex = function (sd, rm) {
	      return toStringBinary(this, 16, sd, rm);
	    };
	    /*
	     * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding
	     * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.
	     *
	     * The return value will always have the same sign as this Decimal, unless either this Decimal
	     * or `y` is NaN, in which case the return value will be also be NaN.
	     *
	     * The return value is not affected by the value of `precision`.
	     *
	     * y {number|string|Decimal} The magnitude to round to a multiple of.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * 'toNearest() rounding mode not an integer: {rm}'
	     * 'toNearest() rounding mode out of range: {rm}'
	     *
	     */


	    P.toNearest = function (y, rm) {
	      var x = this,
	          Ctor = x.constructor;
	      x = new Ctor(x);

	      if (y == null) {
	        // If x is not finite, return x.
	        if (!x.d) return x;
	        y = new Ctor(1);
	        rm = Ctor.rounding;
	      } else {
	        y = new Ctor(y);

	        if (rm === void 0) {
	          rm = Ctor.rounding;
	        } else {
	          checkInt32(rm, 0, 8);
	        } // If x is not finite, return x if y is not NaN, else NaN.


	        if (!x.d) return y.s ? x : y; // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.

	        if (!y.d) {
	          if (y.s) y.s = x.s;
	          return y;
	        }
	      } // If y is not zero, calculate the nearest multiple of y to x.


	      if (y.d[0]) {
	        external = false;
	        x = divide(x, y, 0, rm, 1).times(y);
	        external = true;
	        finalise(x); // If y is zero, return zero with the sign of x.
	      } else {
	        y.s = x.s;
	        x = y;
	      }

	      return x;
	    };
	    /*
	     * Return the value of this Decimal converted to a number primitive.
	     * Zero keeps its sign.
	     *
	     */


	    P.toNumber = function () {
	      return +this;
	    };
	    /*
	     * Return a string representing the value of this Decimal in base 8, round to `sd` significant
	     * digits using rounding mode `rm`.
	     *
	     * If the optional `sd` argument is present then return binary exponential notation.
	     *
	     * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     */


	    P.toOctal = function (sd, rm) {
	      return toStringBinary(this, 8, sd, rm);
	    };
	    /*
	     * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded
	     * to `precision` significant digits using rounding mode `rounding`.
	     *
	     * ECMAScript compliant.
	     *
	     *   pow(x, NaN)                           = NaN
	     *   pow(x, Â±0)                            = 1
	       *   pow(NaN, non-zero)                    = NaN
	     *   pow(abs(x) > 1, +Infinity)            = +Infinity
	     *   pow(abs(x) > 1, -Infinity)            = +0
	     *   pow(abs(x) == 1, Â±Infinity)           = NaN
	     *   pow(abs(x) < 1, +Infinity)            = +0
	     *   pow(abs(x) < 1, -Infinity)            = +Infinity
	     *   pow(+Infinity, y > 0)                 = +Infinity
	     *   pow(+Infinity, y < 0)                 = +0
	     *   pow(-Infinity, odd integer > 0)       = -Infinity
	     *   pow(-Infinity, even integer > 0)      = +Infinity
	     *   pow(-Infinity, odd integer < 0)       = -0
	     *   pow(-Infinity, even integer < 0)      = +0
	     *   pow(+0, y > 0)                        = +0
	     *   pow(+0, y < 0)                        = +Infinity
	     *   pow(-0, odd integer > 0)              = -0
	     *   pow(-0, even integer > 0)             = +0
	     *   pow(-0, odd integer < 0)              = -Infinity
	     *   pow(-0, even integer < 0)             = +Infinity
	     *   pow(finite x < 0, finite non-integer) = NaN
	     *
	     * For non-integer or very large exponents pow(x, y) is calculated using
	     *
	     *   x^y = exp(y*ln(x))
	     *
	     * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the
	     * probability of an incorrectly rounded result
	     * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14
	     * i.e. 1 in 250,000,000,000,000
	     *
	     * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).
	     *
	     * y {number|string|Decimal} The power to which to raise this Decimal.
	     *
	     */


	    P.toPower = P.pow = function (y) {
	      var e,
	          k,
	          pr,
	          r,
	          rm,
	          s,
	          x = this,
	          Ctor = x.constructor,
	          yn = +(y = new Ctor(y)); // Either Â±Infinity, NaN or Â±0?

	      if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));
	      x = new Ctor(x);
	      if (x.eq(1)) return x;
	      pr = Ctor.precision;
	      rm = Ctor.rounding;
	      if (y.eq(1)) return finalise(x, pr, rm); // y exponent

	      e = mathfloor(y.e / LOG_BASE); // If y is a small integer use the 'exponentiation by squaring' algorithm.

	      if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
	        r = intPow(Ctor, x, k, pr);
	        return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
	      }

	      s = x.s; // if x is negative

	      if (s < 0) {
	        // if y is not an integer
	        if (e < y.d.length - 1) return new Ctor(NaN); // Result is positive if x is negative and the last digit of integer y is even.

	        if ((y.d[e] & 1) == 0) s = 1; // if x.eq(-1)

	        if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {
	          x.s = s;
	          return x;
	        }
	      } // Estimate result exponent.
	      // x^y = 10^e,  where e = y * log10(x)
	      // log10(x) = log10(x_significand) + x_exponent
	      // log10(x_significand) = ln(x_significand) / ln(10)


	      k = mathpow(+x, yn);
	      e = k == 0 || !isFinite(k) ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1)) : new Ctor(k + '').e; // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.
	      // Overflow/underflow?

	      if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);
	      external = false;
	      Ctor.rounding = x.s = 1; // Estimate the extra guard digits needed to ensure five correct rounding digits from
	      // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):
	      // new Decimal(2.32456).pow('2087987436534566.46411')
	      // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815

	      k = Math.min(12, (e + '').length); // r = x^y = exp(y*ln(x))

	      r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr); // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)

	      if (r.d) {
	        // Truncate to the required precision plus five rounding digits.
	        r = finalise(r, pr + 5, 1); // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate
	        // the result.

	        if (checkRoundingDigits(r.d, pr, rm)) {
	          e = pr + 10; // Truncate to the increased precision plus five rounding digits.

	          r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1); // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).

	          if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
	            r = finalise(r, pr + 1, 0);
	          }
	        }
	      }

	      r.s = s;
	      external = true;
	      Ctor.rounding = rm;
	      return finalise(r, pr, rm);
	    };
	    /*
	     * Return a string representing the value of this Decimal rounded to `sd` significant digits
	     * using rounding mode `rounding`.
	     *
	     * Return exponential notation if `sd` is less than the number of digits necessary to represent
	     * the integer part of the value in normal notation.
	     *
	     * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     */


	    P.toPrecision = function (sd, rm) {
	      var str,
	          x = this,
	          Ctor = x.constructor;

	      if (sd === void 0) {
	        str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
	      } else {
	        checkInt32(sd, 1, MAX_DIGITS);
	        if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
	        x = finalise(new Ctor(x), sd, rm);
	        str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
	      }

	      return x.isNeg() && !x.isZero() ? '-' + str : str;
	    };
	    /*
	     * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`
	     * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if
	     * omitted.
	     *
	     * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * 'toSD() digits out of range: {sd}'
	     * 'toSD() digits not an integer: {sd}'
	     * 'toSD() rounding mode not an integer: {rm}'
	     * 'toSD() rounding mode out of range: {rm}'
	     *
	     */


	    P.toSignificantDigits = P.toSD = function (sd, rm) {
	      var x = this,
	          Ctor = x.constructor;

	      if (sd === void 0) {
	        sd = Ctor.precision;
	        rm = Ctor.rounding;
	      } else {
	        checkInt32(sd, 1, MAX_DIGITS);
	        if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
	      }

	      return finalise(new Ctor(x), sd, rm);
	    };
	    /*
	     * Return a string representing the value of this Decimal.
	     *
	     * Return exponential notation if this Decimal has a positive exponent equal to or greater than
	     * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.
	     *
	     */


	    P.toString = function () {
	      var x = this,
	          Ctor = x.constructor,
	          str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
	      return x.isNeg() && !x.isZero() ? '-' + str : str;
	    };
	    /*
	     * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.
	     *
	     */


	    P.truncated = P.trunc = function () {
	      return finalise(new this.constructor(this), this.e + 1, 1);
	    };
	    /*
	     * Return a string representing the value of this Decimal.
	     * Unlike `toString`, negative zero will include the minus sign.
	     *
	     */


	    P.valueOf = P.toJSON = function () {
	      var x = this,
	          Ctor = x.constructor,
	          str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
	      return x.isNeg() ? '-' + str : str;
	    };
	    /*
	    // Add aliases to match BigDecimal method names.
	    // P.add = P.plus;
	    P.subtract = P.minus;
	    P.multiply = P.times;
	    P.divide = P.div;
	    P.remainder = P.mod;
	    P.compareTo = P.cmp;
	    P.negate = P.neg;
	     */
	    // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.

	    /*
	     *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,
	     *                           finiteToString, naturalExponential, naturalLogarithm
	     *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,
	     *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random
	     *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm
	     *  convertBase              toStringBinary, parseOther
	     *  cos                      P.cos
	     *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,
	     *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,
	     *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,
	     *                           taylorSeries, atan2, parseOther
	     *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,
	     *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,
	     *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,
	     *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,
	     *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,
	     *                           P.truncated, divide, getLn10, getPi, naturalExponential,
	     *                           naturalLogarithm, ceil, floor, round, trunc
	     *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,
	     *                           toStringBinary
	     *  getBase10Exponent        P.minus, P.plus, P.times, parseOther
	     *  getLn10                  P.logarithm, naturalLogarithm
	     *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2
	     *  getPrecision             P.precision, P.toFraction
	     *  getZeroString            digitsToString, finiteToString
	     *  intPow                   P.toPower, parseOther
	     *  isOdd                    toLessThanHalfPi
	     *  maxOrMin                 max, min
	     *  naturalExponential       P.naturalExponential, P.toPower
	     *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,
	     *                           P.toPower, naturalExponential
	     *  nonFiniteToString        finiteToString, toStringBinary
	     *  parseDecimal             Decimal
	     *  parseOther               Decimal
	     *  sin                      P.sin
	     *  taylorSeries             P.cosh, P.sinh, cos, sin
	     *  toLessThanHalfPi         P.cos, P.sin
	     *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal
	     *  truncate                 intPow
	     *
	     *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,
	     *                           naturalLogarithm, config, parseOther, random, Decimal
	     */


	    function digitsToString(d) {
	      var i,
	          k,
	          ws,
	          indexOfLastWord = d.length - 1,
	          str = '',
	          w = d[0];

	      if (indexOfLastWord > 0) {
	        str += w;

	        for (i = 1; i < indexOfLastWord; i++) {
	          ws = d[i] + '';
	          k = LOG_BASE - ws.length;
	          if (k) str += getZeroString(k);
	          str += ws;
	        }

	        w = d[i];
	        ws = w + '';
	        k = LOG_BASE - ws.length;
	        if (k) str += getZeroString(k);
	      } else if (w === 0) {
	        return '0';
	      } // Remove trailing zeros of last w.


	      for (; w % 10 === 0;) w /= 10;

	      return str + w;
	    }

	    function checkInt32(i, min, max) {
	      if (i !== ~~i || i < min || i > max) {
	        throw Error(invalidArgument + i);
	      }
	    }
	    /*
	     * Check 5 rounding digits if `repeating` is null, 4 otherwise.
	     * `repeating == null` if caller is `log` or `pow`,
	     * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.
	     */


	    function checkRoundingDigits(d, i, rm, repeating) {
	      var di, k, r, rd; // Get the length of the first word of the array d.

	      for (k = d[0]; k >= 10; k /= 10) --i; // Is the rounding digit in the first word of d?


	      if (--i < 0) {
	        i += LOG_BASE;
	        di = 0;
	      } else {
	        di = Math.ceil((i + 1) / LOG_BASE);
	        i %= LOG_BASE;
	      } // i is the index (0 - 6) of the rounding digit.
	      // E.g. if within the word 3487563 the first rounding digit is 5,
	      // then i = 4, k = 1000, rd = 3487563 % 1000 = 563


	      k = mathpow(10, LOG_BASE - i);
	      rd = d[di] % k | 0;

	      if (repeating == null) {
	        if (i < 3) {
	          if (i == 0) rd = rd / 100 | 0;else if (i == 1) rd = rd / 10 | 0;
	          r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;
	        } else {
	          r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 || (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
	        }
	      } else {
	        if (i < 4) {
	          if (i == 0) rd = rd / 1000 | 0;else if (i == 1) rd = rd / 100 | 0;else if (i == 2) rd = rd / 10 | 0;
	          r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
	        } else {
	          r = ((repeating || rm < 4) && rd + 1 == k || !repeating && rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;
	        }
	      }

	      return r;
	    } // Convert string of `baseIn` to an array of numbers of `baseOut`.
	    // Eg. convertBase('255', 10, 16) returns [15, 15].
	    // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].


	    function convertBase(str, baseIn, baseOut) {
	      var j,
	          arr = [0],
	          arrL,
	          i = 0,
	          strL = str.length;

	      for (; i < strL;) {
	        for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;

	        arr[0] += NUMERALS.indexOf(str.charAt(i++));

	        for (j = 0; j < arr.length; j++) {
	          if (arr[j] > baseOut - 1) {
	            if (arr[j + 1] === void 0) arr[j + 1] = 0;
	            arr[j + 1] += arr[j] / baseOut | 0;
	            arr[j] %= baseOut;
	          }
	        }
	      }

	      return arr.reverse();
	    }
	    /*
	     * cos(x) = 1 - x^2/2! + x^4/4! - ...
	     * |x| < pi/2
	     *
	     */


	    function cosine(Ctor, x) {
	      var k,
	          y,
	          len = x.d.length; // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1
	      // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1
	      // Estimate the optimum number of times to use the argument reduction.

	      if (len < 32) {
	        k = Math.ceil(len / 3);
	        y = (1 / tinyPow(4, k)).toString();
	      } else {
	        k = 16;
	        y = '2.3283064365386962890625e-10';
	      }

	      Ctor.precision += k;
	      x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1)); // Reverse argument reduction

	      for (var i = k; i--;) {
	        var cos2x = x.times(x);
	        x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
	      }

	      Ctor.precision -= k;
	      return x;
	    }
	    /*
	     * Perform division in the specified base.
	     */


	    var divide = function () {
	      // Assumes non-zero x and k, and hence non-zero result.
	      function multiplyInteger(x, k, base) {
	        var temp,
	            carry = 0,
	            i = x.length;

	        for (x = x.slice(); i--;) {
	          temp = x[i] * k + carry;
	          x[i] = temp % base | 0;
	          carry = temp / base | 0;
	        }

	        if (carry) x.unshift(carry);
	        return x;
	      }

	      function compare(a, b, aL, bL) {
	        var i, r;

	        if (aL != bL) {
	          r = aL > bL ? 1 : -1;
	        } else {
	          for (i = r = 0; i < aL; i++) {
	            if (a[i] != b[i]) {
	              r = a[i] > b[i] ? 1 : -1;
	              break;
	            }
	          }
	        }

	        return r;
	      }

	      function subtract(a, b, aL, base) {
	        var i = 0; // Subtract b from a.

	        for (; aL--;) {
	          a[aL] -= i;
	          i = a[aL] < b[aL] ? 1 : 0;
	          a[aL] = i * base + a[aL] - b[aL];
	        } // Remove leading zeros.


	        for (; !a[0] && a.length > 1;) a.shift();
	      }

	      return function (x, y, pr, rm, dp, base) {
	        var cmp,
	            e,
	            i,
	            k,
	            logBase,
	            more,
	            prod,
	            prodL,
	            q,
	            qd,
	            rem,
	            remL,
	            rem0,
	            sd,
	            t,
	            xi,
	            xL,
	            yd0,
	            yL,
	            yz,
	            Ctor = x.constructor,
	            sign = x.s == y.s ? 1 : -1,
	            xd = x.d,
	            yd = y.d; // Either NaN, Infinity or 0?

	        if (!xd || !xd[0] || !yd || !yd[0]) {
	          return new Ctor( // Return NaN if either NaN, or both Infinity or 0.
	          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN : // Return Â±0 if x is 0 or y is Â±Infinity, or return Â±Infinity as y is 0.
	          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);
	        }

	        if (base) {
	          logBase = 1;
	          e = x.e - y.e;
	        } else {
	          base = BASE;
	          logBase = LOG_BASE;
	          e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
	        }

	        yL = yd.length;
	        xL = xd.length;
	        q = new Ctor(sign);
	        qd = q.d = []; // Result exponent may be one less than e.
	        // The digit array of a Decimal from toStringBinary may have trailing zeros.

	        for (i = 0; yd[i] == (xd[i] || 0); i++);

	        if (yd[i] > (xd[i] || 0)) e--;

	        if (pr == null) {
	          sd = pr = Ctor.precision;
	          rm = Ctor.rounding;
	        } else if (dp) {
	          sd = pr + (x.e - y.e) + 1;
	        } else {
	          sd = pr;
	        }

	        if (sd < 0) {
	          qd.push(1);
	          more = true;
	        } else {
	          // Convert precision in number of base 10 digits to base 1e7 digits.
	          sd = sd / logBase + 2 | 0;
	          i = 0; // divisor < 1e7

	          if (yL == 1) {
	            k = 0;
	            yd = yd[0];
	            sd++; // k is the carry.

	            for (; (i < xL || k) && sd--; i++) {
	              t = k * base + (xd[i] || 0);
	              qd[i] = t / yd | 0;
	              k = t % yd | 0;
	            }

	            more = k || i < xL; // divisor >= 1e7
	          } else {
	            // Normalise xd and yd so highest order digit of yd is >= base/2
	            k = base / (yd[0] + 1) | 0;

	            if (k > 1) {
	              yd = multiplyInteger(yd, k, base);
	              xd = multiplyInteger(xd, k, base);
	              yL = yd.length;
	              xL = xd.length;
	            }

	            xi = yL;
	            rem = xd.slice(0, yL);
	            remL = rem.length; // Add zeros to make remainder as long as divisor.

	            for (; remL < yL;) rem[remL++] = 0;

	            yz = yd.slice();
	            yz.unshift(0);
	            yd0 = yd[0];
	            if (yd[1] >= base / 2) ++yd0;

	            do {
	              k = 0; // Compare divisor and remainder.

	              cmp = compare(yd, rem, yL, remL); // If divisor < remainder.

	              if (cmp < 0) {
	                // Calculate trial digit, k.
	                rem0 = rem[0];
	                if (yL != remL) rem0 = rem0 * base + (rem[1] || 0); // k will be how many times the divisor goes into the current remainder.

	                k = rem0 / yd0 | 0; //  Algorithm:
	                //  1. product = divisor * trial digit (k)
	                //  2. if product > remainder: product -= divisor, k--
	                //  3. remainder -= product
	                //  4. if product was < remainder at 2:
	                //    5. compare new remainder and divisor
	                //    6. If remainder > divisor: remainder -= divisor, k++

	                if (k > 1) {
	                  if (k >= base) k = base - 1; // product = divisor * trial digit.

	                  prod = multiplyInteger(yd, k, base);
	                  prodL = prod.length;
	                  remL = rem.length; // Compare product and remainder.

	                  cmp = compare(prod, rem, prodL, remL); // product > remainder.

	                  if (cmp == 1) {
	                    k--; // Subtract divisor from product.

	                    subtract(prod, yL < prodL ? yz : yd, prodL, base);
	                  }
	                } else {
	                  // cmp is -1.
	                  // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1
	                  // to avoid it. If k is 1 there is a need to compare yd and rem again below.
	                  if (k == 0) cmp = k = 1;
	                  prod = yd.slice();
	                }

	                prodL = prod.length;
	                if (prodL < remL) prod.unshift(0); // Subtract product from remainder.

	                subtract(rem, prod, remL, base); // If product was < previous remainder.

	                if (cmp == -1) {
	                  remL = rem.length; // Compare divisor and new remainder.

	                  cmp = compare(yd, rem, yL, remL); // If divisor < new remainder, subtract divisor from remainder.

	                  if (cmp < 1) {
	                    k++; // Subtract divisor from remainder.

	                    subtract(rem, yL < remL ? yz : yd, remL, base);
	                  }
	                }

	                remL = rem.length;
	              } else if (cmp === 0) {
	                k++;
	                rem = [0];
	              } // if cmp === 1, k will be 0
	              // Add the next digit, k, to the result array.


	              qd[i++] = k; // Update the remainder.

	              if (cmp && rem[0]) {
	                rem[remL++] = xd[xi] || 0;
	              } else {
	                rem = [xd[xi]];
	                remL = 1;
	              }
	            } while ((xi++ < xL || rem[0] !== void 0) && sd--);

	            more = rem[0] !== void 0;
	          } // Leading zero?


	          if (!qd[0]) qd.shift();
	        } // logBase is 1 when divide is being used for base conversion.


	        if (logBase == 1) {
	          q.e = e;
	          inexact = more;
	        } else {
	          // To calculate q.e, first get the number of digits of qd[0].
	          for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;

	          q.e = i + e * logBase - 1;
	          finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
	        }

	        return q;
	      };
	    }();
	    /*
	     * Round `x` to `sd` significant digits using rounding mode `rm`.
	     * Check for over/under-flow.
	     */


	    function finalise(x, sd, rm, isTruncated) {
	      var digits,
	          i,
	          j,
	          k,
	          rd,
	          roundUp,
	          w,
	          xd,
	          xdi,
	          Ctor = x.constructor; // Don't round if sd is null or undefined.

	      out: if (sd != null) {
	        xd = x.d; // Infinity/NaN.

	        if (!xd) return x; // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.
	        // w: the word of xd containing rd, a base 1e7 number.
	        // xdi: the index of w within xd.
	        // digits: the number of digits of w.
	        // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if
	        // they had leading zeros)
	        // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).
	        // Get the length of the first word of the digits array xd.

	        for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;

	        i = sd - digits; // Is the rounding digit in the first word of xd?

	        if (i < 0) {
	          i += LOG_BASE;
	          j = sd;
	          w = xd[xdi = 0]; // Get the rounding digit at index j of w.

	          rd = w / mathpow(10, digits - j - 1) % 10 | 0;
	        } else {
	          xdi = Math.ceil((i + 1) / LOG_BASE);
	          k = xd.length;

	          if (xdi >= k) {
	            if (isTruncated) {
	              // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.
	              for (; k++ <= xdi;) xd.push(0);

	              w = rd = 0;
	              digits = 1;
	              i %= LOG_BASE;
	              j = i - LOG_BASE + 1;
	            } else {
	              break out;
	            }
	          } else {
	            w = k = xd[xdi]; // Get the number of digits of w.

	            for (digits = 1; k >= 10; k /= 10) digits++; // Get the index of rd within w.


	            i %= LOG_BASE; // Get the index of rd within w, adjusted for leading zeros.
	            // The number of leading zeros of w is given by LOG_BASE - digits.

	            j = i - LOG_BASE + digits; // Get the rounding digit at index j of w.

	            rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
	          }
	        } // Are there any non-zero digits after the rounding digit?


	        isTruncated = isTruncated || sd < 0 || xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1)); // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right
	        // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression
	        // will give 714.

	        roundUp = rm < 4 ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
	        (i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));

	        if (sd < 1 || !xd[0]) {
	          xd.length = 0;

	          if (roundUp) {
	            // Convert sd to decimal places.
	            sd -= x.e + 1; // 1, 0.1, 0.01, 0.001, 0.0001 etc.

	            xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
	            x.e = -sd || 0;
	          } else {
	            // Zero.
	            xd[0] = x.e = 0;
	          }

	          return x;
	        } // Remove excess digits.


	        if (i == 0) {
	          xd.length = xdi;
	          k = 1;
	          xdi--;
	        } else {
	          xd.length = xdi + 1;
	          k = mathpow(10, LOG_BASE - i); // E.g. 56700 becomes 56000 if 7 is the rounding digit.
	          // j > 0 means i > number of leading zeros of w.

	          xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
	        }

	        if (roundUp) {
	          for (;;) {
	            // Is the digit to be rounded up in the first word of xd?
	            if (xdi == 0) {
	              // i will be the length of xd[0] before k is added.
	              for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;

	              j = xd[0] += k;

	              for (k = 1; j >= 10; j /= 10) k++; // if i != k the length has increased.


	              if (i != k) {
	                x.e++;
	                if (xd[0] == BASE) xd[0] = 1;
	              }

	              break;
	            } else {
	              xd[xdi] += k;
	              if (xd[xdi] != BASE) break;
	              xd[xdi--] = 0;
	              k = 1;
	            }
	          }
	        } // Remove trailing zeros.


	        for (i = xd.length; xd[--i] === 0;) xd.pop();
	      }

	      if (external) {
	        // Overflow?
	        if (x.e > Ctor.maxE) {
	          // Infinity.
	          x.d = null;
	          x.e = NaN; // Underflow?
	        } else if (x.e < Ctor.minE) {
	          // Zero.
	          x.e = 0;
	          x.d = [0]; // Ctor.underflow = true;
	        } // else Ctor.underflow = false;

	      }

	      return x;
	    }

	    function finiteToString(x, isExp, sd) {
	      if (!x.isFinite()) return nonFiniteToString(x);
	      var k,
	          e = x.e,
	          str = digitsToString(x.d),
	          len = str.length;

	      if (isExp) {
	        if (sd && (k = sd - len) > 0) {
	          str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);
	        } else if (len > 1) {
	          str = str.charAt(0) + '.' + str.slice(1);
	        }

	        str = str + (x.e < 0 ? 'e' : 'e+') + x.e;
	      } else if (e < 0) {
	        str = '0.' + getZeroString(-e - 1) + str;
	        if (sd && (k = sd - len) > 0) str += getZeroString(k);
	      } else if (e >= len) {
	        str += getZeroString(e + 1 - len);
	        if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);
	      } else {
	        if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);

	        if (sd && (k = sd - len) > 0) {
	          if (e + 1 === len) str += '.';
	          str += getZeroString(k);
	        }
	      }

	      return str;
	    } // Calculate the base 10 exponent from the base 1e7 exponent.


	    function getBase10Exponent(digits, e) {
	      var w = digits[0]; // Add the number of digits of the first word of the digits array.

	      for (e *= LOG_BASE; w >= 10; w /= 10) e++;

	      return e;
	    }

	    function getLn10(Ctor, sd, pr) {
	      if (sd > LN10_PRECISION) {
	        // Reset global state in case the exception is caught.
	        external = true;
	        if (pr) Ctor.precision = pr;
	        throw Error(precisionLimitExceeded);
	      }

	      return finalise(new Ctor(LN10), sd, 1, true);
	    }

	    function getPi(Ctor, sd, rm) {
	      if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);
	      return finalise(new Ctor(PI), sd, rm, true);
	    }

	    function getPrecision(digits) {
	      var w = digits.length - 1,
	          len = w * LOG_BASE + 1;
	      w = digits[w]; // If non-zero...

	      if (w) {
	        // Subtract the number of trailing zeros of the last word.
	        for (; w % 10 == 0; w /= 10) len--; // Add the number of digits of the first word.


	        for (w = digits[0]; w >= 10; w /= 10) len++;
	      }

	      return len;
	    }

	    function getZeroString(k) {
	      var zs = '';

	      for (; k--;) zs += '0';

	      return zs;
	    }
	    /*
	     * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an
	     * integer of type number.
	     *
	     * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.
	     *
	     */


	    function intPow(Ctor, x, n, pr) {
	      var isTruncated,
	          r = new Ctor(1),
	          // Max n of 9007199254740991 takes 53 loop iterations.
	      // Maximum digits array length; leaves [28, 34] guard digits.
	      k = Math.ceil(pr / LOG_BASE + 4);
	      external = false;

	      for (;;) {
	        if (n % 2) {
	          r = r.times(x);
	          if (truncate(r.d, k)) isTruncated = true;
	        }

	        n = mathfloor(n / 2);

	        if (n === 0) {
	          // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.
	          n = r.d.length - 1;
	          if (isTruncated && r.d[n] === 0) ++r.d[n];
	          break;
	        }

	        x = x.times(x);
	        truncate(x.d, k);
	      }

	      external = true;
	      return r;
	    }

	    function isOdd(n) {
	      return n.d[n.d.length - 1] & 1;
	    }
	    /*
	     * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.
	     */


	    function maxOrMin(Ctor, args, ltgt) {
	      var y,
	          x = new Ctor(args[0]),
	          i = 0;

	      for (; ++i < args.length;) {
	        y = new Ctor(args[i]);

	        if (!y.s) {
	          x = y;
	          break;
	        } else if (x[ltgt](y)) {
	          x = y;
	        }
	      }

	      return x;
	    }
	    /*
	     * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant
	     * digits.
	     *
	     * Taylor/Maclaurin series.
	     *
	     * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
	     *
	     * Argument reduction:
	     *   Repeat x = x / 32, k += 5, until |x| < 0.1
	     *   exp(x) = exp(x / 2^k)^(2^k)
	     *
	     * Previously, the argument was initially reduced by
	     * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
	     * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
	     * found to be slower than just dividing repeatedly by 32 as above.
	     *
	     * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000
	     * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000
	     * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)
	     *
	     *  exp(Infinity)  = Infinity
	     *  exp(-Infinity) = 0
	     *  exp(NaN)       = NaN
	     *  exp(Â±0)        = 1
	     *
	     *  exp(x) is non-terminating for any finite, non-zero x.
	     *
	     *  The result will always be correctly rounded.
	     *
	     */


	    function naturalExponential(x, sd) {
	      var denominator,
	          guard,
	          j,
	          pow,
	          sum,
	          t,
	          wpr,
	          rep = 0,
	          i = 0,
	          k = 0,
	          Ctor = x.constructor,
	          rm = Ctor.rounding,
	          pr = Ctor.precision; // 0/NaN/Infinity?

	      if (!x.d || !x.d[0] || x.e > 17) {
	        return new Ctor(x.d ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0 : x.s ? x.s < 0 ? 0 : x : 0 / 0);
	      }

	      if (sd == null) {
	        external = false;
	        wpr = pr;
	      } else {
	        wpr = sd;
	      }

	      t = new Ctor(0.03125); // while abs(x) >= 0.1

	      while (x.e > -2) {
	        // x = x / 2^5
	        x = x.times(t);
	        k += 5;
	      } // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision
	      // necessary to ensure the first 4 rounding digits are correct.


	      guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
	      wpr += guard;
	      denominator = pow = sum = new Ctor(1);
	      Ctor.precision = wpr;

	      for (;;) {
	        pow = finalise(pow.times(x), wpr, 1);
	        denominator = denominator.times(++i);
	        t = sum.plus(divide(pow, denominator, wpr, 1));

	        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
	          j = k;

	          while (j--) sum = finalise(sum.times(sum), wpr, 1); // Check to see if the first 4 rounding digits are [49]999.
	          // If so, repeat the summation with a higher precision, otherwise
	          // e.g. with precision: 18, rounding: 1
	          // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)
	          // `wpr - guard` is the index of first rounding digit.


	          if (sd == null) {
	            if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
	              Ctor.precision = wpr += 10;
	              denominator = pow = t = new Ctor(1);
	              i = 0;
	              rep++;
	            } else {
	              return finalise(sum, Ctor.precision = pr, rm, external = true);
	            }
	          } else {
	            Ctor.precision = pr;
	            return sum;
	          }
	        }

	        sum = t;
	      }
	    }
	    /*
	     * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant
	     * digits.
	     *
	     *  ln(-n)        = NaN
	     *  ln(0)         = -Infinity
	     *  ln(-0)        = -Infinity
	     *  ln(1)         = 0
	     *  ln(Infinity)  = Infinity
	     *  ln(-Infinity) = NaN
	     *  ln(NaN)       = NaN
	     *
	     *  ln(n) (n != 1) is non-terminating.
	     *
	     */


	    function naturalLogarithm(y, sd) {
	      var c,
	          c0,
	          denominator,
	          e,
	          numerator,
	          rep,
	          sum,
	          t,
	          wpr,
	          x1,
	          x2,
	          n = 1,
	          guard = 10,
	          x = y,
	          xd = x.d,
	          Ctor = x.constructor,
	          rm = Ctor.rounding,
	          pr = Ctor.precision; // Is x negative or Infinity, NaN, 0 or 1?

	      if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
	        return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
	      }

	      if (sd == null) {
	        external = false;
	        wpr = pr;
	      } else {
	        wpr = sd;
	      }

	      Ctor.precision = wpr += guard;
	      c = digitsToString(xd);
	      c0 = c.charAt(0);

	      if (Math.abs(e = x.e) < 1.5e15) {
	        // Argument reduction.
	        // The series converges faster the closer the argument is to 1, so using
	        // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
	        // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,
	        // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can
	        // later be divided by this number, then separate out the power of 10 using
	        // ln(a*10^b) = ln(a) + b*ln(10).
	        // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).
	        //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {
	        // max n is 6 (gives 0.7 - 1.3)
	        while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
	          x = x.times(y);
	          c = digitsToString(x.d);
	          c0 = c.charAt(0);
	          n++;
	        }

	        e = x.e;

	        if (c0 > 1) {
	          x = new Ctor('0.' + c);
	          e++;
	        } else {
	          x = new Ctor(c0 + '.' + c.slice(1));
	        }
	      } else {
	        // The argument reduction method above may result in overflow if the argument y is a massive
	        // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this
	        // function using ln(x*10^e) = ln(x) + e*ln(10).
	        t = getLn10(Ctor, wpr + 2, pr).times(e + '');
	        x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);
	        Ctor.precision = pr;
	        return sd == null ? finalise(x, pr, rm, external = true) : x;
	      } // x1 is x reduced to a value near 1.


	      x1 = x; // Taylor series.
	      // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)
	      // where x = (y - 1)/(y + 1)    (|x| < 1)

	      sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
	      x2 = finalise(x.times(x), wpr, 1);
	      denominator = 3;

	      for (;;) {
	        numerator = finalise(numerator.times(x2), wpr, 1);
	        t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));

	        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
	          sum = sum.times(2); // Reverse the argument reduction. Check that e is not 0 because, besides preventing an
	          // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.

	          if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));
	          sum = divide(sum, new Ctor(n), wpr, 1); // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has
	          // been repeated previously) and the first 4 rounding digits 9999?
	          // If so, restart the summation with a higher precision, otherwise
	          // e.g. with precision: 12, rounding: 1
	          // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.
	          // `wpr - guard` is the index of first rounding digit.

	          if (sd == null) {
	            if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
	              Ctor.precision = wpr += guard;
	              t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
	              x2 = finalise(x.times(x), wpr, 1);
	              denominator = rep = 1;
	            } else {
	              return finalise(sum, Ctor.precision = pr, rm, external = true);
	            }
	          } else {
	            Ctor.precision = pr;
	            return sum;
	          }
	        }

	        sum = t;
	        denominator += 2;
	      }
	    } // Â±Infinity, NaN.


	    function nonFiniteToString(x) {
	      // Unsigned.
	      return String(x.s * x.s / 0);
	    }
	    /*
	     * Parse the value of a new Decimal `x` from string `str`.
	     */


	    function parseDecimal(x, str) {
	      var e, i, len; // Decimal point?

	      if ((e = str.indexOf('.')) > -1) str = str.replace('.', ''); // Exponential form?

	      if ((i = str.search(/e/i)) > 0) {
	        // Determine exponent.
	        if (e < 0) e = i;
	        e += +str.slice(i + 1);
	        str = str.substring(0, i);
	      } else if (e < 0) {
	        // Integer.
	        e = str.length;
	      } // Determine leading zeros.


	      for (i = 0; str.charCodeAt(i) === 48; i++); // Determine trailing zeros.


	      for (len = str.length; str.charCodeAt(len - 1) === 48; --len);

	      str = str.slice(i, len);

	      if (str) {
	        len -= i;
	        x.e = e = e - i - 1;
	        x.d = []; // Transform base
	        // e is the base 10 exponent.
	        // i is where to slice str to get the first word of the digits array.

	        i = (e + 1) % LOG_BASE;
	        if (e < 0) i += LOG_BASE;

	        if (i < len) {
	          if (i) x.d.push(+str.slice(0, i));

	          for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));

	          str = str.slice(i);
	          i = LOG_BASE - str.length;
	        } else {
	          i -= len;
	        }

	        for (; i--;) str += '0';

	        x.d.push(+str);

	        if (external) {
	          // Overflow?
	          if (x.e > x.constructor.maxE) {
	            // Infinity.
	            x.d = null;
	            x.e = NaN; // Underflow?
	          } else if (x.e < x.constructor.minE) {
	            // Zero.
	            x.e = 0;
	            x.d = [0]; // x.constructor.underflow = true;
	          } // else x.constructor.underflow = false;

	        }
	      } else {
	        // Zero.
	        x.e = 0;
	        x.d = [0];
	      }

	      return x;
	    }
	    /*
	     * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.
	     */


	    function parseOther(x, str) {
	      var base, Ctor, divisor, i, isFloat, len, p, xd, xe;

	      if (str === 'Infinity' || str === 'NaN') {
	        if (!+str) x.s = NaN;
	        x.e = NaN;
	        x.d = null;
	        return x;
	      }

	      if (isHex.test(str)) {
	        base = 16;
	        str = str.toLowerCase();
	      } else if (isBinary.test(str)) {
	        base = 2;
	      } else if (isOctal.test(str)) {
	        base = 8;
	      } else {
	        throw Error(invalidArgument + str);
	      } // Is there a binary exponent part?


	      i = str.search(/p/i);

	      if (i > 0) {
	        p = +str.slice(i + 1);
	        str = str.substring(2, i);
	      } else {
	        str = str.slice(2);
	      } // Convert `str` as an integer then divide the result by `base` raised to a power such that the
	      // fraction part will be restored.


	      i = str.indexOf('.');
	      isFloat = i >= 0;
	      Ctor = x.constructor;

	      if (isFloat) {
	        str = str.replace('.', '');
	        len = str.length;
	        i = len - i; // log[10](16) = 1.2041... , log[10](88) = 1.9444....

	        divisor = intPow(Ctor, new Ctor(base), i, i * 2);
	      }

	      xd = convertBase(str, base, BASE);
	      xe = xd.length - 1; // Remove trailing zeros.

	      for (i = xe; xd[i] === 0; --i) xd.pop();

	      if (i < 0) return new Ctor(x.s * 0);
	      x.e = getBase10Exponent(xd, xe);
	      x.d = xd;
	      external = false; // At what precision to perform the division to ensure exact conversion?
	      // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)
	      // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412
	      // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.
	      // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount
	      // Therefore using 4 * the number of digits of str will always be enough.

	      if (isFloat) x = divide(x, divisor, len * 4); // Multiply by the binary exponent part if present.

	      if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));
	      external = true;
	      return x;
	    }
	    /*
	     * sin(x) = x - x^3/3! + x^5/5! - ...
	     * |x| < pi/2
	     *
	     */


	    function sine(Ctor, x) {
	      var k,
	          len = x.d.length;
	      if (len < 3) return taylorSeries(Ctor, 2, x, x); // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)
	      // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)
	      // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))
	      // Estimate the optimum number of times to use the argument reduction.

	      k = 1.4 * Math.sqrt(len);
	      k = k > 16 ? 16 : k | 0;
	      x = x.times(1 / tinyPow(5, k));
	      x = taylorSeries(Ctor, 2, x, x); // Reverse argument reduction

	      var sin2_x,
	          d5 = new Ctor(5),
	          d16 = new Ctor(16),
	          d20 = new Ctor(20);

	      for (; k--;) {
	        sin2_x = x.times(x);
	        x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
	      }

	      return x;
	    } // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.


	    function taylorSeries(Ctor, n, x, y, isHyperbolic) {
	      var j,
	          t,
	          u,
	          x2,
	          pr = Ctor.precision,
	          k = Math.ceil(pr / LOG_BASE);
	      external = false;
	      x2 = x.times(x);
	      u = new Ctor(y);

	      for (;;) {
	        t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);
	        u = isHyperbolic ? y.plus(t) : y.minus(t);
	        y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);
	        t = u.plus(y);

	        if (t.d[k] !== void 0) {
	          for (j = k; t.d[j] === u.d[j] && j--;);

	          if (j == -1) break;
	        }

	        j = u;
	        u = y;
	        y = t;
	        t = j;
	      }

	      external = true;
	      t.d.length = k + 1;
	      return t;
	    } // Exponent e must be positive and non-zero.


	    function tinyPow(b, e) {
	      var n = b;

	      while (--e) n *= b;

	      return n;
	    } // Return the absolute value of `x` reduced to less than or equal to half pi.


	    function toLessThanHalfPi(Ctor, x) {
	      var t,
	          isNeg = x.s < 0,
	          pi = getPi(Ctor, Ctor.precision, 1),
	          halfPi = pi.times(0.5);
	      x = x.abs();

	      if (x.lte(halfPi)) {
	        quadrant = isNeg ? 4 : 1;
	        return x;
	      }

	      t = x.divToInt(pi);

	      if (t.isZero()) {
	        quadrant = isNeg ? 3 : 2;
	      } else {
	        x = x.minus(t.times(pi)); // 0 <= x < pi

	        if (x.lte(halfPi)) {
	          quadrant = isOdd(t) ? isNeg ? 2 : 3 : isNeg ? 4 : 1;
	          return x;
	        }

	        quadrant = isOdd(t) ? isNeg ? 1 : 4 : isNeg ? 3 : 2;
	      }

	      return x.minus(pi).abs();
	    }
	    /*
	     * Return the value of Decimal `x` as a string in base `baseOut`.
	     *
	     * If the optional `sd` argument is present include a binary exponent suffix.
	     */


	    function toStringBinary(x, baseOut, sd, rm) {
	      var base,
	          e,
	          i,
	          k,
	          len,
	          roundUp,
	          str,
	          xd,
	          y,
	          Ctor = x.constructor,
	          isExp = sd !== void 0;

	      if (isExp) {
	        checkInt32(sd, 1, MAX_DIGITS);
	        if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
	      } else {
	        sd = Ctor.precision;
	        rm = Ctor.rounding;
	      }

	      if (!x.isFinite()) {
	        str = nonFiniteToString(x);
	      } else {
	        str = finiteToString(x);
	        i = str.indexOf('.'); // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:
	        // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))
	        // minBinaryExponent = floor(decimalExponent * log[2](10))
	        // log[2](10) = 3.321928094887362347870319429489390175864

	        if (isExp) {
	          base = 2;

	          if (baseOut == 16) {
	            sd = sd * 4 - 3;
	          } else if (baseOut == 8) {
	            sd = sd * 3 - 2;
	          }
	        } else {
	          base = baseOut;
	        } // Convert the number as an integer then divide the result by its base raised to a power such
	        // that the fraction part will be restored.
	        // Non-integer.


	        if (i >= 0) {
	          str = str.replace('.', '');
	          y = new Ctor(1);
	          y.e = str.length - i;
	          y.d = convertBase(finiteToString(y), 10, base);
	          y.e = y.d.length;
	        }

	        xd = convertBase(str, 10, base);
	        e = len = xd.length; // Remove trailing zeros.

	        for (; xd[--len] == 0;) xd.pop();

	        if (!xd[0]) {
	          str = isExp ? '0p+0' : '0';
	        } else {
	          if (i < 0) {
	            e--;
	          } else {
	            x = new Ctor(x);
	            x.d = xd;
	            x.e = e;
	            x = divide(x, y, sd, rm, 0, base);
	            xd = x.d;
	            e = x.e;
	            roundUp = inexact;
	          } // The rounding digit, i.e. the digit after the digit that may be rounded up.


	          i = xd[sd];
	          k = base / 2;
	          roundUp = roundUp || xd[sd + 1] !== void 0;
	          roundUp = rm < 4 ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2)) : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 || rm === (x.s < 0 ? 8 : 7));
	          xd.length = sd;

	          if (roundUp) {
	            // Rounding up may mean the previous digit has to be rounded up and so on.
	            for (; ++xd[--sd] > base - 1;) {
	              xd[sd] = 0;

	              if (!sd) {
	                ++e;
	                xd.unshift(1);
	              }
	            }
	          } // Determine trailing zeros.


	          for (len = xd.length; !xd[len - 1]; --len); // E.g. [4, 11, 15] becomes 4bf.


	          for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]); // Add binary exponent suffix?


	          if (isExp) {
	            if (len > 1) {
	              if (baseOut == 16 || baseOut == 8) {
	                i = baseOut == 16 ? 4 : 3;

	                for (--len; len % i; len++) str += '0';

	                xd = convertBase(str, base, baseOut);

	                for (len = xd.length; !xd[len - 1]; --len); // xd[0] will always be be 1


	                for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);
	              } else {
	                str = str.charAt(0) + '.' + str.slice(1);
	              }
	            }

	            str = str + (e < 0 ? 'p' : 'p+') + e;
	          } else if (e < 0) {
	            for (; ++e;) str = '0' + str;

	            str = '0.' + str;
	          } else {
	            if (++e > len) for (e -= len; e--;) str += '0';else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);
	          }
	        }

	        str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;
	      }

	      return x.s < 0 ? '-' + str : str;
	    } // Does not strip trailing zeros.


	    function truncate(arr, len) {
	      if (arr.length > len) {
	        arr.length = len;
	        return true;
	      }
	    } // Decimal methods

	    /*
	     *  abs
	     *  acos
	     *  acosh
	     *  add
	     *  asin
	     *  asinh
	     *  atan
	     *  atanh
	     *  atan2
	     *  cbrt
	     *  ceil
	     *  clone
	     *  config
	     *  cos
	     *  cosh
	     *  div
	     *  exp
	     *  floor
	     *  hypot
	     *  ln
	     *  log
	     *  log2
	     *  log10
	     *  max
	     *  min
	     *  mod
	     *  mul
	     *  pow
	     *  random
	     *  round
	     *  set
	     *  sign
	     *  sin
	     *  sinh
	     *  sqrt
	     *  sub
	     *  tan
	     *  tanh
	     *  trunc
	     */

	    /*
	     * Return a new Decimal whose value is the absolute value of `x`.
	     *
	     * x {number|string|Decimal}
	     *
	     */


	    function abs(x) {
	      return new this(x).abs();
	    }
	    /*
	     * Return a new Decimal whose value is the arccosine in radians of `x`.
	     *
	     * x {number|string|Decimal}
	     *
	     */


	    function acos(x) {
	      return new this(x).acos();
	    }
	    /*
	     * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to
	     * `precision` significant digits using rounding mode `rounding`.
	     *
	     * x {number|string|Decimal} A value in radians.
	     *
	     */


	    function acosh(x) {
	      return new this(x).acosh();
	    }
	    /*
	     * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant
	     * digits using rounding mode `rounding`.
	     *
	     * x {number|string|Decimal}
	     * y {number|string|Decimal}
	     *
	     */


	    function add(x, y) {
	      return new this(x).plus(y);
	    }
	    /*
	     * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`
	     * significant digits using rounding mode `rounding`.
	     *
	     * x {number|string|Decimal}
	     *
	     */


	    function asin(x) {
	      return new this(x).asin();
	    }
	    /*
	     * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to
	     * `precision` significant digits using rounding mode `rounding`.
	     *
	     * x {number|string|Decimal} A value in radians.
	     *
	     */


	    function asinh(x) {
	      return new this(x).asinh();
	    }
	    /*
	     * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`
	     * significant digits using rounding mode `rounding`.
	     *
	     * x {number|string|Decimal}
	     *
	     */


	    function atan(x) {
	      return new this(x).atan();
	    }
	    /*
	     * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to
	     * `precision` significant digits using rounding mode `rounding`.
	     *
	     * x {number|string|Decimal} A value in radians.
	     *
	     */


	    function atanh(x) {
	      return new this(x).atanh();
	    }
	    /*
	     * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi
	     * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.
	     *
	     * Domain: [-Infinity, Infinity]
	     * Range: [-pi, pi]
	     *
	     * y {number|string|Decimal} The y-coordinate.
	     * x {number|string|Decimal} The x-coordinate.
	     *
	     * atan2(Â±0, -0)               = Â±pi
	     * atan2(Â±0, +0)               = Â±0
	     * atan2(Â±0, -x)               = Â±pi for x > 0
	     * atan2(Â±0, x)                = Â±0 for x > 0
	     * atan2(-y, Â±0)               = -pi/2 for y > 0
	     * atan2(y, Â±0)                = pi/2 for y > 0
	     * atan2(Â±y, -Infinity)        = Â±pi for finite y > 0
	     * atan2(Â±y, +Infinity)        = Â±0 for finite y > 0
	     * atan2(Â±Infinity, x)         = Â±pi/2 for finite x
	     * atan2(Â±Infinity, -Infinity) = Â±3*pi/4
	     * atan2(Â±Infinity, +Infinity) = Â±pi/4
	     * atan2(NaN, x) = NaN
	     * atan2(y, NaN) = NaN
	     *
	     */


	    function atan2(y, x) {
	      y = new this(y);
	      x = new this(x);
	      var r,
	          pr = this.precision,
	          rm = this.rounding,
	          wpr = pr + 4; // Either NaN

	      if (!y.s || !x.s) {
	        r = new this(NaN); // Both Â±Infinity
	      } else if (!y.d && !x.d) {
	        r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
	        r.s = y.s; // x is Â±Infinity or y is Â±0
	      } else if (!x.d || y.isZero()) {
	        r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
	        r.s = y.s; // y is Â±Infinity or x is Â±0
	      } else if (!y.d || x.isZero()) {
	        r = getPi(this, wpr, 1).times(0.5);
	        r.s = y.s; // Both non-zero and finite
	      } else if (x.s < 0) {
	        this.precision = wpr;
	        this.rounding = 1;
	        r = this.atan(divide(y, x, wpr, 1));
	        x = getPi(this, wpr, 1);
	        this.precision = pr;
	        this.rounding = rm;
	        r = y.s < 0 ? r.minus(x) : r.plus(x);
	      } else {
	        r = this.atan(divide(y, x, wpr, 1));
	      }

	      return r;
	    }
	    /*
	     * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant
	     * digits using rounding mode `rounding`.
	     *
	     * x {number|string|Decimal}
	     *
	     */


	    function cbrt(x) {
	      return new this(x).cbrt();
	    }
	    /*
	     * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.
	     *
	     * x {number|string|Decimal}
	     *
	     */


	    function ceil(x) {
	      return finalise(x = new this(x), x.e + 1, 2);
	    }
	    /*
	     * Configure global settings for a Decimal constructor.
	     *
	     * `obj` is an object with one or more of the following properties,
	     *
	     *   precision  {number}
	     *   rounding   {number}
	     *   toExpNeg   {number}
	     *   toExpPos   {number}
	     *   maxE       {number}
	     *   minE       {number}
	     *   modulo     {number}
	     *   crypto     {boolean|number}
	     *   defaults   {true}
	     *
	     * E.g. Decimal.config({ precision: 20, rounding: 4 })
	     *
	     */


	    function config(obj) {
	      if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');
	      var i,
	          p,
	          v,
	          useDefaults = obj.defaults === true,
	          ps = ['precision', 1, MAX_DIGITS, 'rounding', 0, 8, 'toExpNeg', -EXP_LIMIT, 0, 'toExpPos', 0, EXP_LIMIT, 'maxE', 0, EXP_LIMIT, 'minE', -EXP_LIMIT, 0, 'modulo', 0, 9];

	      for (i = 0; i < ps.length; i += 3) {
	        if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];

	        if ((v = obj[p]) !== void 0) {
	          if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;else throw Error(invalidArgument + p + ': ' + v);
	        }
	      }

	      if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];

	      if ((v = obj[p]) !== void 0) {
	        if (v === true || v === false || v === 0 || v === 1) {
	          if (v) {
	            if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
	              this[p] = true;
	            } else {
	              throw Error(cryptoUnavailable);
	            }
	          } else {
	            this[p] = false;
	          }
	        } else {
	          throw Error(invalidArgument + p + ': ' + v);
	        }
	      }

	      return this;
	    }
	    /*
	     * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant
	     * digits using rounding mode `rounding`.
	     *
	     * x {number|string|Decimal} A value in radians.
	     *
	     */


	    function cos(x) {
	      return new this(x).cos();
	    }
	    /*
	     * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision
	     * significant digits using rounding mode `rounding`.
	     *
	     * x {number|string|Decimal} A value in radians.
	     *
	     */


	    function cosh(x) {
	      return new this(x).cosh();
	    }
	    /*
	     * Create and return a Decimal constructor with the same configuration properties as this Decimal
	     * constructor.
	     *
	     */


	    function clone(obj) {
	      var i, p, ps;
	      /*
	       * The Decimal constructor and exported function.
	       * Return a new Decimal instance.
	       *
	       * v {number|string|Decimal} A numeric value.
	       *
	       */

	      function Decimal(v) {
	        var e,
	            i,
	            t,
	            x = this; // Decimal called without new.

	        if (!(x instanceof Decimal)) return new Decimal(v); // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor
	        // which points to Object.

	        x.constructor = Decimal; // Duplicate.

	        if (v instanceof Decimal) {
	          x.s = v.s;

	          if (external) {
	            if (!v.d || v.e > Decimal.maxE) {
	              // Infinity.
	              x.e = NaN;
	              x.d = null;
	            } else if (v.e < Decimal.minE) {
	              // Zero.
	              x.e = 0;
	              x.d = [0];
	            } else {
	              x.e = v.e;
	              x.d = v.d.slice();
	            }
	          } else {
	            x.e = v.e;
	            x.d = v.d ? v.d.slice() : v.d;
	          }

	          return;
	        }

	        t = typeof v;

	        if (t === 'number') {
	          if (v === 0) {
	            x.s = 1 / v < 0 ? -1 : 1;
	            x.e = 0;
	            x.d = [0];
	            return;
	          }

	          if (v < 0) {
	            v = -v;
	            x.s = -1;
	          } else {
	            x.s = 1;
	          } // Fast path for small integers.


	          if (v === ~~v && v < 1e7) {
	            for (e = 0, i = v; i >= 10; i /= 10) e++;

	            if (external) {
	              if (e > Decimal.maxE) {
	                x.e = NaN;
	                x.d = null;
	              } else if (e < Decimal.minE) {
	                x.e = 0;
	                x.d = [0];
	              } else {
	                x.e = e;
	                x.d = [v];
	              }
	            } else {
	              x.e = e;
	              x.d = [v];
	            }

	            return; // Infinity, NaN.
	          } else if (v * 0 !== 0) {
	            if (!v) x.s = NaN;
	            x.e = NaN;
	            x.d = null;
	            return;
	          }

	          return parseDecimal(x, v.toString());
	        } else if (t !== 'string') {
	          throw Error(invalidArgument + v);
	        } // Minus sign?


	        if ((i = v.charCodeAt(0)) === 45) {
	          v = v.slice(1);
	          x.s = -1;
	        } else {
	          // Plus sign?
	          if (i === 43) v = v.slice(1);
	          x.s = 1;
	        }

	        return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
	      }

	      Decimal.prototype = P;
	      Decimal.ROUND_UP = 0;
	      Decimal.ROUND_DOWN = 1;
	      Decimal.ROUND_CEIL = 2;
	      Decimal.ROUND_FLOOR = 3;
	      Decimal.ROUND_HALF_UP = 4;
	      Decimal.ROUND_HALF_DOWN = 5;
	      Decimal.ROUND_HALF_EVEN = 6;
	      Decimal.ROUND_HALF_CEIL = 7;
	      Decimal.ROUND_HALF_FLOOR = 8;
	      Decimal.EUCLID = 9;
	      Decimal.config = Decimal.set = config;
	      Decimal.clone = clone;
	      Decimal.isDecimal = isDecimalInstance;
	      Decimal.abs = abs;
	      Decimal.acos = acos;
	      Decimal.acosh = acosh; // ES6

	      Decimal.add = add;
	      Decimal.asin = asin;
	      Decimal.asinh = asinh; // ES6

	      Decimal.atan = atan;
	      Decimal.atanh = atanh; // ES6

	      Decimal.atan2 = atan2;
	      Decimal.cbrt = cbrt; // ES6

	      Decimal.ceil = ceil;
	      Decimal.cos = cos;
	      Decimal.cosh = cosh; // ES6

	      Decimal.div = div;
	      Decimal.exp = exp;
	      Decimal.floor = floor;
	      Decimal.hypot = hypot; // ES6

	      Decimal.ln = ln;
	      Decimal.log = log;
	      Decimal.log10 = log10; // ES6

	      Decimal.log2 = log2; // ES6

	      Decimal.max = max;
	      Decimal.min = min;
	      Decimal.mod = mod;
	      Decimal.mul = mul;
	      Decimal.pow = pow;
	      Decimal.random = random;
	      Decimal.round = round;
	      Decimal.sign = sign; // ES6

	      Decimal.sin = sin;
	      Decimal.sinh = sinh; // ES6

	      Decimal.sqrt = sqrt;
	      Decimal.sub = sub;
	      Decimal.tan = tan;
	      Decimal.tanh = tanh; // ES6

	      Decimal.trunc = trunc; // ES6

	      if (obj === void 0) obj = {};

	      if (obj) {
	        if (obj.defaults !== true) {
	          ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];

	          for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];
	        }
	      }

	      Decimal.config(obj);
	      return Decimal;
	    }
	    /*
	     * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant
	     * digits using rounding mode `rounding`.
	     *
	     * x {number|string|Decimal}
	     * y {number|string|Decimal}
	     *
	     */


	    function div(x, y) {
	      return new this(x).div(y);
	    }
	    /*
	     * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`
	     * significant digits using rounding mode `rounding`.
	     *
	     * x {number|string|Decimal} The power to which to raise the base of the natural log.
	     *
	     */


	    function exp(x) {
	      return new this(x).exp();
	    }
	    /*
	     * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.
	     *
	     * x {number|string|Decimal}
	     *
	     */


	    function floor(x) {
	      return finalise(x = new this(x), x.e + 1, 3);
	    }
	    /*
	     * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,
	     * rounded to `precision` significant digits using rounding mode `rounding`.
	     *
	     * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)
	     *
	     * arguments {number|string|Decimal}
	     *
	     */


	    function hypot() {
	      var i,
	          n,
	          t = new this(0);
	      external = false;

	      for (i = 0; i < arguments.length;) {
	        n = new this(arguments[i++]);

	        if (!n.d) {
	          if (n.s) {
	            external = true;
	            return new this(1 / 0);
	          }

	          t = n;
	        } else if (t.d) {
	          t = t.plus(n.times(n));
	        }
	      }

	      external = true;
	      return t.sqrt();
	    }
	    /*
	     * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),
	     * otherwise return false.
	     *
	     */


	    function isDecimalInstance(obj) {
	      return obj instanceof Decimal || obj && obj.name === '[object Decimal]' || false;
	    }
	    /*
	     * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`
	     * significant digits using rounding mode `rounding`.
	     *
	     * x {number|string|Decimal}
	     *
	     */


	    function ln(x) {
	      return new this(x).ln();
	    }
	    /*
	     * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base
	     * is specified, rounded to `precision` significant digits using rounding mode `rounding`.
	     *
	     * log[y](x)
	     *
	     * x {number|string|Decimal} The argument of the logarithm.
	     * y {number|string|Decimal} The base of the logarithm.
	     *
	     */


	    function log(x, y) {
	      return new this(x).log(y);
	    }
	    /*
	     * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`
	     * significant digits using rounding mode `rounding`.
	     *
	     * x {number|string|Decimal}
	     *
	     */


	    function log2(x) {
	      return new this(x).log(2);
	    }
	    /*
	     * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`
	     * significant digits using rounding mode `rounding`.
	     *
	     * x {number|string|Decimal}
	     *
	     */


	    function log10(x) {
	      return new this(x).log(10);
	    }
	    /*
	     * Return a new Decimal whose value is the maximum of the arguments.
	     *
	     * arguments {number|string|Decimal}
	     *
	     */


	    function max() {
	      return maxOrMin(this, arguments, 'lt');
	    }
	    /*
	     * Return a new Decimal whose value is the minimum of the arguments.
	     *
	     * arguments {number|string|Decimal}
	     *
	     */


	    function min() {
	      return maxOrMin(this, arguments, 'gt');
	    }
	    /*
	     * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits
	     * using rounding mode `rounding`.
	     *
	     * x {number|string|Decimal}
	     * y {number|string|Decimal}
	     *
	     */


	    function mod(x, y) {
	      return new this(x).mod(y);
	    }
	    /*
	     * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant
	     * digits using rounding mode `rounding`.
	     *
	     * x {number|string|Decimal}
	     * y {number|string|Decimal}
	     *
	     */


	    function mul(x, y) {
	      return new this(x).mul(y);
	    }
	    /*
	     * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision
	     * significant digits using rounding mode `rounding`.
	     *
	     * x {number|string|Decimal} The base.
	     * y {number|string|Decimal} The exponent.
	     *
	     */


	    function pow(x, y) {
	      return new this(x).pow(y);
	    }
	    /*
	     * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with
	     * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros
	     * are produced).
	     *
	     * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.
	     *
	     */


	    function random(sd) {
	      var d,
	          e,
	          k,
	          n,
	          i = 0,
	          r = new this(1),
	          rd = [];
	      if (sd === void 0) sd = this.precision;else checkInt32(sd, 1, MAX_DIGITS);
	      k = Math.ceil(sd / LOG_BASE);

	      if (!this.crypto) {
	        for (; i < k;) rd[i++] = Math.random() * 1e7 | 0; // Browsers supporting crypto.getRandomValues.

	      } else if (crypto.getRandomValues) {
	        d = crypto.getRandomValues(new Uint32Array(k));

	        for (; i < k;) {
	          n = d[i]; // 0 <= n < 4294967296
	          // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).

	          if (n >= 4.29e9) {
	            d[i] = crypto.getRandomValues(new Uint32Array(1))[0];
	          } else {
	            // 0 <= n <= 4289999999
	            // 0 <= (n % 1e7) <= 9999999
	            rd[i++] = n % 1e7;
	          }
	        } // Node.js supporting crypto.randomBytes.

	      } else if (crypto.randomBytes) {
	        // buffer
	        d = crypto.randomBytes(k *= 4);

	        for (; i < k;) {
	          // 0 <= n < 2147483648
	          n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24); // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).

	          if (n >= 2.14e9) {
	            crypto.randomBytes(4).copy(d, i);
	          } else {
	            // 0 <= n <= 2139999999
	            // 0 <= (n % 1e7) <= 9999999
	            rd.push(n % 1e7);
	            i += 4;
	          }
	        }

	        i = k / 4;
	      } else {
	        throw Error(cryptoUnavailable);
	      }

	      k = rd[--i];
	      sd %= LOG_BASE; // Convert trailing digits to zeros according to sd.

	      if (k && sd) {
	        n = mathpow(10, LOG_BASE - sd);
	        rd[i] = (k / n | 0) * n;
	      } // Remove trailing words which are zero.


	      for (; rd[i] === 0; i--) rd.pop(); // Zero?


	      if (i < 0) {
	        e = 0;
	        rd = [0];
	      } else {
	        e = -1; // Remove leading words which are zero and adjust exponent accordingly.

	        for (; rd[0] === 0; e -= LOG_BASE) rd.shift(); // Count the digits of the first word of rd to determine leading zeros.


	        for (k = 1, n = rd[0]; n >= 10; n /= 10) k++; // Adjust the exponent for leading zeros of the first word of rd.


	        if (k < LOG_BASE) e -= LOG_BASE - k;
	      }

	      r.e = e;
	      r.d = rd;
	      return r;
	    }
	    /*
	     * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.
	     *
	     * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).
	     *
	     * x {number|string|Decimal}
	     *
	     */


	    function round(x) {
	      return finalise(x = new this(x), x.e + 1, this.rounding);
	    }
	    /*
	     * Return
	     *   1    if x > 0,
	     *  -1    if x < 0,
	     *   0    if x is 0,
	     *  -0    if x is -0,
	     *   NaN  otherwise
	     *
	     * x {number|string|Decimal}
	     *
	     */


	    function sign(x) {
	      x = new this(x);
	      return x.d ? x.d[0] ? x.s : 0 * x.s : x.s || NaN;
	    }
	    /*
	     * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits
	     * using rounding mode `rounding`.
	     *
	     * x {number|string|Decimal} A value in radians.
	     *
	     */


	    function sin(x) {
	      return new this(x).sin();
	    }
	    /*
	     * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`
	     * significant digits using rounding mode `rounding`.
	     *
	     * x {number|string|Decimal} A value in radians.
	     *
	     */


	    function sinh(x) {
	      return new this(x).sinh();
	    }
	    /*
	     * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant
	     * digits using rounding mode `rounding`.
	     *
	     * x {number|string|Decimal}
	     *
	     */


	    function sqrt(x) {
	      return new this(x).sqrt();
	    }
	    /*
	     * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits
	     * using rounding mode `rounding`.
	     *
	     * x {number|string|Decimal}
	     * y {number|string|Decimal}
	     *
	     */


	    function sub(x, y) {
	      return new this(x).sub(y);
	    }
	    /*
	     * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant
	     * digits using rounding mode `rounding`.
	     *
	     * x {number|string|Decimal} A value in radians.
	     *
	     */


	    function tan(x) {
	      return new this(x).tan();
	    }
	    /*
	     * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`
	     * significant digits using rounding mode `rounding`.
	     *
	     * x {number|string|Decimal} A value in radians.
	     *
	     */


	    function tanh(x) {
	      return new this(x).tanh();
	    }
	    /*
	     * Return a new Decimal whose value is `x` truncated to an integer.
	     *
	     * x {number|string|Decimal}
	     *
	     */


	    function trunc(x) {
	      return finalise(x = new this(x), x.e + 1, 1);
	    } // Create and configure initial Decimal constructor.


	    Decimal = clone(DEFAULTS);
	    Decimal['default'] = Decimal.Decimal = Decimal; // Create the internal constants from their string values.

	    LN10 = new Decimal(LN10);
	    PI = new Decimal(PI); // Export.
	    // AMD.

	    if ( module.exports) {
	      if (typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol') {
	        P[Symbol.for('nodejs.util.inspect.custom')] = P.toString;
	        P[Symbol.toStringTag] = 'Decimal';
	      }

	      module.exports = Decimal; // Browser.
	    } else {
	      if (!globalScope) {
	        globalScope = typeof self != 'undefined' && self && self.self == self ? self : window;
	      }

	      noConflict = globalScope.Decimal;

	      Decimal.noConflict = function () {
	        globalScope.Decimal = noConflict;
	        return Decimal;
	      };

	      globalScope.Decimal = Decimal;
	    }
	  })(commonjsGlobal);
	});

	var name = 'BigNumber';
	var dependencies$1 = ['?on', 'config'];
	var createBigNumberClass = /* #__PURE__ */factory(name, dependencies$1, function (_ref) {
	  var on = _ref.on,
	      config = _ref.config;
	  var BigNumber = decimal.clone({
	    precision: config.precision
	  });
	  /**
	   * Attach type information
	   */

	  BigNumber.prototype.type = 'BigNumber';
	  BigNumber.prototype.isBigNumber = true;
	  /**
	   * Get a JSON representation of a BigNumber containing
	   * type information
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "BigNumber", "value": "0.2"}`
	   */

	  BigNumber.prototype.toJSON = function () {
	    return {
	      mathjs: 'BigNumber',
	      value: this.toString()
	    };
	  };
	  /**
	   * Instantiate a BigNumber from a JSON object
	   * @param {Object} json  a JSON object structured as:
	   *                       `{"mathjs": "BigNumber", "value": "0.2"}`
	   * @return {BigNumber}
	   */


	  BigNumber.fromJSON = function (json) {
	    return new BigNumber(json.value);
	  };

	  if (on) {
	    // listen for changed in the configuration, automatically apply changed precision
	    on('config', function (curr, prev) {
	      if (curr.precision !== prev.precision) {
	        BigNumber.config({
	          precision: curr.precision
	        });
	      }
	    });
	  }

	  return BigNumber;
	}, {
	  isClass: true
	});

	var complex = createCommonjsModule(function (module, exports) {
	  /**
	   * @license Complex.js v2.0.11 11/02/2016
	   *
	   * Copyright (c) 2016, Robert Eisele (robert@xarg.org)
	   * Dual licensed under the MIT or GPL Version 2 licenses.
	   **/

	  /**
	   *
	   * This class allows the manipulation of complex numbers.
	   * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.
	   *
	   * Object form
	   * { re: <real>, im: <imaginary> }
	   * { arg: <angle>, abs: <radius> }
	   * { phi: <angle>, r: <radius> }
	   *
	   * Array / Vector form
	   * [ real, imaginary ]
	   *
	   * Double form
	   * 99.3 - Single double value
	   *
	   * String form
	   * '23.1337' - Simple real number
	   * '15+3i' - a simple complex number
	   * '3-i' - a simple complex number
	   *
	   * Example:
	   *
	   * var c = new Complex('99.3+8i');
	   * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);
	   *
	   */
	  (function (root) {

	    var cosh = function (x) {
	      return (Math.exp(x) + Math.exp(-x)) * 0.5;
	    };

	    var sinh = function (x) {
	      return (Math.exp(x) - Math.exp(-x)) * 0.5;
	    };
	    /**
	     * Calculates cos(x) - 1 using Taylor series if x is small.
	     *
	     * @param {number} x
	     * @returns {number} cos(x) - 1
	     */


	    var cosm1 = function (x) {
	      var limit = Math.PI / 4;

	      if (x < -limit || x > limit) {
	        return Math.cos(x) - 1.0;
	      }

	      var xx = x * x;
	      return xx * (-0.5 + xx * (1 / 24 + xx * (-1 / 720 + xx * (1 / 40320 + xx * (-1 / 3628800 + xx * (1 / 4790014600 + xx * (-1 / 87178291200 + xx * (1 / 20922789888000))))))));
	    };

	    var hypot = function (x, y) {
	      var a = Math.abs(x);
	      var b = Math.abs(y);

	      if (a < 3000 && b < 3000) {
	        return Math.sqrt(a * a + b * b);
	      }

	      if (a < b) {
	        a = b;
	        b = x / y;
	      } else {
	        b = y / x;
	      }

	      return a * Math.sqrt(1 + b * b);
	    };

	    var parser_exit = function () {
	      throw SyntaxError('Invalid Param');
	    };
	    /**
	     * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows
	     *
	     * @param {number} a
	     * @param {number} b
	     * @returns {number}
	     */


	    function logHypot(a, b) {
	      var _a = Math.abs(a);

	      var _b = Math.abs(b);

	      if (a === 0) {
	        return Math.log(_b);
	      }

	      if (b === 0) {
	        return Math.log(_a);
	      }

	      if (_a < 3000 && _b < 3000) {
	        return Math.log(a * a + b * b) * 0.5;
	      }
	      /* I got 4 ideas to compute this property without overflow:
	       *
	       * Testing 1000000 times with random samples for a,b â [1, 1000000000] against a big decimal library to get an error estimate
	       *
	       * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)
	        Math.log(a * a + b * b) / 2
	        *
	       *
	       * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)
	        var fn = function(a, b) {
	       a = Math.abs(a);
	       b = Math.abs(b);
	       var t = Math.min(a, b);
	       a = Math.max(a, b);
	       t = t / a;
	        return Math.log(a) + Math.log(1 + t * t) / 2;
	       };
	        * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)
	        Math.log(a / Math.cos(Math.atan2(b, a)))
	        * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)
	        Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))
	        */


	      return Math.log(a / Math.cos(Math.atan2(b, a)));
	    }

	    var parse = function (a, b) {
	      var z = {
	        're': 0,
	        'im': 0
	      };

	      if (a === undefined || a === null) {
	        z['re'] = z['im'] = 0;
	      } else if (b !== undefined) {
	        z['re'] = a;
	        z['im'] = b;
	      } else switch (typeof a) {
	        case 'object':
	          if ('im' in a && 're' in a) {
	            z['re'] = a['re'];
	            z['im'] = a['im'];
	          } else if ('abs' in a && 'arg' in a) {
	            if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) {
	              return Complex['INFINITY'];
	            }

	            z['re'] = a['abs'] * Math.cos(a['arg']);
	            z['im'] = a['abs'] * Math.sin(a['arg']);
	          } else if ('r' in a && 'phi' in a) {
	            if (!Number.isFinite(a['r']) && Number.isFinite(a['phi'])) {
	              return Complex['INFINITY'];
	            }

	            z['re'] = a['r'] * Math.cos(a['phi']);
	            z['im'] = a['r'] * Math.sin(a['phi']);
	          } else if (a.length === 2) {
	            // Quick array check
	            z['re'] = a[0];
	            z['im'] = a[1];
	          } else {
	            parser_exit();
	          }

	          break;

	        case 'string':
	          z['im'] =
	          /* void */
	          z['re'] = 0;
	          var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
	          var plus = 1;
	          var minus = 0;

	          if (tokens === null) {
	            parser_exit();
	          }

	          for (var i = 0; i < tokens.length; i++) {
	            var c = tokens[i];

	            if (c === ' ' || c === '\t' || c === '\n') ; else if (c === '+') {
	              plus++;
	            } else if (c === '-') {
	              minus++;
	            } else if (c === 'i' || c === 'I') {
	              if (plus + minus === 0) {
	                parser_exit();
	              }

	              if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
	                z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
	                i++;
	              } else {
	                z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
	              }

	              plus = minus = 0;
	            } else {
	              if (plus + minus === 0 || isNaN(c)) {
	                parser_exit();
	              }

	              if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
	                z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
	                i++;
	              } else {
	                z['re'] += parseFloat((minus % 2 ? '-' : '') + c);
	              }

	              plus = minus = 0;
	            }
	          } // Still something on the stack


	          if (plus + minus > 0) {
	            parser_exit();
	          }

	          break;

	        case 'number':
	          z['im'] = 0;
	          z['re'] = a;
	          break;

	        default:
	          parser_exit();
	      }

	      return z;
	    };
	    /**
	     * @constructor
	     * @returns {Complex}
	     */


	    function Complex(a, b) {
	      if (!(this instanceof Complex)) {
	        return new Complex(a, b);
	      }

	      var z = parse(a, b);
	      this['re'] = z['re'];
	      this['im'] = z['im'];
	    }

	    Complex.prototype = {
	      're': 0,
	      'im': 0,

	      /**
	       * Calculates the sign of a complex number, which is a normalized complex
	       *
	       * @returns {Complex}
	       */
	      'sign': function () {
	        var abs = this['abs']();
	        return new Complex(this['re'] / abs, this['im'] / abs);
	      },

	      /**
	       * Adds two complex numbers
	       *
	       * @returns {Complex}
	       */
	      'add': function (a, b) {
	        var z = new Complex(a, b); // Infinity + Infinity = NaN

	        if (this['isInfinite']() && z['isInfinite']()) {
	          return Complex['NAN'];
	        } // Infinity + z = Infinity { where z != Infinity }


	        if (this['isInfinite']() || z['isInfinite']()) {
	          return Complex['INFINITY'];
	        }

	        return new Complex(this['re'] + z['re'], this['im'] + z['im']);
	      },

	      /**
	       * Subtracts two complex numbers
	       *
	       * @returns {Complex}
	       */
	      'sub': function (a, b) {
	        var z = new Complex(a, b); // Infinity - Infinity = NaN

	        if (this['isInfinite']() && z['isInfinite']()) {
	          return Complex['NAN'];
	        } // Infinity - z = Infinity { where z != Infinity }


	        if (this['isInfinite']() || z['isInfinite']()) {
	          return Complex['INFINITY'];
	        }

	        return new Complex(this['re'] - z['re'], this['im'] - z['im']);
	      },

	      /**
	       * Multiplies two complex numbers
	       *
	       * @returns {Complex}
	       */
	      'mul': function (a, b) {
	        var z = new Complex(a, b); // Infinity * 0 = NaN

	        if (this['isInfinite']() && z['isZero']() || this['isZero']() && z['isInfinite']()) {
	          return Complex['NAN'];
	        } // Infinity * z = Infinity { where z != 0 }


	        if (this['isInfinite']() || z['isInfinite']()) {
	          return Complex['INFINITY'];
	        } // Short circuit for real values


	        if (z['im'] === 0 && this['im'] === 0) {
	          return new Complex(this['re'] * z['re'], 0);
	        }

	        return new Complex(this['re'] * z['re'] - this['im'] * z['im'], this['re'] * z['im'] + this['im'] * z['re']);
	      },

	      /**
	       * Divides two complex numbers
	       *
	       * @returns {Complex}
	       */
	      'div': function (a, b) {
	        var z = new Complex(a, b); // 0 / 0 = NaN and Infinity / Infinity = NaN

	        if (this['isZero']() && z['isZero']() || this['isInfinite']() && z['isInfinite']()) {
	          return Complex['NAN'];
	        } // Infinity / 0 = Infinity


	        if (this['isInfinite']() || z['isZero']()) {
	          return Complex['INFINITY'];
	        } // 0 / Infinity = 0


	        if (this['isZero']() || z['isInfinite']()) {
	          return Complex['ZERO'];
	        }

	        a = this['re'];
	        b = this['im'];
	        var c = z['re'];
	        var d = z['im'];
	        var t, x;

	        if (0 === d) {
	          // Divisor is real
	          return new Complex(a / c, b / c);
	        }

	        if (Math.abs(c) < Math.abs(d)) {
	          x = c / d;
	          t = c * x + d;
	          return new Complex((a * x + b) / t, (b * x - a) / t);
	        } else {
	          x = d / c;
	          t = d * x + c;
	          return new Complex((a + b * x) / t, (b - a * x) / t);
	        }
	      },

	      /**
	       * Calculate the power of two complex numbers
	       *
	       * @returns {Complex}
	       */
	      'pow': function (a, b) {
	        var z = new Complex(a, b);
	        a = this['re'];
	        b = this['im'];

	        if (z['isZero']()) {
	          return Complex['ONE'];
	        } // If the exponent is real


	        if (z['im'] === 0) {
	          if (b === 0 && a >= 0) {
	            return new Complex(Math.pow(a, z['re']), 0);
	          } else if (a === 0) {
	            // If base is fully imaginary
	            switch ((z['re'] % 4 + 4) % 4) {
	              case 0:
	                return new Complex(Math.pow(b, z['re']), 0);

	              case 1:
	                return new Complex(0, Math.pow(b, z['re']));

	              case 2:
	                return new Complex(-Math.pow(b, z['re']), 0);

	              case 3:
	                return new Complex(0, -Math.pow(b, z['re']));
	            }
	          }
	        }
	        /* I couldn't find a good formula, so here is a derivation and optimization
	         *
	         * z_1^z_2 = (a + bi)^(c + di)
	         *         = exp((c + di) * log(a + bi)
	         *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))
	         * =>...
	         * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
	         * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
	         *
	         * =>...
	         * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
	         * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
	         *
	         * =>
	         * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))
	         * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))
	         *
	         */


	        if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {
	          return Complex['ZERO'];
	        }

	        var arg = Math.atan2(b, a);
	        var loh = logHypot(a, b);
	        a = Math.exp(z['re'] * loh - z['im'] * arg);
	        b = z['im'] * loh + z['re'] * arg;
	        return new Complex(a * Math.cos(b), a * Math.sin(b));
	      },

	      /**
	       * Calculate the complex square root
	       *
	       * @returns {Complex}
	       */
	      'sqrt': function () {
	        var a = this['re'];
	        var b = this['im'];
	        var r = this['abs']();
	        var re, im;

	        if (a >= 0) {
	          if (b === 0) {
	            return new Complex(Math.sqrt(a), 0);
	          }

	          re = 0.5 * Math.sqrt(2.0 * (r + a));
	        } else {
	          re = Math.abs(b) / Math.sqrt(2 * (r - a));
	        }

	        if (a <= 0) {
	          im = 0.5 * Math.sqrt(2.0 * (r - a));
	        } else {
	          im = Math.abs(b) / Math.sqrt(2 * (r + a));
	        }

	        return new Complex(re, b < 0 ? -im : im);
	      },

	      /**
	       * Calculate the complex exponent
	       *
	       * @returns {Complex}
	       */
	      'exp': function () {
	        var tmp = Math.exp(this['re']);

	        if (this['im'] === 0) ;

	        return new Complex(tmp * Math.cos(this['im']), tmp * Math.sin(this['im']));
	      },

	      /**
	       * Calculate the complex exponent and subtracts one.
	       *
	       * This may be more accurate than `Complex(x).exp().sub(1)` if
	       * `x` is small.
	       *
	       * @returns {Complex}
	       */
	      'expm1': function () {
	        /**
	         * exp(a + i*b) - 1
	         = exp(a) * (cos(b) + j*sin(b)) - 1
	         = expm1(a)*cos(b) + cosm1(b) + j*exp(a)*sin(b)
	         */
	        var a = this['re'];
	        var b = this['im'];
	        return new Complex(Math.expm1(a) * Math.cos(b) + cosm1(b), Math.exp(a) * Math.sin(b));
	      },

	      /**
	       * Calculate the natural log
	       *
	       * @returns {Complex}
	       */
	      'log': function () {
	        var a = this['re'];
	        var b = this['im'];

	        return new Complex(logHypot(a, b), Math.atan2(b, a));
	      },

	      /**
	       * Calculate the magnitude of the complex number
	       *
	       * @returns {number}
	       */
	      'abs': function () {
	        return hypot(this['re'], this['im']);
	      },

	      /**
	       * Calculate the angle of the complex number
	       *
	       * @returns {number}
	       */
	      'arg': function () {
	        return Math.atan2(this['im'], this['re']);
	      },

	      /**
	       * Calculate the sine of the complex number
	       *
	       * @returns {Complex}
	       */
	      'sin': function () {
	        // sin(c) = (e^b - e^(-b)) / (2i)
	        var a = this['re'];
	        var b = this['im'];
	        return new Complex(Math.sin(a) * cosh(b), Math.cos(a) * sinh(b));
	      },

	      /**
	       * Calculate the cosine
	       *
	       * @returns {Complex}
	       */
	      'cos': function () {
	        // cos(z) = (e^b + e^(-b)) / 2
	        var a = this['re'];
	        var b = this['im'];
	        return new Complex(Math.cos(a) * cosh(b), -Math.sin(a) * sinh(b));
	      },

	      /**
	       * Calculate the tangent
	       *
	       * @returns {Complex}
	       */
	      'tan': function () {
	        // tan(c) = (e^(ci) - e^(-ci)) / (i(e^(ci) + e^(-ci)))
	        var a = 2 * this['re'];
	        var b = 2 * this['im'];
	        var d = Math.cos(a) + cosh(b);
	        return new Complex(Math.sin(a) / d, sinh(b) / d);
	      },

	      /**
	       * Calculate the cotangent
	       *
	       * @returns {Complex}
	       */
	      'cot': function () {
	        // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))
	        var a = 2 * this['re'];
	        var b = 2 * this['im'];
	        var d = Math.cos(a) - cosh(b);
	        return new Complex(-Math.sin(a) / d, sinh(b) / d);
	      },

	      /**
	       * Calculate the secant
	       *
	       * @returns {Complex}
	       */
	      'sec': function () {
	        // sec(c) = 2 / (e^(ci) + e^(-ci))
	        var a = this['re'];
	        var b = this['im'];
	        var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
	        return new Complex(Math.cos(a) * cosh(b) / d, Math.sin(a) * sinh(b) / d);
	      },

	      /**
	       * Calculate the cosecans
	       *
	       * @returns {Complex}
	       */
	      'csc': function () {
	        // csc(c) = 2i / (e^(ci) - e^(-ci))
	        var a = this['re'];
	        var b = this['im'];
	        var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
	        return new Complex(Math.sin(a) * cosh(b) / d, -Math.cos(a) * sinh(b) / d);
	      },

	      /**
	       * Calculate the complex arcus sinus
	       *
	       * @returns {Complex}
	       */
	      'asin': function () {
	        // asin(c) = -i * log(ci + sqrt(1 - c^2))
	        var a = this['re'];
	        var b = this['im'];
	        var t1 = new Complex(b * b - a * a + 1, -2 * a * b)['sqrt']();
	        var t2 = new Complex(t1['re'] - b, t1['im'] + a)['log']();
	        return new Complex(t2['im'], -t2['re']);
	      },

	      /**
	       * Calculate the complex arcus cosinus
	       *
	       * @returns {Complex}
	       */
	      'acos': function () {
	        // acos(c) = i * log(c - i * sqrt(1 - c^2))
	        var a = this['re'];
	        var b = this['im'];
	        var t1 = new Complex(b * b - a * a + 1, -2 * a * b)['sqrt']();
	        var t2 = new Complex(t1['re'] - b, t1['im'] + a)['log']();
	        return new Complex(Math.PI / 2 - t2['im'], t2['re']);
	      },

	      /**
	       * Calculate the complex arcus tangent
	       *
	       * @returns {Complex}
	       */
	      'atan': function () {
	        // atan(c) = i / 2 log((i + x) / (i - x))
	        var a = this['re'];
	        var b = this['im'];

	        if (a === 0) {
	          if (b === 1) {
	            return new Complex(0, Infinity);
	          }

	          if (b === -1) {
	            return new Complex(0, -Infinity);
	          }
	        }

	        var d = a * a + (1.0 - b) * (1.0 - b);
	        var t1 = new Complex((1 - b * b - a * a) / d, -2 * a / d).log();
	        return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);
	      },

	      /**
	       * Calculate the complex arcus cotangent
	       *
	       * @returns {Complex}
	       */
	      'acot': function () {
	        // acot(c) = i / 2 log((c - i) / (c + i))
	        var a = this['re'];
	        var b = this['im'];

	        if (b === 0) {
	          return new Complex(Math.atan2(1, a), 0);
	        }

	        var d = a * a + b * b;
	        return d !== 0 ? new Complex(a / d, -b / d).atan() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).atan();
	      },

	      /**
	       * Calculate the complex arcus secant
	       *
	       * @returns {Complex}
	       */
	      'asec': function () {
	        // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))
	        var a = this['re'];
	        var b = this['im'];

	        if (a === 0 && b === 0) {
	          return new Complex(0, Infinity);
	        }

	        var d = a * a + b * b;
	        return d !== 0 ? new Complex(a / d, -b / d).acos() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).acos();
	      },

	      /**
	       * Calculate the complex arcus cosecans
	       *
	       * @returns {Complex}
	       */
	      'acsc': function () {
	        // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))
	        var a = this['re'];
	        var b = this['im'];

	        if (a === 0 && b === 0) {
	          return new Complex(Math.PI / 2, Infinity);
	        }

	        var d = a * a + b * b;
	        return d !== 0 ? new Complex(a / d, -b / d).asin() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).asin();
	      },

	      /**
	       * Calculate the complex sinh
	       *
	       * @returns {Complex}
	       */
	      'sinh': function () {
	        // sinh(c) = (e^c - e^-c) / 2
	        var a = this['re'];
	        var b = this['im'];
	        return new Complex(sinh(a) * Math.cos(b), cosh(a) * Math.sin(b));
	      },

	      /**
	       * Calculate the complex cosh
	       *
	       * @returns {Complex}
	       */
	      'cosh': function () {
	        // cosh(c) = (e^c + e^-c) / 2
	        var a = this['re'];
	        var b = this['im'];
	        return new Complex(cosh(a) * Math.cos(b), sinh(a) * Math.sin(b));
	      },

	      /**
	       * Calculate the complex tanh
	       *
	       * @returns {Complex}
	       */
	      'tanh': function () {
	        // tanh(c) = (e^c - e^-c) / (e^c + e^-c)
	        var a = 2 * this['re'];
	        var b = 2 * this['im'];
	        var d = cosh(a) + Math.cos(b);
	        return new Complex(sinh(a) / d, Math.sin(b) / d);
	      },

	      /**
	       * Calculate the complex coth
	       *
	       * @returns {Complex}
	       */
	      'coth': function () {
	        // coth(c) = (e^c + e^-c) / (e^c - e^-c)
	        var a = 2 * this['re'];
	        var b = 2 * this['im'];
	        var d = cosh(a) - Math.cos(b);
	        return new Complex(sinh(a) / d, -Math.sin(b) / d);
	      },

	      /**
	       * Calculate the complex coth
	       *
	       * @returns {Complex}
	       */
	      'csch': function () {
	        // csch(c) = 2 / (e^c - e^-c)
	        var a = this['re'];
	        var b = this['im'];
	        var d = Math.cos(2 * b) - cosh(2 * a);
	        return new Complex(-2 * sinh(a) * Math.cos(b) / d, 2 * cosh(a) * Math.sin(b) / d);
	      },

	      /**
	       * Calculate the complex sech
	       *
	       * @returns {Complex}
	       */
	      'sech': function () {
	        // sech(c) = 2 / (e^c + e^-c)
	        var a = this['re'];
	        var b = this['im'];
	        var d = Math.cos(2 * b) + cosh(2 * a);
	        return new Complex(2 * cosh(a) * Math.cos(b) / d, -2 * sinh(a) * Math.sin(b) / d);
	      },

	      /**
	       * Calculate the complex asinh
	       *
	       * @returns {Complex}
	       */
	      'asinh': function () {
	        // asinh(c) = log(c + sqrt(c^2 + 1))
	        var tmp = this['im'];
	        this['im'] = -this['re'];
	        this['re'] = tmp;
	        var res = this['asin']();
	        this['re'] = -this['im'];
	        this['im'] = tmp;
	        tmp = res['re'];
	        res['re'] = -res['im'];
	        res['im'] = tmp;
	        return res;
	      },

	      /**
	       * Calculate the complex asinh
	       *
	       * @returns {Complex}
	       */
	      'acosh': function () {
	        // acosh(c) = log(c + sqrt(c^2 - 1))
	        var res = this['acos']();

	        if (res['im'] <= 0) {
	          var tmp = res['re'];
	          res['re'] = -res['im'];
	          res['im'] = tmp;
	        } else {
	          var tmp = res['im'];
	          res['im'] = -res['re'];
	          res['re'] = tmp;
	        }

	        return res;
	      },

	      /**
	       * Calculate the complex atanh
	       *
	       * @returns {Complex}
	       */
	      'atanh': function () {
	        // atanh(c) = log((1+c) / (1-c)) / 2
	        var a = this['re'];
	        var b = this['im'];
	        var noIM = a > 1 && b === 0;
	        var oneMinus = 1 - a;
	        var onePlus = 1 + a;
	        var d = oneMinus * oneMinus + b * b;
	        var x = d !== 0 ? new Complex((onePlus * oneMinus - b * b) / d, (b * oneMinus + onePlus * b) / d) : new Complex(a !== -1 ? a / 0 : 0, b !== 0 ? b / 0 : 0);
	        var temp = x['re'];
	        x['re'] = logHypot(x['re'], x['im']) / 2;
	        x['im'] = Math.atan2(x['im'], temp) / 2;

	        if (noIM) {
	          x['im'] = -x['im'];
	        }

	        return x;
	      },

	      /**
	       * Calculate the complex acoth
	       *
	       * @returns {Complex}
	       */
	      'acoth': function () {
	        // acoth(c) = log((c+1) / (c-1)) / 2
	        var a = this['re'];
	        var b = this['im'];

	        if (a === 0 && b === 0) {
	          return new Complex(0, Math.PI / 2);
	        }

	        var d = a * a + b * b;
	        return d !== 0 ? new Complex(a / d, -b / d).atanh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).atanh();
	      },

	      /**
	       * Calculate the complex acsch
	       *
	       * @returns {Complex}
	       */
	      'acsch': function () {
	        // acsch(c) = log((1+sqrt(1+c^2))/c)
	        var a = this['re'];
	        var b = this['im'];

	        if (b === 0) {
	          return new Complex(a !== 0 ? Math.log(a + Math.sqrt(a * a + 1)) : Infinity, 0);
	        }

	        var d = a * a + b * b;
	        return d !== 0 ? new Complex(a / d, -b / d).asinh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).asinh();
	      },

	      /**
	       * Calculate the complex asech
	       *
	       * @returns {Complex}
	       */
	      'asech': function () {
	        // asech(c) = log((1+sqrt(1-c^2))/c)
	        var a = this['re'];
	        var b = this['im'];

	        if (this['isZero']()) {
	          return Complex['INFINITY'];
	        }

	        var d = a * a + b * b;
	        return d !== 0 ? new Complex(a / d, -b / d).acosh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).acosh();
	      },

	      /**
	       * Calculate the complex inverse 1/z
	       *
	       * @returns {Complex}
	       */
	      'inverse': function () {
	        // 1 / 0 = Infinity and 1 / Infinity = 0
	        if (this['isZero']()) {
	          return Complex['INFINITY'];
	        }

	        if (this['isInfinite']()) {
	          return Complex['ZERO'];
	        }

	        var a = this['re'];
	        var b = this['im'];
	        var d = a * a + b * b;
	        return new Complex(a / d, -b / d);
	      },

	      /**
	       * Returns the complex conjugate
	       *
	       * @returns {Complex}
	       */
	      'conjugate': function () {
	        return new Complex(this['re'], -this['im']);
	      },

	      /**
	       * Gets the negated complex number
	       *
	       * @returns {Complex}
	       */
	      'neg': function () {
	        return new Complex(-this['re'], -this['im']);
	      },

	      /**
	       * Ceils the actual complex number
	       *
	       * @returns {Complex}
	       */
	      'ceil': function (places) {
	        places = Math.pow(10, places || 0);
	        return new Complex(Math.ceil(this['re'] * places) / places, Math.ceil(this['im'] * places) / places);
	      },

	      /**
	       * Floors the actual complex number
	       *
	       * @returns {Complex}
	       */
	      'floor': function (places) {
	        places = Math.pow(10, places || 0);
	        return new Complex(Math.floor(this['re'] * places) / places, Math.floor(this['im'] * places) / places);
	      },

	      /**
	       * Ceils the actual complex number
	       *
	       * @returns {Complex}
	       */
	      'round': function (places) {
	        places = Math.pow(10, places || 0);
	        return new Complex(Math.round(this['re'] * places) / places, Math.round(this['im'] * places) / places);
	      },

	      /**
	       * Compares two complex numbers
	       *
	       * **Note:** new Complex(Infinity).equals(Infinity) === false
	       *
	       * @returns {boolean}
	       */
	      'equals': function (a, b) {
	        var z = new Complex(a, b);
	        return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] && Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];
	      },

	      /**
	       * Clones the actual object
	       *
	       * @returns {Complex}
	       */
	      'clone': function () {
	        return new Complex(this['re'], this['im']);
	      },

	      /**
	       * Gets a string of the actual complex number
	       *
	       * @returns {string}
	       */
	      'toString': function () {
	        var a = this['re'];
	        var b = this['im'];
	        var ret = '';

	        if (this['isNaN']()) {
	          return 'NaN';
	        }

	        if (this['isZero']()) {
	          return '0';
	        }

	        if (this['isInfinite']()) {
	          return 'Infinity';
	        }

	        if (a !== 0) {
	          ret += a;
	        }

	        if (b !== 0) {
	          if (a !== 0) {
	            ret += b < 0 ? ' - ' : ' + ';
	          } else if (b < 0) {
	            ret += '-';
	          }

	          b = Math.abs(b);

	          if (1 !== b) {
	            ret += b;
	          }

	          ret += 'i';
	        }

	        if (!ret) return '0';
	        return ret;
	      },

	      /**
	       * Returns the actual number as a vector
	       *
	       * @returns {Array}
	       */
	      'toVector': function () {
	        return [this['re'], this['im']];
	      },

	      /**
	       * Returns the actual real value of the current object
	       *
	       * @returns {number|null}
	       */
	      'valueOf': function () {
	        if (this['im'] === 0) {
	          return this['re'];
	        }

	        return null;
	      },

	      /**
	       * Determines whether a complex number is not on the Riemann sphere.
	       *
	       * @returns {boolean}
	       */
	      'isNaN': function () {
	        return isNaN(this['re']) || isNaN(this['im']);
	      },

	      /**
	       * Determines whether or not a complex number is at the zero pole of the
	       * Riemann sphere.
	       *
	       * @returns {boolean}
	       */
	      'isZero': function () {
	        return (this['re'] === 0 || this['re'] === -0) && (this['im'] === 0 || this['im'] === -0);
	      },

	      /**
	       * Determines whether a complex number is not at the infinity pole of the
	       * Riemann sphere.
	       *
	       * @returns {boolean}
	       */
	      'isFinite': function () {
	        return isFinite(this['re']) && isFinite(this['im']);
	      },

	      /**
	       * Determines whether or not a complex number is at the infinity pole of the
	       * Riemann sphere.
	       *
	       * @returns {boolean}
	       */
	      'isInfinite': function () {
	        return !(this['isNaN']() || this['isFinite']());
	      }
	    };
	    Complex['ZERO'] = new Complex(0, 0);
	    Complex['ONE'] = new Complex(1, 0);
	    Complex['I'] = new Complex(0, 1);
	    Complex['PI'] = new Complex(Math.PI, 0);
	    Complex['E'] = new Complex(Math.E, 0);
	    Complex['INFINITY'] = new Complex(Infinity, Infinity);
	    Complex['NAN'] = new Complex(NaN, NaN);
	    Complex['EPSILON'] = 1e-16;

	    {
	      Object.defineProperty(exports, "__esModule", {
	        'value': true
	      });
	      Complex['default'] = Complex;
	      Complex['Complex'] = Complex;
	      module['exports'] = Complex;
	    }
	  })();
	});
	var Complex = /*@__PURE__*/getDefaultExportFromCjs(complex);

	function _typeof$3(obj) {
	  "@babel/helpers - typeof";

	  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
	    _typeof$3 = function _typeof(obj) {
	      return typeof obj;
	    };
	  } else {
	    _typeof$3 = function _typeof(obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	    };
	  }

	  return _typeof$3(obj);
	}
	var name$1 = 'Complex';
	var dependencies$2 = [];
	var createComplexClass = /* #__PURE__ */factory(name$1, dependencies$2, function () {
	  /**
	   * Attach type information
	   */
	  Complex.prototype.type = 'Complex';
	  Complex.prototype.isComplex = true;
	  /**
	   * Get a JSON representation of the complex number
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "Complex", "re": 2, "im": 3}`
	   */

	  Complex.prototype.toJSON = function () {
	    return {
	      mathjs: 'Complex',
	      re: this.re,
	      im: this.im
	    };
	  };
	  /*
	   * Return the value of the complex number in polar notation
	   * The angle phi will be set in the interval of [-pi, pi].
	   * @return {{r: number, phi: number}} Returns and object with properties r and phi.
	   */


	  Complex.prototype.toPolar = function () {
	    return {
	      r: this.abs(),
	      phi: this.arg()
	    };
	  };
	  /**
	   * Get a string representation of the complex number,
	   * with optional formatting options.
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @return {string} str
	   */


	  Complex.prototype.format = function (options) {
	    var str = '';
	    var im = this.im;
	    var re = this.re;
	    var strRe = format(this.re, options);
	    var strIm = format(this.im, options); // round either re or im when smaller than the configured precision

	    var precision = isNumber(options) ? options : options ? options.precision : null;

	    if (precision !== null) {
	      var epsilon = Math.pow(10, -precision);

	      if (Math.abs(re / im) < epsilon) {
	        re = 0;
	      }

	      if (Math.abs(im / re) < epsilon) {
	        im = 0;
	      }
	    }

	    if (im === 0) {
	      // real value
	      str = strRe;
	    } else if (re === 0) {
	      // purely complex value
	      if (im === 1) {
	        str = 'i';
	      } else if (im === -1) {
	        str = '-i';
	      } else {
	        str = strIm + 'i';
	      }
	    } else {
	      // complex value
	      if (im < 0) {
	        if (im === -1) {
	          str = strRe + ' - i';
	        } else {
	          str = strRe + ' - ' + strIm.substring(1) + 'i';
	        }
	      } else {
	        if (im === 1) {
	          str = strRe + ' + i';
	        } else {
	          str = strRe + ' + ' + strIm + 'i';
	        }
	      }
	    }

	    return str;
	  };
	  /**
	   * Create a complex number from polar coordinates
	   *
	   * Usage:
	   *
	   *     Complex.fromPolar(r: number, phi: number) : Complex
	   *     Complex.fromPolar({r: number, phi: number}) : Complex
	   *
	   * @param {*} args...
	   * @return {Complex}
	   */


	  Complex.fromPolar = function (args) {
	    switch (arguments.length) {
	      case 1:
	        {
	          var arg = arguments[0];

	          if (_typeof$3(arg) === 'object') {
	            return Complex(arg);
	          } else {
	            throw new TypeError('Input has to be an object with r and phi keys.');
	          }
	        }

	      case 2:
	        {
	          var r = arguments[0];
	          var phi = arguments[1];

	          if (isNumber(r)) {
	            if (isUnit(phi) && phi.hasBase('ANGLE')) {
	              // convert unit to a number in radians
	              phi = phi.toNumber('rad');
	            }

	            if (isNumber(phi)) {
	              return new Complex({
	                r: r,
	                phi: phi
	              });
	            }

	            throw new TypeError('Phi is not a number nor an angle unit.');
	          } else {
	            throw new TypeError('Radius r is not a number.');
	          }
	        }

	      default:
	        throw new SyntaxError('Wrong number of arguments in function fromPolar');
	    }
	  };

	  Complex.prototype.valueOf = Complex.prototype.toString;
	  /**
	   * Create a Complex number from a JSON object
	   * @param {Object} json  A JSON Object structured as
	   *                       {"mathjs": "Complex", "re": 2, "im": 3}
	   *                       All properties are optional, default values
	   *                       for `re` and `im` are 0.
	   * @return {Complex} Returns a new Complex number
	   */

	  Complex.fromJSON = function (json) {
	    return new Complex(json);
	  };
	  /**
	   * Compare two complex numbers, `a` and `b`:
	   *
	   * - Returns 1 when the real part of `a` is larger than the real part of `b`
	   * - Returns -1 when the real part of `a` is smaller than the real part of `b`
	   * - Returns 1 when the real parts are equal
	   *   and the imaginary part of `a` is larger than the imaginary part of `b`
	   * - Returns -1 when the real parts are equal
	   *   and the imaginary part of `a` is smaller than the imaginary part of `b`
	   * - Returns 0 when both real and imaginary parts are equal.
	   *
	   * @params {Complex} a
	   * @params {Complex} b
	   * @returns {number} Returns the comparison result: -1, 0, or 1
	   */


	  Complex.compare = function (a, b) {
	    if (a.re > b.re) {
	      return 1;
	    }

	    if (a.re < b.re) {
	      return -1;
	    }

	    if (a.im > b.im) {
	      return 1;
	    }

	    if (a.im < b.im) {
	      return -1;
	    }

	    return 0;
	  };

	  return Complex;
	}, {
	  isClass: true
	});

	var fraction = createCommonjsModule(function (module, exports) {
	  /**
	   * @license Fraction.js v4.0.12 09/09/2015
	   * http://www.xarg.org/2014/03/rational-numbers-in-javascript/
	   *
	   * Copyright (c) 2015, Robert Eisele (robert@xarg.org)
	   * Dual licensed under the MIT or GPL Version 2 licenses.
	   **/

	  /**
	   *
	   * This class offers the possibility to calculate fractions.
	   * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.
	   *
	   * Array/Object form
	   * [ 0 => <nominator>, 1 => <denominator> ]
	   * [ n => <nominator>, d => <denominator> ]
	   *
	   * Integer form
	   * - Single integer value
	   *
	   * Double form
	   * - Single double value
	   *
	   * String form
	   * 123.456 - a simple double
	   * 123/456 - a string fraction
	   * 123.'456' - a double with repeating decimal places
	   * 123.(456) - synonym
	   * 123.45'6' - a double with repeating last place
	   * 123.45(6) - synonym
	   *
	   * Example:
	   *
	   * var f = new Fraction("9.4'31'");
	   * f.mul([-4, 3]).div(4.9);
	   *
	   */
	  (function (root) {
	    // Example: 1/7 = 0.(142857) has 6 repeating decimal places.
	    // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits

	    var MAX_CYCLE_LEN = 2000; // Parsed data to avoid calling "new" all the time

	    var P = {
	      "s": 1,
	      "n": 0,
	      "d": 1
	    };

	    function createError(name) {
	      function errorConstructor() {
	        var temp = Error.apply(this, arguments);
	        temp['name'] = this['name'] = name;
	        this['stack'] = temp['stack'];
	        this['message'] = temp['message'];
	      }
	      /**
	       * Error constructor
	       *
	       * @constructor
	       */


	      function IntermediateInheritor() {}

	      IntermediateInheritor.prototype = Error.prototype;
	      errorConstructor.prototype = new IntermediateInheritor();
	      return errorConstructor;
	    }

	    var DivisionByZero = Fraction['DivisionByZero'] = createError('DivisionByZero');
	    var InvalidParameter = Fraction['InvalidParameter'] = createError('InvalidParameter');

	    function assign(n, s) {
	      if (isNaN(n = parseInt(n, 10))) {
	        throwInvalidParam();
	      }

	      return n * s;
	    }

	    function throwInvalidParam() {
	      throw new InvalidParameter();
	    }

	    var parse = function (p1, p2) {
	      var n = 0,
	          d = 1,
	          s = 1;
	      var v = 0,
	          w = 0,
	          x = 0,
	          y = 1,
	          z = 1;
	      var A = 0,
	          B = 1;
	      var C = 1,
	          D = 1;
	      var N = 10000000;
	      var M;

	      if (p1 === undefined || p1 === null) ; else if (p2 !== undefined) {
	        n = p1;
	        d = p2;
	        s = n * d;
	      } else switch (typeof p1) {
	        case "object":
	          {
	            if ("d" in p1 && "n" in p1) {
	              n = p1["n"];
	              d = p1["d"];
	              if ("s" in p1) n *= p1["s"];
	            } else if (0 in p1) {
	              n = p1[0];
	              if (1 in p1) d = p1[1];
	            } else {
	              throwInvalidParam();
	            }

	            s = n * d;
	            break;
	          }

	        case "number":
	          {
	            if (p1 < 0) {
	              s = p1;
	              p1 = -p1;
	            }

	            if (p1 % 1 === 0) {
	              n = p1;
	            } else if (p1 > 0) {
	              // check for != 0, scale would become NaN (log(0)), which converges really slow
	              if (p1 >= 1) {
	                z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));
	                p1 /= z;
	              } // Using Farey Sequences
	              // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/


	              while (B <= N && D <= N) {
	                M = (A + C) / (B + D);

	                if (p1 === M) {
	                  if (B + D <= N) {
	                    n = A + C;
	                    d = B + D;
	                  } else if (D > B) {
	                    n = C;
	                    d = D;
	                  } else {
	                    n = A;
	                    d = B;
	                  }

	                  break;
	                } else {
	                  if (p1 > M) {
	                    A += C;
	                    B += D;
	                  } else {
	                    C += A;
	                    D += B;
	                  }

	                  if (B > N) {
	                    n = C;
	                    d = D;
	                  } else {
	                    n = A;
	                    d = B;
	                  }
	                }
	              }

	              n *= z;
	            } else if (isNaN(p1) || isNaN(p2)) {
	              d = n = NaN;
	            }

	            break;
	          }

	        case "string":
	          {
	            B = p1.match(/\d+|./g);
	            if (B === null) throwInvalidParam();

	            if (B[A] === '-') {
	              // Check for minus sign at the beginning
	              s = -1;
	              A++;
	            } else if (B[A] === '+') {
	              // Check for plus sign at the beginning
	              A++;
	            }

	            if (B.length === A + 1) {
	              // Check if it's just a simple number "1234"
	              w = assign(B[A++], s);
	            } else if (B[A + 1] === '.' || B[A] === '.') {
	              // Check if it's a decimal number
	              if (B[A] !== '.') {
	                // Handle 0.5 and .5
	                v = assign(B[A++], s);
	              }

	              A++; // Check for decimal places

	              if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === "'" && B[A + 3] === "'") {
	                w = assign(B[A], s);
	                y = Math.pow(10, B[A].length);
	                A++;
	              } // Check for repeating places


	              if (B[A] === '(' && B[A + 2] === ')' || B[A] === "'" && B[A + 2] === "'") {
	                x = assign(B[A + 1], s);
	                z = Math.pow(10, B[A + 1].length) - 1;
	                A += 3;
	              }
	            } else if (B[A + 1] === '/' || B[A + 1] === ':') {
	              // Check for a simple fraction "123/456" or "123:456"
	              w = assign(B[A], s);
	              y = assign(B[A + 2], 1);
	              A += 3;
	            } else if (B[A + 3] === '/' && B[A + 1] === ' ') {
	              // Check for a complex fraction "123 1/2"
	              v = assign(B[A], s);
	              w = assign(B[A + 2], s);
	              y = assign(B[A + 4], 1);
	              A += 5;
	            }

	            if (B.length <= A) {
	              // Check for more tokens on the stack
	              d = y * z;
	              s =
	              /* void */
	              n = x + d * v + z * w;
	              break;
	            }
	            /* Fall through on error */

	          }

	        default:
	          throwInvalidParam();
	      }

	      if (d === 0) {
	        throw new DivisionByZero();
	      }

	      P["s"] = s < 0 ? -1 : 1;
	      P["n"] = Math.abs(n);
	      P["d"] = Math.abs(d);
	    };

	    function modpow(b, e, m) {
	      var r = 1;

	      for (; e > 0; b = b * b % m, e >>= 1) {
	        if (e & 1) {
	          r = r * b % m;
	        }
	      }

	      return r;
	    }

	    function cycleLen(n, d) {
	      for (; d % 2 === 0; d /= 2) {}

	      for (; d % 5 === 0; d /= 5) {}

	      if (d === 1) // Catch non-cyclic numbers
	        return 0; // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:
	      // 10^(d-1) % d == 1
	      // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,
	      // as we want to translate the numbers to strings.

	      var rem = 10 % d;
	      var t = 1;

	      for (; rem !== 1; t++) {
	        rem = rem * 10 % d;
	        if (t > MAX_CYCLE_LEN) return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`
	      }

	      return t;
	    }

	    function cycleStart(n, d, len) {
	      var rem1 = 1;
	      var rem2 = modpow(10, len, d);

	      for (var t = 0; t < 300; t++) {
	        // s < ~log10(Number.MAX_VALUE)
	        // Solve 10^s == 10^(s+t) (mod d)
	        if (rem1 === rem2) return t;
	        rem1 = rem1 * 10 % d;
	        rem2 = rem2 * 10 % d;
	      }

	      return 0;
	    }

	    function gcd(a, b) {
	      if (!a) return b;
	      if (!b) return a;

	      while (1) {
	        a %= b;
	        if (!a) return b;
	        b %= a;
	        if (!b) return a;
	      }
	    }
	    /**
	     * Module constructor
	     *
	     * @constructor
	     * @param {number|Fraction=} a
	     * @param {number=} b
	     */

	    function Fraction(a, b) {
	      if (!(this instanceof Fraction)) {
	        return new Fraction(a, b);
	      }

	      parse(a, b);

	      if (Fraction['REDUCE']) {
	        a = gcd(P["d"], P["n"]); // Abuse a
	      } else {
	        a = 1;
	      }

	      this["s"] = P["s"];
	      this["n"] = P["n"] / a;
	      this["d"] = P["d"] / a;
	    }
	    /**
	     * Boolean global variable to be able to disable automatic reduction of the fraction
	     *
	     */


	    Fraction['REDUCE'] = 1;
	    Fraction.prototype = {
	      "s": 1,
	      "n": 0,
	      "d": 1,

	      /**
	       * Calculates the absolute value
	       *
	       * Ex: new Fraction(-4).abs() => 4
	       **/
	      "abs": function () {
	        return new Fraction(this["n"], this["d"]);
	      },

	      /**
	       * Inverts the sign of the current fraction
	       *
	       * Ex: new Fraction(-4).neg() => 4
	       **/
	      "neg": function () {
	        return new Fraction(-this["s"] * this["n"], this["d"]);
	      },

	      /**
	       * Adds two rational numbers
	       *
	       * Ex: new Fraction({n: 2, d: 3}).add("14.9") => 467 / 30
	       **/
	      "add": function (a, b) {
	        parse(a, b);
	        return new Fraction(this["s"] * this["n"] * P["d"] + P["s"] * this["d"] * P["n"], this["d"] * P["d"]);
	      },

	      /**
	       * Subtracts two rational numbers
	       *
	       * Ex: new Fraction({n: 2, d: 3}).add("14.9") => -427 / 30
	       **/
	      "sub": function (a, b) {
	        parse(a, b);
	        return new Fraction(this["s"] * this["n"] * P["d"] - P["s"] * this["d"] * P["n"], this["d"] * P["d"]);
	      },

	      /**
	       * Multiplies two rational numbers
	       *
	       * Ex: new Fraction("-17.(345)").mul(3) => 5776 / 111
	       **/
	      "mul": function (a, b) {
	        parse(a, b);
	        return new Fraction(this["s"] * P["s"] * this["n"] * P["n"], this["d"] * P["d"]);
	      },

	      /**
	       * Divides two rational numbers
	       *
	       * Ex: new Fraction("-17.(345)").inverse().div(3)
	       **/
	      "div": function (a, b) {
	        parse(a, b);
	        return new Fraction(this["s"] * P["s"] * this["n"] * P["d"], this["d"] * P["n"]);
	      },

	      /**
	       * Clones the actual object
	       *
	       * Ex: new Fraction("-17.(345)").clone()
	       **/
	      "clone": function () {
	        return new Fraction(this);
	      },

	      /**
	       * Calculates the modulo of two rational numbers - a more precise fmod
	       *
	       * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)
	       **/
	      "mod": function (a, b) {
	        if (isNaN(this['n']) || isNaN(this['d'])) {
	          return new Fraction(NaN);
	        }

	        if (a === undefined) {
	          return new Fraction(this["s"] * this["n"] % this["d"], 1);
	        }

	        parse(a, b);

	        if (0 === P["n"] && 0 === this["d"]) {
	          Fraction(0, 0); // Throw DivisionByZero
	        }
	        /*
	         * First silly attempt, kinda slow
	         *
	         return that["sub"]({
	         "n": num["n"] * Math.floor((this.n / this.d) / (num.n / num.d)),
	         "d": num["d"],
	         "s": this["s"]
	         });*/

	        /*
	         * New attempt: a1 / b1 = a2 / b2 * q + r
	         * => b2 * a1 = a2 * b1 * q + b1 * b2 * r
	         * => (b2 * a1 % a2 * b1) / (b1 * b2)
	         */


	        return new Fraction(this["s"] * (P["d"] * this["n"]) % (P["n"] * this["d"]), P["d"] * this["d"]);
	      },

	      /**
	       * Calculates the fractional gcd of two rational numbers
	       *
	       * Ex: new Fraction(5,8).gcd(3,7) => 1/56
	       */
	      "gcd": function (a, b) {
	        parse(a, b); // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)

	        return new Fraction(gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]), P["d"] * this["d"]);
	      },

	      /**
	       * Calculates the fractional lcm of two rational numbers
	       *
	       * Ex: new Fraction(5,8).lcm(3,7) => 15
	       */
	      "lcm": function (a, b) {
	        parse(a, b); // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)

	        if (P["n"] === 0 && this["n"] === 0) {
	          return new Fraction();
	        }

	        return new Fraction(P["n"] * this["n"], gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]));
	      },

	      /**
	       * Calculates the ceil of a rational number
	       *
	       * Ex: new Fraction('4.(3)').ceil() => (5 / 1)
	       **/
	      "ceil": function (places) {
	        places = Math.pow(10, places || 0);

	        if (isNaN(this["n"]) || isNaN(this["d"])) {
	          return new Fraction(NaN);
	        }

	        return new Fraction(Math.ceil(places * this["s"] * this["n"] / this["d"]), places);
	      },

	      /**
	       * Calculates the floor of a rational number
	       *
	       * Ex: new Fraction('4.(3)').floor() => (4 / 1)
	       **/
	      "floor": function (places) {
	        places = Math.pow(10, places || 0);

	        if (isNaN(this["n"]) || isNaN(this["d"])) {
	          return new Fraction(NaN);
	        }

	        return new Fraction(Math.floor(places * this["s"] * this["n"] / this["d"]), places);
	      },

	      /**
	       * Rounds a rational numbers
	       *
	       * Ex: new Fraction('4.(3)').round() => (4 / 1)
	       **/
	      "round": function (places) {
	        places = Math.pow(10, places || 0);

	        if (isNaN(this["n"]) || isNaN(this["d"])) {
	          return new Fraction(NaN);
	        }

	        return new Fraction(Math.round(places * this["s"] * this["n"] / this["d"]), places);
	      },

	      /**
	       * Gets the inverse of the fraction, means numerator and denumerator are exchanged
	       *
	       * Ex: new Fraction([-3, 4]).inverse() => -4 / 3
	       **/
	      "inverse": function () {
	        return new Fraction(this["s"] * this["d"], this["n"]);
	      },

	      /**
	       * Calculates the fraction to some integer exponent
	       *
	       * Ex: new Fraction(-1,2).pow(-3) => -8
	       */
	      "pow": function (m) {
	        if (m < 0) {
	          return new Fraction(Math.pow(this['s'] * this["d"], -m), Math.pow(this["n"], -m));
	        } else {
	          return new Fraction(Math.pow(this['s'] * this["n"], m), Math.pow(this["d"], m));
	        }
	      },

	      /**
	       * Check if two rational numbers are the same
	       *
	       * Ex: new Fraction(19.6).equals([98, 5]);
	       **/
	      "equals": function (a, b) {
	        parse(a, b);
	        return this["s"] * this["n"] * P["d"] === P["s"] * P["n"] * this["d"]; // Same as compare() === 0
	      },

	      /**
	       * Check if two rational numbers are the same
	       *
	       * Ex: new Fraction(19.6).equals([98, 5]);
	       **/
	      "compare": function (a, b) {
	        parse(a, b);
	        var t = this["s"] * this["n"] * P["d"] - P["s"] * P["n"] * this["d"];
	        return (0 < t) - (t < 0);
	      },
	      "simplify": function (eps) {
	        // First naive implementation, needs improvement
	        if (isNaN(this['n']) || isNaN(this['d'])) {
	          return this;
	        }

	        var cont = this['abs']()['toContinued']();
	        eps = eps || 0.001;

	        function rec(a) {
	          if (a.length === 1) return new Fraction(a[0]);
	          return rec(a.slice(1))['inverse']()['add'](a[0]);
	        }

	        for (var i = 0; i < cont.length; i++) {
	          var tmp = rec(cont.slice(0, i + 1));

	          if (tmp['sub'](this['abs']())['abs']().valueOf() < eps) {
	            return tmp['mul'](this['s']);
	          }
	        }

	        return this;
	      },

	      /**
	       * Check if two rational numbers are divisible
	       *
	       * Ex: new Fraction(19.6).divisible(1.5);
	       */
	      "divisible": function (a, b) {
	        parse(a, b);
	        return !(!(P["n"] * this["d"]) || this["n"] * P["d"] % (P["n"] * this["d"]));
	      },

	      /**
	       * Returns a decimal representation of the fraction
	       *
	       * Ex: new Fraction("100.'91823'").valueOf() => 100.91823918239183
	       **/
	      'valueOf': function () {
	        return this["s"] * this["n"] / this["d"];
	      },

	      /**
	       * Returns a string-fraction representation of a Fraction object
	       *
	       * Ex: new Fraction("1.'3'").toFraction() => "4 1/3"
	       **/
	      'toFraction': function (excludeWhole) {
	        var whole,
	            str = "";
	        var n = this["n"];
	        var d = this["d"];

	        if (this["s"] < 0) {
	          str += '-';
	        }

	        if (d === 1) {
	          str += n;
	        } else {
	          if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
	            str += whole;
	            str += " ";
	            n %= d;
	          }

	          str += n;
	          str += '/';
	          str += d;
	        }

	        return str;
	      },

	      /**
	       * Returns a latex representation of a Fraction object
	       *
	       * Ex: new Fraction("1.'3'").toLatex() => "\frac{4}{3}"
	       **/
	      'toLatex': function (excludeWhole) {
	        var whole,
	            str = "";
	        var n = this["n"];
	        var d = this["d"];

	        if (this["s"] < 0) {
	          str += '-';
	        }

	        if (d === 1) {
	          str += n;
	        } else {
	          if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
	            str += whole;
	            n %= d;
	          }

	          str += "\\frac{";
	          str += n;
	          str += '}{';
	          str += d;
	          str += '}';
	        }

	        return str;
	      },

	      /**
	       * Returns an array of continued fraction elements
	       *
	       * Ex: new Fraction("7/8").toContinued() => [0,1,7]
	       */
	      'toContinued': function () {
	        var t;
	        var a = this['n'];
	        var b = this['d'];
	        var res = [];

	        if (isNaN(this['n']) || isNaN(this['d'])) {
	          return res;
	        }

	        do {
	          res.push(Math.floor(a / b));
	          t = a % b;
	          a = b;
	          b = t;
	        } while (a !== 1);

	        return res;
	      },

	      /**
	       * Creates a string representation of a fraction with all digits
	       *
	       * Ex: new Fraction("100.'91823'").toString() => "100.(91823)"
	       **/
	      'toString': function (dec) {
	        var g;
	        var N = this["n"];
	        var D = this["d"];

	        if (isNaN(N) || isNaN(D)) {
	          return "NaN";
	        }

	        if (!Fraction['REDUCE']) {
	          g = gcd(N, D);
	          N /= g;
	          D /= g;
	        }

	        dec = dec || 15; // 15 = decimal places when no repitation

	        var cycLen = cycleLen(N, D); // Cycle length

	        var cycOff = cycleStart(N, D, cycLen); // Cycle start

	        var str = this['s'] === -1 ? "-" : "";
	        str += N / D | 0;
	        N %= D;
	        N *= 10;
	        if (N) str += ".";

	        if (cycLen) {
	          for (var i = cycOff; i--;) {
	            str += N / D | 0;
	            N %= D;
	            N *= 10;
	          }

	          str += "(";

	          for (var i = cycLen; i--;) {
	            str += N / D | 0;
	            N %= D;
	            N *= 10;
	          }

	          str += ")";
	        } else {
	          for (var i = dec; N && i--;) {
	            str += N / D | 0;
	            N %= D;
	            N *= 10;
	          }
	        }

	        return str;
	      }
	    };

	    {
	      Object.defineProperty(exports, "__esModule", {
	        'value': true
	      });
	      Fraction['default'] = Fraction;
	      Fraction['Fraction'] = Fraction;
	      module['exports'] = Fraction;
	    }
	  })();
	});
	var Fraction = /*@__PURE__*/getDefaultExportFromCjs(fraction);

	var name$2 = 'Fraction';
	var dependencies$3 = [];
	var createFractionClass = /* #__PURE__ */factory(name$2, dependencies$3, function () {
	  /**
	   * Attach type information
	   */
	  Fraction.prototype.type = 'Fraction';
	  Fraction.prototype.isFraction = true;
	  /**
	   * Get a JSON representation of a Fraction containing type information
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "Fraction", "n": 3, "d": 8}`
	   */

	  Fraction.prototype.toJSON = function () {
	    return {
	      mathjs: 'Fraction',
	      n: this.s * this.n,
	      d: this.d
	    };
	  };
	  /**
	   * Instantiate a Fraction from a JSON object
	   * @param {Object} json  a JSON object structured as:
	   *                       `{"mathjs": "Fraction", "n": 3, "d": 8}`
	   * @return {BigNumber}
	   */


	  Fraction.fromJSON = function (json) {
	    return new Fraction(json);
	  };

	  return Fraction;
	}, {
	  isClass: true
	});

	var name$3 = 'Matrix';
	var dependencies$4 = [];
	var createMatrixClass = /* #__PURE__ */factory(name$3, dependencies$4, function () {
	  /**
	   * @constructor Matrix
	   *
	   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional
	   * array. A matrix can be constructed as:
	   *
	   *     let matrix = math.matrix(data)
	   *
	   * Matrix contains the functions to resize, get and set values, get the size,
	   * clone the matrix and to convert the matrix to a vector, array, or scalar.
	   * Furthermore, one can iterate over the matrix using map and forEach.
	   * The internal Array of the Matrix can be accessed using the function valueOf.
	   *
	   * Example usage:
	   *
	   *     let matrix = math.matrix([[1, 2], [3, 4]])
	   *     matix.size()              // [2, 2]
	   *     matrix.resize([3, 2], 5)
	   *     matrix.valueOf()          // [[1, 2], [3, 4], [5, 5]]
	   *     matrix.subset([1,2])       // 3 (indexes are zero-based)
	   *
	   */
	  function Matrix() {
	    if (!(this instanceof Matrix)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	  }
	  /**
	   * Attach type information
	   */


	  Matrix.prototype.type = 'Matrix';
	  Matrix.prototype.isMatrix = true;
	  /**
	   * Get the storage format used by the matrix.
	   *
	   * Usage:
	   *     const format = matrix.storage()   // retrieve storage format
	   *
	   * @return {string}           The storage format.
	   */

	  Matrix.prototype.storage = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke storage on a Matrix interface');
	  };
	  /**
	   * Get the datatype of the data stored in the matrix.
	   *
	   * Usage:
	   *     const format = matrix.datatype()    // retrieve matrix datatype
	   *
	   * @return {string}           The datatype.
	   */


	  Matrix.prototype.datatype = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke datatype on a Matrix interface');
	  };
	  /**
	   * Create a new Matrix With the type of the current matrix instance
	   * @param {Array | Object} data
	   * @param {string} [datatype]
	   */


	  Matrix.prototype.create = function (data, datatype) {
	    throw new Error('Cannot invoke create on a Matrix interface');
	  };
	  /**
	   * Get a subset of the matrix, or replace a subset of the matrix.
	   *
	   * Usage:
	   *     const subset = matrix.subset(index)               // retrieve subset
	   *     const value = matrix.subset(index, replacement)   // replace subset
	   *
	   * @param {Index} index
	   * @param {Array | Matrix | *} [replacement]
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be filled with zeros.
	   */


	  Matrix.prototype.subset = function (index, replacement, defaultValue) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke subset on a Matrix interface');
	  };
	  /**
	   * Get a single element from the matrix.
	   * @param {number[]} index   Zero-based index
	   * @return {*} value
	   */


	  Matrix.prototype.get = function (index) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke get on a Matrix interface');
	  };
	  /**
	   * Replace a single element in the matrix.
	   * @param {number[]} index   Zero-based index
	   * @param {*} value
	   * @param {*} [defaultValue]        Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be left undefined.
	   * @return {Matrix} self
	   */


	  Matrix.prototype.set = function (index, value, defaultValue) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke set on a Matrix interface');
	  };
	  /**
	   * Resize the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (resize in place).
	   *
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
	   *                                  If not provided, the matrix elements will
	   *                                  be filled with zeros.
	   * @param {boolean} [copy]          Return a resized copy of the matrix
	   *
	   * @return {Matrix}                 The resized matrix
	   */


	  Matrix.prototype.resize = function (size, defaultValue) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke resize on a Matrix interface');
	  };
	  /**
	   * Reshape the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (reshape in place).
	   *
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {boolean} [copy]          Return a reshaped copy of the matrix
	   *
	   * @return {Matrix}                 The reshaped matrix
	   */


	  Matrix.prototype.reshape = function (size, defaultValue) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke reshape on a Matrix interface');
	  };
	  /**
	   * Create a clone of the matrix
	   * @return {Matrix} clone
	   */


	  Matrix.prototype.clone = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke clone on a Matrix interface');
	  };
	  /**
	   * Retrieve the size of the matrix.
	   * @returns {number[]} size
	   */


	  Matrix.prototype.size = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke size on a Matrix interface');
	  };
	  /**
	   * Create a new matrix with the results of the callback function executed on
	   * each entry of the matrix.
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
	   *
	   * @return {Matrix} matrix
	   */


	  Matrix.prototype.map = function (callback, skipZeros) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke map on a Matrix interface');
	  };
	  /**
	   * Execute a callback function on each entry of the matrix.
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   */


	  Matrix.prototype.forEach = function (callback) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke forEach on a Matrix interface');
	  };
	  /**
	   * Create an Array with a copy of the data of the Matrix
	   * @returns {Array} array
	   */


	  Matrix.prototype.toArray = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke toArray on a Matrix interface');
	  };
	  /**
	   * Get the primitive value of the Matrix: a multidimensional array
	   * @returns {Array} array
	   */


	  Matrix.prototype.valueOf = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke valueOf on a Matrix interface');
	  };
	  /**
	   * Get a string representation of the matrix, with optional formatting options.
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @returns {string} str
	   */


	  Matrix.prototype.format = function (options) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke format on a Matrix interface');
	  };
	  /**
	   * Get a string representation of the matrix
	   * @returns {string} str
	   */


	  Matrix.prototype.toString = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke toString on a Matrix interface');
	  };

	  return Matrix;
	}, {
	  isClass: true
	});

	var name$4 = 'DenseMatrix';
	var dependencies$5 = ['Matrix'];
	var createDenseMatrixClass = /* #__PURE__ */factory(name$4, dependencies$5, function (_ref) {
	  var Matrix = _ref.Matrix;
	  /**
	   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.
	   * @class DenseMatrix
	   */

	  function DenseMatrix(data, datatype) {
	    if (!(this instanceof DenseMatrix)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    if (datatype && !isString(datatype)) {
	      throw new Error('Invalid datatype: ' + datatype);
	    }

	    if (isMatrix(data)) {
	      // check data is a DenseMatrix
	      if (data.type === 'DenseMatrix') {
	        // clone data & size
	        this._data = clone(data._data);
	        this._size = clone(data._size);
	        this._datatype = datatype || data._datatype;
	      } else {
	        // build data from existing matrix
	        this._data = data.toArray();
	        this._size = data.size();
	        this._datatype = datatype || data._datatype;
	      }
	    } else if (data && isArray(data.data) && isArray(data.size)) {
	      // initialize fields from JSON representation
	      this._data = data.data;
	      this._size = data.size; // verify the dimensions of the array

	      validate(this._data, this._size);
	      this._datatype = datatype || data.datatype;
	    } else if (isArray(data)) {
	      // replace nested Matrices with Arrays
	      this._data = preprocess(data); // get the dimensions of the array

	      this._size = arraySize(this._data); // verify the dimensions of the array, TODO: compute size while processing array

	      validate(this._data, this._size); // data type unknown

	      this._datatype = datatype;
	    } else if (data) {
	      // unsupported type
	      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');
	    } else {
	      // nothing provided
	      this._data = [];
	      this._size = [0];
	      this._datatype = datatype;
	    }
	  }

	  DenseMatrix.prototype = new Matrix();
	  /**
	   * Create a new DenseMatrix
	   */

	  DenseMatrix.prototype.createDenseMatrix = function (data, datatype) {
	    return new DenseMatrix(data, datatype);
	  };
	  /**
	   * Attach type information
	   */


	  DenseMatrix.prototype.type = 'DenseMatrix';
	  DenseMatrix.prototype.isDenseMatrix = true;
	  /**
	   * Get the matrix type
	   *
	   * Usage:
	   *    const matrixType = matrix.getDataType()  // retrieves the matrix type
	   *
	   * @memberOf DenseMatrix
	   * @return {string}   type information; if multiple types are found from the Matrix, it will return "mixed"
	   */

	  DenseMatrix.prototype.getDataType = function () {
	    return getArrayDataType(this._data, typeOf);
	  };
	  /**
	   * Get the storage format used by the matrix.
	   *
	   * Usage:
	   *     const format = matrix.storage()  // retrieve storage format
	   *
	   * @memberof DenseMatrix
	   * @return {string}           The storage format.
	   */


	  DenseMatrix.prototype.storage = function () {
	    return 'dense';
	  };
	  /**
	   * Get the datatype of the data stored in the matrix.
	   *
	   * Usage:
	   *     const format = matrix.datatype()   // retrieve matrix datatype
	   *
	   * @memberof DenseMatrix
	   * @return {string}           The datatype.
	   */


	  DenseMatrix.prototype.datatype = function () {
	    return this._datatype;
	  };
	  /**
	   * Create a new DenseMatrix
	   * @memberof DenseMatrix
	   * @param {Array} data
	   * @param {string} [datatype]
	   */


	  DenseMatrix.prototype.create = function (data, datatype) {
	    return new DenseMatrix(data, datatype);
	  };
	  /**
	   * Get a subset of the matrix, or replace a subset of the matrix.
	   *
	   * Usage:
	   *     const subset = matrix.subset(index)               // retrieve subset
	   *     const value = matrix.subset(index, replacement)   // replace subset
	   *
	   * @memberof DenseMatrix
	   * @param {Index} index
	   * @param {Array | Matrix | *} [replacement]
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be filled with zeros.
	   */


	  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {
	    switch (arguments.length) {
	      case 1:
	        return _get(this, index);
	      // intentional fall through

	      case 2:
	      case 3:
	        return _set(this, index, replacement, defaultValue);

	      default:
	        throw new SyntaxError('Wrong number of arguments');
	    }
	  };
	  /**
	   * Get a single element from the matrix.
	   * @memberof DenseMatrix
	   * @param {number[]} index   Zero-based index
	   * @return {*} value
	   */


	  DenseMatrix.prototype.get = function (index) {
	    if (!isArray(index)) {
	      throw new TypeError('Array expected');
	    }

	    if (index.length !== this._size.length) {
	      throw new DimensionError(index.length, this._size.length);
	    } // check index


	    for (var x = 0; x < index.length; x++) {
	      validateIndex(index[x], this._size[x]);
	    }

	    var data = this._data;

	    for (var i = 0, ii = index.length; i < ii; i++) {
	      var indexI = index[i];
	      validateIndex(indexI, data.length);
	      data = data[indexI];
	    }

	    return data;
	  };
	  /**
	   * Replace a single element in the matrix.
	   * @memberof DenseMatrix
	   * @param {number[]} index   Zero-based index
	   * @param {*} value
	   * @param {*} [defaultValue]        Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be left undefined.
	   * @return {DenseMatrix} self
	   */


	  DenseMatrix.prototype.set = function (index, value, defaultValue) {
	    if (!isArray(index)) {
	      throw new TypeError('Array expected');
	    }

	    if (index.length < this._size.length) {
	      throw new DimensionError(index.length, this._size.length, '<');
	    }

	    var i, ii, indexI; // enlarge matrix when needed

	    var size = index.map(function (i) {
	      return i + 1;
	    });

	    _fit(this, size, defaultValue); // traverse over the dimensions


	    var data = this._data;

	    for (i = 0, ii = index.length - 1; i < ii; i++) {
	      indexI = index[i];
	      validateIndex(indexI, data.length);
	      data = data[indexI];
	    } // set new value


	    indexI = index[index.length - 1];
	    validateIndex(indexI, data.length);
	    data[indexI] = value;
	    return this;
	  };
	  /**
	   * Get a submatrix of this matrix
	   * @memberof DenseMatrix
	   * @param {DenseMatrix} matrix
	   * @param {Index} index   Zero-based index
	   * @private
	   */


	  function _get(matrix, index) {
	    if (!isIndex(index)) {
	      throw new TypeError('Invalid index');
	    }

	    var isScalar = index.isScalar();

	    if (isScalar) {
	      // return a scalar
	      return matrix.get(index.min());
	    } else {
	      // validate dimensions
	      var size = index.size();

	      if (size.length !== matrix._size.length) {
	        throw new DimensionError(size.length, matrix._size.length);
	      } // validate if any of the ranges in the index is out of range


	      var min = index.min();
	      var max = index.max();

	      for (var i = 0, ii = matrix._size.length; i < ii; i++) {
	        validateIndex(min[i], matrix._size[i]);
	        validateIndex(max[i], matrix._size[i]);
	      } // retrieve submatrix
	      // TODO: more efficient when creating an empty matrix and setting _data and _size manually


	      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);
	    }
	  }
	  /**
	   * Recursively get a submatrix of a multi dimensional matrix.
	   * Index is not checked for correct number or length of dimensions.
	   * @memberof DenseMatrix
	   * @param {Array} data
	   * @param {Index} index
	   * @param {number} dims   Total number of dimensions
	   * @param {number} dim    Current dimension
	   * @return {Array} submatrix
	   * @private
	   */


	  function _getSubmatrix(data, index, dims, dim) {
	    var last = dim === dims - 1;
	    var range = index.dimension(dim);

	    if (last) {
	      return range.map(function (i) {
	        validateIndex(i, data.length);
	        return data[i];
	      }).valueOf();
	    } else {
	      return range.map(function (i) {
	        validateIndex(i, data.length);
	        var child = data[i];
	        return _getSubmatrix(child, index, dims, dim + 1);
	      }).valueOf();
	    }
	  }
	  /**
	   * Replace a submatrix in this matrix
	   * Indexes are zero-based.
	   * @memberof DenseMatrix
	   * @param {DenseMatrix} matrix
	   * @param {Index} index
	   * @param {DenseMatrix | Array | *} submatrix
	   * @param {*} defaultValue          Default value, filled in on new entries when
	   *                                  the matrix is resized.
	   * @return {DenseMatrix} matrix
	   * @private
	   */


	  function _set(matrix, index, submatrix, defaultValue) {
	    if (!index || index.isIndex !== true) {
	      throw new TypeError('Invalid index');
	    } // get index size and check whether the index contains a single value


	    var iSize = index.size();
	    var isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed

	    var sSize;

	    if (isMatrix(submatrix)) {
	      sSize = submatrix.size();
	      submatrix = submatrix.valueOf();
	    } else {
	      sSize = arraySize(submatrix);
	    }

	    if (isScalar) {
	      // set a scalar
	      // check whether submatrix is a scalar
	      if (sSize.length !== 0) {
	        throw new TypeError('Scalar expected');
	      }

	      matrix.set(index.min(), submatrix, defaultValue);
	    } else {
	      // set a submatrix
	      // validate dimensions
	      if (iSize.length < matrix._size.length) {
	        throw new DimensionError(iSize.length, matrix._size.length, '<');
	      }

	      if (sSize.length < iSize.length) {
	        // calculate number of missing outer dimensions
	        var i = 0;
	        var outer = 0;

	        while (iSize[i] === 1 && sSize[i] === 1) {
	          i++;
	        }

	        while (iSize[i] === 1) {
	          outer++;
	          i++;
	        } // unsqueeze both outer and inner dimensions


	        submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);
	      } // check whether the size of the submatrix matches the index size


	      if (!deepStrictEqual(iSize, sSize)) {
	        throw new DimensionError(iSize, sSize, '>');
	      } // enlarge matrix when needed


	      var size = index.max().map(function (i) {
	        return i + 1;
	      });

	      _fit(matrix, size, defaultValue); // insert the sub matrix


	      var dims = iSize.length;
	      var dim = 0;

	      _setSubmatrix(matrix._data, index, submatrix, dims, dim);
	    }

	    return matrix;
	  }
	  /**
	   * Replace a submatrix of a multi dimensional matrix.
	   * @memberof DenseMatrix
	   * @param {Array} data
	   * @param {Index} index
	   * @param {Array} submatrix
	   * @param {number} dims   Total number of dimensions
	   * @param {number} dim
	   * @private
	   */


	  function _setSubmatrix(data, index, submatrix, dims, dim) {
	    var last = dim === dims - 1;
	    var range = index.dimension(dim);

	    if (last) {
	      range.forEach(function (dataIndex, subIndex) {
	        validateIndex(dataIndex);
	        data[dataIndex] = submatrix[subIndex[0]];
	      });
	    } else {
	      range.forEach(function (dataIndex, subIndex) {
	        validateIndex(dataIndex);

	        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);
	      });
	    }
	  }
	  /**
	   * Resize the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (resize in place).
	   *
	   * @memberof DenseMatrix
	   * @param {number[] || Matrix} size The new size the matrix should have.
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
	   *                                  If not provided, the matrix elements will
	   *                                  be filled with zeros.
	   * @param {boolean} [copy]          Return a resized copy of the matrix
	   *
	   * @return {Matrix}                 The resized matrix
	   */


	  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {
	    // validate arguments
	    if (!isCollection(size)) {
	      throw new TypeError('Array or Matrix expected');
	    } // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector


	    var sizeArray = size.valueOf().map(function (value) {
	      return Array.isArray(value) && value.length === 1 ? value[0] : value;
	    }); // matrix to resize

	    var m = copy ? this.clone() : this; // resize matrix

	    return _resize(m, sizeArray, defaultValue);
	  };

	  function _resize(matrix, size, defaultValue) {
	    // check size
	    if (size.length === 0) {
	      // first value in matrix
	      var v = matrix._data; // go deep

	      while (isArray(v)) {
	        v = v[0];
	      }

	      return v;
	    } // resize matrix


	    matrix._size = size.slice(0); // copy the array

	    matrix._data = resize(matrix._data, matrix._size, defaultValue); // return matrix

	    return matrix;
	  }
	  /**
	   * Reshape the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (reshape in place).
	   *
	   * NOTE: This might be better suited to copy by default, instead of modifying
	   *       in place. For now, it operates in place to remain consistent with
	   *       resize().
	   *
	   * @memberof DenseMatrix
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {boolean} [copy]          Return a reshaped copy of the matrix
	   *
	   * @return {Matrix}                 The reshaped matrix
	   */


	  DenseMatrix.prototype.reshape = function (size, copy) {
	    var m = copy ? this.clone() : this;
	    m._data = reshape(m._data, size);
	    m._size = size.slice(0);
	    return m;
	  };
	  /**
	   * Enlarge the matrix when it is smaller than given size.
	   * If the matrix is larger or equal sized, nothing is done.
	   * @memberof DenseMatrix
	   * @param {DenseMatrix} matrix           The matrix to be resized
	   * @param {number[]} size
	   * @param {*} defaultValue          Default value, filled in on new entries.
	   * @private
	   */


	  function _fit(matrix, size, defaultValue) {
	    var // copy the array
	    newSize = matrix._size.slice(0);

	    var changed = false; // add dimensions when needed

	    while (newSize.length < size.length) {
	      newSize.push(0);
	      changed = true;
	    } // enlarge size when needed


	    for (var i = 0, ii = size.length; i < ii; i++) {
	      if (size[i] > newSize[i]) {
	        newSize[i] = size[i];
	        changed = true;
	      }
	    }

	    if (changed) {
	      // resize only when size is changed
	      _resize(matrix, newSize, defaultValue);
	    }
	  }
	  /**
	   * Create a clone of the matrix
	   * @memberof DenseMatrix
	   * @return {DenseMatrix} clone
	   */


	  DenseMatrix.prototype.clone = function () {
	    var m = new DenseMatrix({
	      data: clone(this._data),
	      size: clone(this._size),
	      datatype: this._datatype
	    });
	    return m;
	  };
	  /**
	   * Retrieve the size of the matrix.
	   * @memberof DenseMatrix
	   * @returns {number[]} size
	   */


	  DenseMatrix.prototype.size = function () {
	    return this._size.slice(0); // return a clone of _size
	  };
	  /**
	   * Create a new matrix with the results of the callback function executed on
	   * each entry of the matrix.
	   * @memberof DenseMatrix
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   *
	   * @return {DenseMatrix} matrix
	   */


	  DenseMatrix.prototype.map = function (callback) {
	    // matrix instance
	    var me = this;

	    var recurse = function recurse(value, index) {
	      if (isArray(value)) {
	        return value.map(function (child, i) {
	          return recurse(child, index.concat(i));
	        });
	      } else {
	        return callback(value, index, me);
	      }
	    }; // determine the new datatype when the original matrix has datatype defined
	    // TODO: should be done in matrix constructor instead


	    var data = recurse(this._data, []);
	    var datatype = this._datatype !== undefined ? getArrayDataType(data, typeOf) : undefined;
	    return new DenseMatrix(data, datatype);
	  };
	  /**
	   * Execute a callback function on each entry of the matrix.
	   * @memberof DenseMatrix
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   */


	  DenseMatrix.prototype.forEach = function (callback) {
	    // matrix instance
	    var me = this;

	    var recurse = function recurse(value, index) {
	      if (isArray(value)) {
	        value.forEach(function (child, i) {
	          recurse(child, index.concat(i));
	        });
	      } else {
	        callback(value, index, me);
	      }
	    };

	    recurse(this._data, []);
	  };
	  /**
	   * Create an Array with a copy of the data of the DenseMatrix
	   * @memberof DenseMatrix
	   * @returns {Array} array
	   */


	  DenseMatrix.prototype.toArray = function () {
	    return clone(this._data);
	  };
	  /**
	   * Get the primitive value of the DenseMatrix: a multidimensional array
	   * @memberof DenseMatrix
	   * @returns {Array} array
	   */


	  DenseMatrix.prototype.valueOf = function () {
	    return this._data;
	  };
	  /**
	   * Get a string representation of the matrix, with optional formatting options.
	   * @memberof DenseMatrix
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @returns {string} str
	   */


	  DenseMatrix.prototype.format = function (options) {
	    return format$2(this._data, options);
	  };
	  /**
	   * Get a string representation of the matrix
	   * @memberof DenseMatrix
	   * @returns {string} str
	   */


	  DenseMatrix.prototype.toString = function () {
	    return format$2(this._data);
	  };
	  /**
	   * Get a JSON representation of the matrix
	   * @memberof DenseMatrix
	   * @returns {Object}
	   */


	  DenseMatrix.prototype.toJSON = function () {
	    return {
	      mathjs: 'DenseMatrix',
	      data: this._data,
	      size: this._size,
	      datatype: this._datatype
	    };
	  };
	  /**
	   * Get the kth Matrix diagonal.
	   *
	   * @memberof DenseMatrix
	   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
	   *
	   * @returns {Matrix}                     The matrix with the diagonal values.
	   */


	  DenseMatrix.prototype.diagonal = function (k) {
	    // validate k if any
	    if (k) {
	      // convert BigNumber to a number
	      if (isBigNumber(k)) {
	        k = k.toNumber();
	      } // is must be an integer


	      if (!isNumber(k) || !isInteger(k)) {
	        throw new TypeError('The parameter k must be an integer number');
	      }
	    } else {
	      // default value
	      k = 0;
	    }

	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0; // rows & columns

	    var rows = this._size[0];
	    var columns = this._size[1]; // number diagonal values

	    var n = Math.min(rows - kSub, columns - kSuper); // x is a matrix get diagonal from matrix

	    var data = []; // loop rows

	    for (var i = 0; i < n; i++) {
	      data[i] = this._data[i + kSub][i + kSuper];
	    } // create DenseMatrix


	    return new DenseMatrix({
	      data: data,
	      size: [n],
	      datatype: this._datatype
	    });
	  };
	  /**
	   * Create a diagonal matrix.
	   *
	   * @memberof DenseMatrix
	   * @param {Array} size                     The matrix size.
	   * @param {number | Matrix | Array } value The values for the diagonal.
	   * @param {number | BigNumber} [k=0]       The kth diagonal where the vector will be filled in.
	   * @param {number} [defaultValue]          The default value for non-diagonal
	   * @param {string} [datatype]              The datatype for the diagonal
	   *
	   * @returns {DenseMatrix}
	   */


	  DenseMatrix.diagonal = function (size, value, k, defaultValue) {
	    if (!isArray(size)) {
	      throw new TypeError('Array expected, size parameter');
	    }

	    if (size.length !== 2) {
	      throw new Error('Only two dimensions matrix are supported');
	    } // map size & validate


	    size = size.map(function (s) {
	      // check it is a big number
	      if (isBigNumber(s)) {
	        // convert it
	        s = s.toNumber();
	      } // validate arguments


	      if (!isNumber(s) || !isInteger(s) || s < 1) {
	        throw new Error('Size values must be positive integers');
	      }

	      return s;
	    }); // validate k if any

	    if (k) {
	      // convert BigNumber to a number
	      if (isBigNumber(k)) {
	        k = k.toNumber();
	      } // is must be an integer


	      if (!isNumber(k) || !isInteger(k)) {
	        throw new TypeError('The parameter k must be an integer number');
	      }
	    } else {
	      // default value
	      k = 0;
	    }

	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0; // rows and columns

	    var rows = size[0];
	    var columns = size[1]; // number of non-zero items

	    var n = Math.min(rows - kSub, columns - kSuper); // value extraction function

	    var _value; // check value


	    if (isArray(value)) {
	      // validate array
	      if (value.length !== n) {
	        // number of values in array must be n
	        throw new Error('Invalid value array length');
	      } // define function


	      _value = function _value(i) {
	        // return value @ i
	        return value[i];
	      };
	    } else if (isMatrix(value)) {
	      // matrix size
	      var ms = value.size(); // validate matrix

	      if (ms.length !== 1 || ms[0] !== n) {
	        // number of values in array must be n
	        throw new Error('Invalid matrix length');
	      } // define function


	      _value = function _value(i) {
	        // return value @ i
	        return value.get([i]);
	      };
	    } else {
	      // define function
	      _value = function _value() {
	        // return value
	        return value;
	      };
	    } // discover default value if needed


	    if (!defaultValue) {
	      // check first value in array
	      defaultValue = isBigNumber(_value(0)) ? _value(0).mul(0) // trick to create a BigNumber with value zero
	      : 0;
	    } // empty array


	    var data = []; // check we need to resize array

	    if (size.length > 0) {
	      // resize array
	      data = resize(data, size, defaultValue); // fill diagonal

	      for (var d = 0; d < n; d++) {
	        data[d + kSub][d + kSuper] = _value(d);
	      }
	    } // create DenseMatrix


	    return new DenseMatrix({
	      data: data,
	      size: [rows, columns]
	    });
	  };
	  /**
	   * Generate a matrix from a JSON object
	   * @memberof DenseMatrix
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "DenseMatrix", data: [], size: []}`,
	   *                       where mathjs is optional
	   * @returns {DenseMatrix}
	   */


	  DenseMatrix.fromJSON = function (json) {
	    return new DenseMatrix(json);
	  };
	  /**
	   * Swap rows i and j in Matrix.
	   *
	   * @memberof DenseMatrix
	   * @param {number} i       Matrix row index 1
	   * @param {number} j       Matrix row index 2
	   *
	   * @return {Matrix}        The matrix reference
	   */


	  DenseMatrix.prototype.swapRows = function (i, j) {
	    // check index
	    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {
	      throw new Error('Row index must be positive integers');
	    } // check dimensions


	    if (this._size.length !== 2) {
	      throw new Error('Only two dimensional matrix is supported');
	    } // validate index


	    validateIndex(i, this._size[0]);
	    validateIndex(j, this._size[0]); // swap rows

	    DenseMatrix._swapRows(i, j, this._data); // return current instance


	    return this;
	  };
	  /**
	   * Swap rows i and j in Dense Matrix data structure.
	   *
	   * @param {number} i       Matrix row index 1
	   * @param {number} j       Matrix row index 2
	   * @param {Array} data     Matrix data
	   */


	  DenseMatrix._swapRows = function (i, j, data) {
	    // swap values i <-> j
	    var vi = data[i];
	    data[i] = data[j];
	    data[j] = vi;
	  };
	  /**
	   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and
	   * Matrices. Replaces all nested Matrices with Arrays
	   * @memberof DenseMatrix
	   * @param {Array} data
	   * @return {Array} data
	   */


	  function preprocess(data) {
	    for (var i = 0, ii = data.length; i < ii; i++) {
	      var elem = data[i];

	      if (isArray(elem)) {
	        data[i] = preprocess(elem);
	      } else if (elem && elem.isMatrix === true) {
	        data[i] = preprocess(elem.valueOf());
	      }
	    }

	    return data;
	  }

	  return DenseMatrix;
	}, {
	  isClass: true
	});

	/**
	 * Execute the callback function element wise for each element in array and any
	 * nested array
	 * Returns an array with the results
	 * @param {Array | Matrix} array
	 * @param {Function} callback   The callback is called with two parameters:
	 *                              value1 and value2, which contain the current
	 *                              element of both arrays.
	 * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
	 *
	 * @return {Array | Matrix} res
	 */

	function deepMap(array, callback, skipZeros) {
	  if (array && typeof array.map === 'function') {
	    // TODO: replace array.map with a for loop to improve performance
	    return array.map(function (x) {
	      return deepMap(x, callback);
	    });
	  } else {
	    return callback(array);
	  }
	}

	var n1 = 'number';
	var n2 = 'number, number';
	function absNumber(a) {
	  return Math.abs(a);
	}
	absNumber.signature = n1;
	function addNumber(a, b) {
	  return a + b;
	}
	addNumber.signature = n2;
	function multiplyNumber(a, b) {
	  return a * b;
	}
	multiplyNumber.signature = n2;
	function unaryMinusNumber(x) {
	  return -x;
	}
	unaryMinusNumber.signature = n1;

	/**
	 * Compares two BigNumbers.
	 * @param {BigNumber} x       First value to compare
	 * @param {BigNumber} y       Second value to compare
	 * @param {number} [epsilon]  The maximum relative difference between x and y
	 *                            If epsilon is undefined or null, the function will
	 *                            test whether x and y are exactly equal.
	 * @return {boolean} whether the two numbers are nearly equal
	 */
	function nearlyEqual$1(x, y, epsilon) {
	  // if epsilon is null or undefined, test whether x and y are exactly equal
	  if (epsilon === null || epsilon === undefined) {
	    return x.eq(y);
	  } // use "==" operator, handles infinities


	  if (x.eq(y)) {
	    return true;
	  } // NaN


	  if (x.isNaN() || y.isNaN()) {
	    return false;
	  } // at this point x and y should be finite


	  if (x.isFinite() && y.isFinite()) {
	    // check numbers are very close, needed when comparing numbers near zero
	    var diff = x.minus(y).abs();

	    if (diff.isZero()) {
	      return true;
	    } else {
	      // use relative error
	      var max = x.constructor.max(x.abs(), y.abs());
	      return diff.lte(max.times(epsilon));
	    }
	  } // Infinite and Number or negative Infinite and positive Infinite cases


	  return false;
	}

	/**
	 * Test whether two complex values are equal provided a given epsilon.
	 * Does not use or change the global Complex.EPSILON setting
	 * @param {Complex} x
	 * @param {Complex} y
	 * @param {number} epsilon
	 * @returns {boolean}
	 */

	function complexEquals(x, y, epsilon) {
	  return nearlyEqual(x.re, y.re, epsilon) && nearlyEqual(x.im, y.im, epsilon);
	}

	var name$5 = 'equalScalar';
	var dependencies$6 = ['typed', 'config'];
	var createEqualScalar = /* #__PURE__ */factory(name$5, dependencies$6, function (_ref) {
	  var typed = _ref.typed,
	      config = _ref.config;
	  /**
	   * Test whether two scalar values are nearly equal.
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare
	   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false
	   * @private
	   */

	  return typed(name$5, {
	    'boolean, boolean': function booleanBoolean(x, y) {
	      return x === y;
	    },
	    'number, number': function numberNumber(x, y) {
	      return nearlyEqual(x, y, config.epsilon);
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.eq(y) || nearlyEqual$1(x, y, config.epsilon);
	    },
	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.equals(y);
	    },
	    'Complex, Complex': function ComplexComplex(x, y) {
	      return complexEquals(x, y, config.epsilon);
	    },
	    'Unit, Unit': function UnitUnit(x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }

	      return this(x.value, y.value);
	    }
	  });
	});
	var createEqualScalarNumber = factory(name$5, ['typed', 'config'], function (_ref2) {
	  var typed = _ref2.typed,
	      config = _ref2.config;
	  return typed(name$5, {
	    'number, number': function numberNumber(x, y) {
	      return nearlyEqual(x, y, config.epsilon);
	    }
	  });
	});

	var name$6 = 'SparseMatrix';
	var dependencies$7 = ['typed', 'equalScalar', 'Matrix'];
	var createSparseMatrixClass = /* #__PURE__ */factory(name$6, dependencies$7, function (_ref) {
	  var typed = _ref.typed,
	      equalScalar = _ref.equalScalar,
	      Matrix = _ref.Matrix;
	  /**
	   * Sparse Matrix implementation. This type implements a Compressed Column Storage format
	   * for sparse matrices.
	   * @class SparseMatrix
	   */

	  function SparseMatrix(data, datatype) {
	    if (!(this instanceof SparseMatrix)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    if (datatype && !isString(datatype)) {
	      throw new Error('Invalid datatype: ' + datatype);
	    }

	    if (isMatrix(data)) {
	      // create from matrix
	      _createFromMatrix(this, data, datatype);
	    } else if (data && isArray(data.index) && isArray(data.ptr) && isArray(data.size)) {
	      // initialize fields
	      this._values = data.values;
	      this._index = data.index;
	      this._ptr = data.ptr;
	      this._size = data.size;
	      this._datatype = datatype || data.datatype;
	    } else if (isArray(data)) {
	      // create from array
	      _createFromArray(this, data, datatype);
	    } else if (data) {
	      // unsupported type
	      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');
	    } else {
	      // nothing provided
	      this._values = [];
	      this._index = [];
	      this._ptr = [0];
	      this._size = [0, 0];
	      this._datatype = datatype;
	    }
	  }

	  function _createFromMatrix(matrix, source, datatype) {
	    // check matrix type
	    if (source.type === 'SparseMatrix') {
	      // clone arrays
	      matrix._values = source._values ? clone(source._values) : undefined;
	      matrix._index = clone(source._index);
	      matrix._ptr = clone(source._ptr);
	      matrix._size = clone(source._size);
	      matrix._datatype = datatype || source._datatype;
	    } else {
	      // build from matrix data
	      _createFromArray(matrix, source.valueOf(), datatype || source._datatype);
	    }
	  }

	  function _createFromArray(matrix, data, datatype) {
	    // initialize fields
	    matrix._values = [];
	    matrix._index = [];
	    matrix._ptr = [];
	    matrix._datatype = datatype; // discover rows & columns, do not use math.size() to avoid looping array twice

	    var rows = data.length;
	    var columns = 0; // equal signature to use

	    var eq = equalScalar; // zero value

	    var zero = 0;

	    if (isString(datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar; // convert 0 to the same datatype

	      zero = typed.convert(0, datatype);
	    } // check we have rows (empty array)


	    if (rows > 0) {
	      // column index
	      var j = 0;

	      do {
	        // store pointer to values index
	        matrix._ptr.push(matrix._index.length); // loop rows


	        for (var i = 0; i < rows; i++) {
	          // current row
	          var row = data[i]; // check row is an array

	          if (isArray(row)) {
	            // update columns if needed (only on first column)
	            if (j === 0 && columns < row.length) {
	              columns = row.length;
	            } // check row has column


	            if (j < row.length) {
	              // value
	              var v = row[j]; // check value != 0

	              if (!eq(v, zero)) {
	                // store value
	                matrix._values.push(v); // index


	                matrix._index.push(i);
	              }
	            }
	          } else {
	            // update columns if needed (only on first column)
	            if (j === 0 && columns < 1) {
	              columns = 1;
	            } // check value != 0 (row is a scalar)


	            if (!eq(row, zero)) {
	              // store value
	              matrix._values.push(row); // index


	              matrix._index.push(i);
	            }
	          }
	        } // increment index


	        j++;
	      } while (j < columns);
	    } // store number of values in ptr


	    matrix._ptr.push(matrix._index.length); // size


	    matrix._size = [rows, columns];
	  }

	  SparseMatrix.prototype = new Matrix();
	  /**
	   * Create a new SparseMatrix
	   */

	  SparseMatrix.prototype.createSparseMatrix = function (data, datatype) {
	    return new SparseMatrix(data, datatype);
	  };
	  /**
	   * Attach type information
	   */


	  SparseMatrix.prototype.type = 'SparseMatrix';
	  SparseMatrix.prototype.isSparseMatrix = true;
	  /**
	   * Get the matrix type
	   *
	   * Usage:
	   *    const matrixType = matrix.getDataType()  // retrieves the matrix type
	   *
	   * @memberOf SparseMatrix
	   * @return {string}   type information; if multiple types are found from the Matrix, it will return "mixed"
	   */

	  SparseMatrix.prototype.getDataType = function () {
	    return getArrayDataType(this._values, typeOf);
	  };
	  /**
	   * Get the storage format used by the matrix.
	   *
	   * Usage:
	   *     const format = matrix.storage()   // retrieve storage format
	   *
	   * @memberof SparseMatrix
	   * @return {string}           The storage format.
	   */


	  SparseMatrix.prototype.storage = function () {
	    return 'sparse';
	  };
	  /**
	   * Get the datatype of the data stored in the matrix.
	   *
	   * Usage:
	   *     const format = matrix.datatype()    // retrieve matrix datatype
	   *
	   * @memberof SparseMatrix
	   * @return {string}           The datatype.
	   */


	  SparseMatrix.prototype.datatype = function () {
	    return this._datatype;
	  };
	  /**
	   * Create a new SparseMatrix
	   * @memberof SparseMatrix
	   * @param {Array} data
	   * @param {string} [datatype]
	   */


	  SparseMatrix.prototype.create = function (data, datatype) {
	    return new SparseMatrix(data, datatype);
	  };
	  /**
	   * Get the matrix density.
	   *
	   * Usage:
	   *     const density = matrix.density()                   // retrieve matrix density
	   *
	   * @memberof SparseMatrix
	   * @return {number}           The matrix density.
	   */


	  SparseMatrix.prototype.density = function () {
	    // rows & columns
	    var rows = this._size[0];
	    var columns = this._size[1]; // calculate density

	    return rows !== 0 && columns !== 0 ? this._index.length / (rows * columns) : 0;
	  };
	  /**
	   * Get a subset of the matrix, or replace a subset of the matrix.
	   *
	   * Usage:
	   *     const subset = matrix.subset(index)               // retrieve subset
	   *     const value = matrix.subset(index, replacement)   // replace subset
	   *
	   * @memberof SparseMatrix
	   * @param {Index} index
	   * @param {Array | Matrix | *} [replacement]
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be filled with zeros.
	   */


	  SparseMatrix.prototype.subset = function (index, replacement, defaultValue) {
	    // check it is a pattern matrix
	    if (!this._values) {
	      throw new Error('Cannot invoke subset on a Pattern only matrix');
	    } // check arguments


	    switch (arguments.length) {
	      case 1:
	        return _getsubset(this, index);
	      // intentional fall through

	      case 2:
	      case 3:
	        return _setsubset(this, index, replacement, defaultValue);

	      default:
	        throw new SyntaxError('Wrong number of arguments');
	    }
	  };

	  function _getsubset(matrix, idx) {
	    // check idx
	    if (!isIndex(idx)) {
	      throw new TypeError('Invalid index');
	    }

	    var isScalar = idx.isScalar();

	    if (isScalar) {
	      // return a scalar
	      return matrix.get(idx.min());
	    } // validate dimensions


	    var size = idx.size();

	    if (size.length !== matrix._size.length) {
	      throw new DimensionError(size.length, matrix._size.length);
	    } // vars


	    var i, ii, k, kk; // validate if any of the ranges in the index is out of range

	    var min = idx.min();
	    var max = idx.max();

	    for (i = 0, ii = matrix._size.length; i < ii; i++) {
	      validateIndex(min[i], matrix._size[i]);
	      validateIndex(max[i], matrix._size[i]);
	    } // matrix arrays


	    var mvalues = matrix._values;
	    var mindex = matrix._index;
	    var mptr = matrix._ptr; // rows & columns dimensions for result matrix

	    var rows = idx.dimension(0);
	    var columns = idx.dimension(1); // workspace & permutation vector

	    var w = [];
	    var pv = []; // loop rows in resulting matrix

	    rows.forEach(function (i, r) {
	      // update permutation vector
	      pv[i] = r[0]; // mark i in workspace

	      w[i] = true;
	    }); // result matrix arrays

	    var values = mvalues ? [] : undefined;
	    var index = [];
	    var ptr = []; // loop columns in result matrix

	    columns.forEach(function (j) {
	      // update ptr
	      ptr.push(index.length); // loop values in column j

	      for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {
	        // row
	        i = mindex[k]; // check row is in result matrix

	        if (w[i] === true) {
	          // push index
	          index.push(pv[i]); // check we need to process values

	          if (values) {
	            values.push(mvalues[k]);
	          }
	        }
	      }
	    }); // update ptr

	    ptr.push(index.length); // return matrix

	    return new SparseMatrix({
	      values: values,
	      index: index,
	      ptr: ptr,
	      size: size,
	      datatype: matrix._datatype
	    });
	  }

	  function _setsubset(matrix, index, submatrix, defaultValue) {
	    // check index
	    if (!index || index.isIndex !== true) {
	      throw new TypeError('Invalid index');
	    } // get index size and check whether the index contains a single value


	    var iSize = index.size();
	    var isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed

	    var sSize;

	    if (isMatrix(submatrix)) {
	      // submatrix size
	      sSize = submatrix.size(); // use array representation

	      submatrix = submatrix.toArray();
	    } else {
	      // get submatrix size (array, scalar)
	      sSize = arraySize(submatrix);
	    } // check index is a scalar


	    if (isScalar) {
	      // verify submatrix is a scalar
	      if (sSize.length !== 0) {
	        throw new TypeError('Scalar expected');
	      } // set value


	      matrix.set(index.min(), submatrix, defaultValue);
	    } else {
	      // validate dimensions, index size must be one or two dimensions
	      if (iSize.length !== 1 && iSize.length !== 2) {
	        throw new DimensionError(iSize.length, matrix._size.length, '<');
	      } // check submatrix and index have the same dimensions


	      if (sSize.length < iSize.length) {
	        // calculate number of missing outer dimensions
	        var i = 0;
	        var outer = 0;

	        while (iSize[i] === 1 && sSize[i] === 1) {
	          i++;
	        }

	        while (iSize[i] === 1) {
	          outer++;
	          i++;
	        } // unsqueeze both outer and inner dimensions


	        submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);
	      } // check whether the size of the submatrix matches the index size


	      if (!deepStrictEqual(iSize, sSize)) {
	        throw new DimensionError(iSize, sSize, '>');
	      } // offsets


	      var x0 = index.min()[0];
	      var y0 = index.min()[1]; // submatrix rows and columns

	      var m = sSize[0];
	      var n = sSize[1]; // loop submatrix

	      for (var x = 0; x < m; x++) {
	        // loop columns
	        for (var y = 0; y < n; y++) {
	          // value at i, j
	          var v = submatrix[x][y]; // invoke set (zero value will remove entry from matrix)

	          matrix.set([x + x0, y + y0], v, defaultValue);
	        }
	      }
	    }

	    return matrix;
	  }
	  /**
	   * Get a single element from the matrix.
	   * @memberof SparseMatrix
	   * @param {number[]} index   Zero-based index
	   * @return {*} value
	   */


	  SparseMatrix.prototype.get = function (index) {
	    if (!isArray(index)) {
	      throw new TypeError('Array expected');
	    }

	    if (index.length !== this._size.length) {
	      throw new DimensionError(index.length, this._size.length);
	    } // check it is a pattern matrix


	    if (!this._values) {
	      throw new Error('Cannot invoke get on a Pattern only matrix');
	    } // row and column


	    var i = index[0];
	    var j = index[1]; // check i, j are valid

	    validateIndex(i, this._size[0]);
	    validateIndex(j, this._size[1]); // find value index

	    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row


	    if (k < this._ptr[j + 1] && this._index[k] === i) {
	      return this._values[k];
	    }

	    return 0;
	  };
	  /**
	   * Replace a single element in the matrix.
	   * @memberof SparseMatrix
	   * @param {number[]} index   Zero-based index
	   * @param {*} v
	   * @param {*} [defaultValue]        Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be set to zero.
	   * @return {SparseMatrix} self
	   */


	  SparseMatrix.prototype.set = function (index, v, defaultValue) {
	    if (!isArray(index)) {
	      throw new TypeError('Array expected');
	    }

	    if (index.length !== this._size.length) {
	      throw new DimensionError(index.length, this._size.length);
	    } // check it is a pattern matrix


	    if (!this._values) {
	      throw new Error('Cannot invoke set on a Pattern only matrix');
	    } // row and column


	    var i = index[0];
	    var j = index[1]; // rows & columns

	    var rows = this._size[0];
	    var columns = this._size[1]; // equal signature to use

	    var eq = equalScalar; // zero value

	    var zero = 0;

	    if (isString(this._datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar; // convert 0 to the same datatype

	      zero = typed.convert(0, this._datatype);
	    } // check we need to resize matrix


	    if (i > rows - 1 || j > columns - 1) {
	      // resize matrix
	      _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue); // update rows & columns


	      rows = this._size[0];
	      columns = this._size[1];
	    } // check i, j are valid


	    validateIndex(i, rows);
	    validateIndex(j, columns); // find value index

	    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row


	    if (k < this._ptr[j + 1] && this._index[k] === i) {
	      // check value != 0
	      if (!eq(v, zero)) {
	        // update value
	        this._values[k] = v;
	      } else {
	        // remove value from matrix
	        _remove(k, j, this._values, this._index, this._ptr);
	      }
	    } else {
	      // insert value @ (i, j)
	      _insert(k, i, j, v, this._values, this._index, this._ptr);
	    }

	    return this;
	  };

	  function _getValueIndex(i, top, bottom, index) {
	    // check row is on the bottom side
	    if (bottom - top === 0) {
	      return bottom;
	    } // loop rows [top, bottom[


	    for (var r = top; r < bottom; r++) {
	      // check we found value index
	      if (index[r] === i) {
	        return r;
	      }
	    } // we did not find row


	    return top;
	  }

	  function _remove(k, j, values, index, ptr) {
	    // remove value @ k
	    values.splice(k, 1);
	    index.splice(k, 1); // update pointers

	    for (var x = j + 1; x < ptr.length; x++) {
	      ptr[x]--;
	    }
	  }

	  function _insert(k, i, j, v, values, index, ptr) {
	    // insert value
	    values.splice(k, 0, v); // update row for k

	    index.splice(k, 0, i); // update column pointers

	    for (var x = j + 1; x < ptr.length; x++) {
	      ptr[x]++;
	    }
	  }
	  /**
	   * Resize the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (resize in place).
	   *
	   * @memberof SparseMatrix
	   * @param {number[] | Matrix} size  The new size the matrix should have.
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
	   *                                  If not provided, the matrix elements will
	   *                                  be filled with zeros.
	   * @param {boolean} [copy]          Return a resized copy of the matrix
	   *
	   * @return {Matrix}                 The resized matrix
	   */


	  SparseMatrix.prototype.resize = function (size, defaultValue, copy) {
	    // validate arguments
	    if (!isCollection(size)) {
	      throw new TypeError('Array or Matrix expected');
	    } // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector


	    var sizeArray = size.valueOf().map(function (value) {
	      return Array.isArray(value) && value.length === 1 ? value[0] : value;
	    });

	    if (sizeArray.length !== 2) {
	      throw new Error('Only two dimensions matrix are supported');
	    } // check sizes


	    sizeArray.forEach(function (value) {
	      if (!isNumber(value) || !isInteger(value) || value < 0) {
	        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format$2(sizeArray) + ')');
	      }
	    }); // matrix to resize

	    var m = copy ? this.clone() : this; // resize matrix

	    return _resize(m, sizeArray[0], sizeArray[1], defaultValue);
	  };

	  function _resize(matrix, rows, columns, defaultValue) {
	    // value to insert at the time of growing matrix
	    var value = defaultValue || 0; // equal signature to use

	    var eq = equalScalar; // zero value

	    var zero = 0;

	    if (isString(matrix._datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar; // convert 0 to the same datatype

	      zero = typed.convert(0, matrix._datatype); // convert value to the same datatype

	      value = typed.convert(value, matrix._datatype);
	    } // should we insert the value?


	    var ins = !eq(value, zero); // old columns and rows

	    var r = matrix._size[0];
	    var c = matrix._size[1];
	    var i, j, k; // check we need to increase columns

	    if (columns > c) {
	      // loop new columns
	      for (j = c; j < columns; j++) {
	        // update matrix._ptr for current column
	        matrix._ptr[j] = matrix._values.length; // check we need to insert matrix._values

	        if (ins) {
	          // loop rows
	          for (i = 0; i < r; i++) {
	            // add new matrix._values
	            matrix._values.push(value); // update matrix._index


	            matrix._index.push(i);
	          }
	        }
	      } // store number of matrix._values in matrix._ptr


	      matrix._ptr[columns] = matrix._values.length;
	    } else if (columns < c) {
	      // truncate matrix._ptr
	      matrix._ptr.splice(columns + 1, c - columns); // truncate matrix._values and matrix._index


	      matrix._values.splice(matrix._ptr[columns], matrix._values.length);

	      matrix._index.splice(matrix._ptr[columns], matrix._index.length);
	    } // update columns


	    c = columns; // check we need to increase rows

	    if (rows > r) {
	      // check we have to insert values
	      if (ins) {
	        // inserts
	        var n = 0; // loop columns

	        for (j = 0; j < c; j++) {
	          // update matrix._ptr for current column
	          matrix._ptr[j] = matrix._ptr[j] + n; // where to insert matrix._values

	          k = matrix._ptr[j + 1] + n; // pointer

	          var p = 0; // loop new rows, initialize pointer

	          for (i = r; i < rows; i++, p++) {
	            // add value
	            matrix._values.splice(k + p, 0, value); // update matrix._index


	            matrix._index.splice(k + p, 0, i); // increment inserts


	            n++;
	          }
	        } // store number of matrix._values in matrix._ptr


	        matrix._ptr[c] = matrix._values.length;
	      }
	    } else if (rows < r) {
	      // deletes
	      var d = 0; // loop columns

	      for (j = 0; j < c; j++) {
	        // update matrix._ptr for current column
	        matrix._ptr[j] = matrix._ptr[j] - d; // where matrix._values start for next column

	        var k0 = matrix._ptr[j];
	        var k1 = matrix._ptr[j + 1] - d; // loop matrix._index

	        for (k = k0; k < k1; k++) {
	          // row
	          i = matrix._index[k]; // check we need to delete value and matrix._index

	          if (i > rows - 1) {
	            // remove value
	            matrix._values.splice(k, 1); // remove item from matrix._index


	            matrix._index.splice(k, 1); // increase deletes


	            d++;
	          }
	        }
	      } // update matrix._ptr for current column


	      matrix._ptr[j] = matrix._values.length;
	    } // update matrix._size


	    matrix._size[0] = rows;
	    matrix._size[1] = columns; // return matrix

	    return matrix;
	  }
	  /**
	   * Reshape the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (reshape in place).
	   *
	   * NOTE: This might be better suited to copy by default, instead of modifying
	   *       in place. For now, it operates in place to remain consistent with
	   *       resize().
	   *
	   * @memberof SparseMatrix
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {boolean} [copy]          Return a reshaped copy of the matrix
	   *
	   * @return {Matrix}                 The reshaped matrix
	   */


	  SparseMatrix.prototype.reshape = function (size, copy) {
	    // validate arguments
	    if (!isArray(size)) {
	      throw new TypeError('Array expected');
	    }

	    if (size.length !== 2) {
	      throw new Error('Sparse matrices can only be reshaped in two dimensions');
	    } // check sizes


	    size.forEach(function (value) {
	      if (!isNumber(value) || !isInteger(value) || value < 0) {
	        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format$2(size) + ')');
	      }
	    }); // m * n must not change

	    if (this._size[0] * this._size[1] !== size[0] * size[1]) {
	      throw new Error('Reshaping sparse matrix will result in the wrong number of elements');
	    } // matrix to reshape


	    var m = copy ? this.clone() : this; // return unchanged if the same shape

	    if (this._size[0] === size[0] && this._size[1] === size[1]) {
	      return m;
	    } // Convert to COO format (generate a column index)


	    var colIndex = [];

	    for (var i = 0; i < m._ptr.length; i++) {
	      for (var j = 0; j < m._ptr[i + 1] - m._ptr[i]; j++) {
	        colIndex.push(i);
	      }
	    } // Clone the values array


	    var values = m._values.slice(); // Clone the row index array


	    var rowIndex = m._index.slice(); // Transform the (row, column) indices


	    for (var _i = 0; _i < m._index.length; _i++) {
	      var r1 = rowIndex[_i];
	      var c1 = colIndex[_i];
	      var flat = r1 * m._size[1] + c1;
	      colIndex[_i] = flat % size[1];
	      rowIndex[_i] = Math.floor(flat / size[1]);
	    } // Now reshaping is supposed to preserve the row-major order, BUT these sparse matrices are stored
	    // in column-major order, so we have to reorder the value array now. One option is to use a multisort,
	    // sorting several arrays based on some other array.
	    // OR, we could easily just:
	    // 1. Remove all values from the matrix


	    m._values.length = 0;
	    m._index.length = 0;
	    m._ptr.length = size[1] + 1;
	    m._size = size.slice();

	    for (var _i2 = 0; _i2 < m._ptr.length; _i2++) {
	      m._ptr[_i2] = 0;
	    } // 2. Re-insert all elements in the proper order (simplified code from SparseMatrix.prototype.set)
	    // This step is probably the most time-consuming


	    for (var h = 0; h < values.length; h++) {
	      var _i3 = rowIndex[h];
	      var _j = colIndex[h];
	      var v = values[h];

	      var k = _getValueIndex(_i3, m._ptr[_j], m._ptr[_j + 1], m._index);

	      _insert(k, _i3, _j, v, m._values, m._index, m._ptr);
	    } // The value indices are inserted out of order, but apparently that's... still OK?


	    return m;
	  };
	  /**
	   * Create a clone of the matrix
	   * @memberof SparseMatrix
	   * @return {SparseMatrix} clone
	   */


	  SparseMatrix.prototype.clone = function () {
	    var m = new SparseMatrix({
	      values: this._values ? clone(this._values) : undefined,
	      index: clone(this._index),
	      ptr: clone(this._ptr),
	      size: clone(this._size),
	      datatype: this._datatype
	    });
	    return m;
	  };
	  /**
	   * Retrieve the size of the matrix.
	   * @memberof SparseMatrix
	   * @returns {number[]} size
	   */


	  SparseMatrix.prototype.size = function () {
	    return this._size.slice(0); // copy the Array
	  };
	  /**
	   * Create a new matrix with the results of the callback function executed on
	   * each entry of the matrix.
	   * @memberof SparseMatrix
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
	   *
	   * @return {SparseMatrix} matrix
	   */


	  SparseMatrix.prototype.map = function (callback, skipZeros) {
	    // check it is a pattern matrix
	    if (!this._values) {
	      throw new Error('Cannot invoke map on a Pattern only matrix');
	    } // matrix instance


	    var me = this; // rows and columns

	    var rows = this._size[0];
	    var columns = this._size[1]; // invoke callback

	    var invoke = function invoke(v, i, j) {
	      // invoke callback
	      return callback(v, [i, j], me);
	    }; // invoke _map


	    return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);
	  };
	  /**
	   * Create a new matrix with the results of the callback function executed on the interval
	   * [minRow..maxRow, minColumn..maxColumn].
	   */


	  function _map(matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {
	    // result arrays
	    var values = [];
	    var index = [];
	    var ptr = []; // equal signature to use

	    var eq = equalScalar; // zero value

	    var zero = 0;

	    if (isString(matrix._datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar; // convert 0 to the same datatype

	      zero = typed.convert(0, matrix._datatype);
	    } // invoke callback


	    var invoke = function invoke(v, x, y) {
	      // invoke callback
	      v = callback(v, x, y); // check value != 0

	      if (!eq(v, zero)) {
	        // store value
	        values.push(v); // index

	        index.push(x);
	      }
	    }; // loop columns


	    for (var j = minColumn; j <= maxColumn; j++) {
	      // store pointer to values index
	      ptr.push(values.length); // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]

	      var k0 = matrix._ptr[j];
	      var k1 = matrix._ptr[j + 1];

	      if (skipZeros) {
	        // loop k within [k0, k1[
	        for (var k = k0; k < k1; k++) {
	          // row index
	          var i = matrix._index[k]; // check i is in range

	          if (i >= minRow && i <= maxRow) {
	            // value @ k
	            invoke(matrix._values[k], i - minRow, j - minColumn);
	          }
	        }
	      } else {
	        // create a cache holding all defined values
	        var _values = {};

	        for (var _k = k0; _k < k1; _k++) {
	          var _i4 = matrix._index[_k];
	          _values[_i4] = matrix._values[_k];
	        } // loop over all rows (indexes can be unordered so we can't use that),
	        // and either read the value or zero


	        for (var _i5 = minRow; _i5 <= maxRow; _i5++) {
	          var value = _i5 in _values ? _values[_i5] : 0;
	          invoke(value, _i5 - minRow, j - minColumn);
	        }
	      }
	    } // store number of values in ptr


	    ptr.push(values.length); // return sparse matrix

	    return new SparseMatrix({
	      values: values,
	      index: index,
	      ptr: ptr,
	      size: [maxRow - minRow + 1, maxColumn - minColumn + 1]
	    });
	  }
	  /**
	   * Execute a callback function on each entry of the matrix.
	   * @memberof SparseMatrix
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
	   */


	  SparseMatrix.prototype.forEach = function (callback, skipZeros) {
	    // check it is a pattern matrix
	    if (!this._values) {
	      throw new Error('Cannot invoke forEach on a Pattern only matrix');
	    } // matrix instance


	    var me = this; // rows and columns

	    var rows = this._size[0];
	    var columns = this._size[1]; // loop columns

	    for (var j = 0; j < columns; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = this._ptr[j];
	      var k1 = this._ptr[j + 1];

	      if (skipZeros) {
	        // loop k within [k0, k1[
	        for (var k = k0; k < k1; k++) {
	          // row index
	          var i = this._index[k]; // value @ k

	          callback(this._values[k], [i, j], me);
	        }
	      } else {
	        // create a cache holding all defined values
	        var values = {};

	        for (var _k2 = k0; _k2 < k1; _k2++) {
	          var _i6 = this._index[_k2];
	          values[_i6] = this._values[_k2];
	        } // loop over all rows (indexes can be unordered so we can't use that),
	        // and either read the value or zero


	        for (var _i7 = 0; _i7 < rows; _i7++) {
	          var value = _i7 in values ? values[_i7] : 0;
	          callback(value, [_i7, j], me);
	        }
	      }
	    }
	  };
	  /**
	   * Create an Array with a copy of the data of the SparseMatrix
	   * @memberof SparseMatrix
	   * @returns {Array} array
	   */


	  SparseMatrix.prototype.toArray = function () {
	    return _toArray(this._values, this._index, this._ptr, this._size, true);
	  };
	  /**
	   * Get the primitive value of the SparseMatrix: a two dimensions array
	   * @memberof SparseMatrix
	   * @returns {Array} array
	   */


	  SparseMatrix.prototype.valueOf = function () {
	    return _toArray(this._values, this._index, this._ptr, this._size, false);
	  };

	  function _toArray(values, index, ptr, size, copy) {
	    // rows and columns
	    var rows = size[0];
	    var columns = size[1]; // result

	    var a = []; // vars

	    var i, j; // initialize array

	    for (i = 0; i < rows; i++) {
	      a[i] = [];

	      for (j = 0; j < columns; j++) {
	        a[i][j] = 0;
	      }
	    } // loop columns


	    for (j = 0; j < columns; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = ptr[j];
	      var k1 = ptr[j + 1]; // loop k within [k0, k1[

	      for (var k = k0; k < k1; k++) {
	        // row index
	        i = index[k]; // set value (use one for pattern matrix)

	        a[i][j] = values ? copy ? clone(values[k]) : values[k] : 1;
	      }
	    }

	    return a;
	  }
	  /**
	   * Get a string representation of the matrix, with optional formatting options.
	   * @memberof SparseMatrix
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @returns {string} str
	   */


	  SparseMatrix.prototype.format = function (options) {
	    // rows and columns
	    var rows = this._size[0];
	    var columns = this._size[1]; // density

	    var density = this.density(); // rows & columns

	    var str = 'Sparse Matrix [' + format$2(rows, options) + ' x ' + format$2(columns, options) + '] density: ' + format$2(density, options) + '\n'; // loop columns

	    for (var j = 0; j < columns; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = this._ptr[j];
	      var k1 = this._ptr[j + 1]; // loop k within [k0, k1[

	      for (var k = k0; k < k1; k++) {
	        // row index
	        var i = this._index[k]; // append value

	        str += '\n    (' + format$2(i, options) + ', ' + format$2(j, options) + ') ==> ' + (this._values ? format$2(this._values[k], options) : 'X');
	      }
	    }

	    return str;
	  };
	  /**
	   * Get a string representation of the matrix
	   * @memberof SparseMatrix
	   * @returns {string} str
	   */


	  SparseMatrix.prototype.toString = function () {
	    return format$2(this.toArray());
	  };
	  /**
	   * Get a JSON representation of the matrix
	   * @memberof SparseMatrix
	   * @returns {Object}
	   */


	  SparseMatrix.prototype.toJSON = function () {
	    return {
	      mathjs: 'SparseMatrix',
	      values: this._values,
	      index: this._index,
	      ptr: this._ptr,
	      size: this._size,
	      datatype: this._datatype
	    };
	  };
	  /**
	   * Get the kth Matrix diagonal.
	   *
	   * @memberof SparseMatrix
	   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
	   *
	   * @returns {Matrix}                     The matrix vector with the diagonal values.
	   */


	  SparseMatrix.prototype.diagonal = function (k) {
	    // validate k if any
	    if (k) {
	      // convert BigNumber to a number
	      if (isBigNumber(k)) {
	        k = k.toNumber();
	      } // is must be an integer


	      if (!isNumber(k) || !isInteger(k)) {
	        throw new TypeError('The parameter k must be an integer number');
	      }
	    } else {
	      // default value
	      k = 0;
	    }

	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0; // rows & columns

	    var rows = this._size[0];
	    var columns = this._size[1]; // number diagonal values

	    var n = Math.min(rows - kSub, columns - kSuper); // diagonal arrays

	    var values = [];
	    var index = [];
	    var ptr = []; // initial ptr value

	    ptr[0] = 0; // loop columns

	    for (var j = kSuper; j < columns && values.length < n; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = this._ptr[j];
	      var k1 = this._ptr[j + 1]; // loop x within [k0, k1[

	      for (var x = k0; x < k1; x++) {
	        // row index
	        var i = this._index[x]; // check row

	        if (i === j - kSuper + kSub) {
	          // value on this column
	          values.push(this._values[x]); // store row

	          index[values.length - 1] = i - kSub; // exit loop

	          break;
	        }
	      }
	    } // close ptr


	    ptr.push(values.length); // return matrix

	    return new SparseMatrix({
	      values: values,
	      index: index,
	      ptr: ptr,
	      size: [n, 1]
	    });
	  };
	  /**
	   * Generate a matrix from a JSON object
	   * @memberof SparseMatrix
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "SparseMatrix", "values": [], "index": [], "ptr": [], "size": []}`,
	   *                       where mathjs is optional
	   * @returns {SparseMatrix}
	   */


	  SparseMatrix.fromJSON = function (json) {
	    return new SparseMatrix(json);
	  };
	  /**
	   * Create a diagonal matrix.
	   *
	   * @memberof SparseMatrix
	   * @param {Array} size                       The matrix size.
	   * @param {number | Array | Matrix } value   The values for the diagonal.
	   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.
	   * @param {number} [defaultValue]            The default value for non-diagonal
	   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.
	   *
	   * @returns {SparseMatrix}
	   */


	  SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {
	    if (!isArray(size)) {
	      throw new TypeError('Array expected, size parameter');
	    }

	    if (size.length !== 2) {
	      throw new Error('Only two dimensions matrix are supported');
	    } // map size & validate


	    size = size.map(function (s) {
	      // check it is a big number
	      if (isBigNumber(s)) {
	        // convert it
	        s = s.toNumber();
	      } // validate arguments


	      if (!isNumber(s) || !isInteger(s) || s < 1) {
	        throw new Error('Size values must be positive integers');
	      }

	      return s;
	    }); // validate k if any

	    if (k) {
	      // convert BigNumber to a number
	      if (isBigNumber(k)) {
	        k = k.toNumber();
	      } // is must be an integer


	      if (!isNumber(k) || !isInteger(k)) {
	        throw new TypeError('The parameter k must be an integer number');
	      }
	    } else {
	      // default value
	      k = 0;
	    } // equal signature to use


	    var eq = equalScalar; // zero value

	    var zero = 0;

	    if (isString(datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar; // convert 0 to the same datatype

	      zero = typed.convert(0, datatype);
	    }

	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0; // rows and columns

	    var rows = size[0];
	    var columns = size[1]; // number of non-zero items

	    var n = Math.min(rows - kSub, columns - kSuper); // value extraction function

	    var _value; // check value


	    if (isArray(value)) {
	      // validate array
	      if (value.length !== n) {
	        // number of values in array must be n
	        throw new Error('Invalid value array length');
	      } // define function


	      _value = function _value(i) {
	        // return value @ i
	        return value[i];
	      };
	    } else if (isMatrix(value)) {
	      // matrix size
	      var ms = value.size(); // validate matrix

	      if (ms.length !== 1 || ms[0] !== n) {
	        // number of values in array must be n
	        throw new Error('Invalid matrix length');
	      } // define function


	      _value = function _value(i) {
	        // return value @ i
	        return value.get([i]);
	      };
	    } else {
	      // define function
	      _value = function _value() {
	        // return value
	        return value;
	      };
	    } // create arrays


	    var values = [];
	    var index = [];
	    var ptr = []; // loop items

	    for (var j = 0; j < columns; j++) {
	      // number of rows with value
	      ptr.push(values.length); // diagonal index

	      var i = j - kSuper; // check we need to set diagonal value

	      if (i >= 0 && i < n) {
	        // get value @ i
	        var v = _value(i); // check for zero


	        if (!eq(v, zero)) {
	          // column
	          index.push(i + kSub); // add value

	          values.push(v);
	        }
	      }
	    } // last value should be number of values


	    ptr.push(values.length); // create SparseMatrix

	    return new SparseMatrix({
	      values: values,
	      index: index,
	      ptr: ptr,
	      size: [rows, columns]
	    });
	  };
	  /**
	   * Swap rows i and j in Matrix.
	   *
	   * @memberof SparseMatrix
	   * @param {number} i       Matrix row index 1
	   * @param {number} j       Matrix row index 2
	   *
	   * @return {Matrix}        The matrix reference
	   */


	  SparseMatrix.prototype.swapRows = function (i, j) {
	    // check index
	    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {
	      throw new Error('Row index must be positive integers');
	    } // check dimensions


	    if (this._size.length !== 2) {
	      throw new Error('Only two dimensional matrix is supported');
	    } // validate index


	    validateIndex(i, this._size[0]);
	    validateIndex(j, this._size[0]); // swap rows

	    SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr); // return current instance


	    return this;
	  };
	  /**
	   * Loop rows with data in column j.
	   *
	   * @param {number} j            Column
	   * @param {Array} values        Matrix values
	   * @param {Array} index         Matrix row indeces
	   * @param {Array} ptr           Matrix column pointers
	   * @param {Function} callback   Callback function invoked for every row in column j
	   */


	  SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {
	    // indeces for column j
	    var k0 = ptr[j];
	    var k1 = ptr[j + 1]; // loop

	    for (var k = k0; k < k1; k++) {
	      // invoke callback
	      callback(index[k], values[k]);
	    }
	  };
	  /**
	   * Swap rows x and y in Sparse Matrix data structures.
	   *
	   * @param {number} x         Matrix row index 1
	   * @param {number} y         Matrix row index 2
	   * @param {number} columns   Number of columns in matrix
	   * @param {Array} values     Matrix values
	   * @param {Array} index      Matrix row indeces
	   * @param {Array} ptr        Matrix column pointers
	   */


	  SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {
	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = ptr[j];
	      var k1 = ptr[j + 1]; // find value index @ x

	      var kx = _getValueIndex(x, k0, k1, index); // find value index @ x


	      var ky = _getValueIndex(y, k0, k1, index); // check both rows exist in matrix


	      if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {
	        // swap values (check for pattern matrix)
	        if (values) {
	          var v = values[kx];
	          values[kx] = values[ky];
	          values[ky] = v;
	        } // next column


	        continue;
	      } // check x row exist & no y row


	      if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {
	        // value @ x (check for pattern matrix)
	        var vx = values ? values[kx] : undefined; // insert value @ y

	        index.splice(ky, 0, y);

	        if (values) {
	          values.splice(ky, 0, vx);
	        } // remove value @ x (adjust array index if needed)


	        index.splice(ky <= kx ? kx + 1 : kx, 1);

	        if (values) {
	          values.splice(ky <= kx ? kx + 1 : kx, 1);
	        } // next column


	        continue;
	      } // check y row exist & no x row


	      if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {
	        // value @ y (check for pattern matrix)
	        var vy = values ? values[ky] : undefined; // insert value @ x

	        index.splice(kx, 0, x);

	        if (values) {
	          values.splice(kx, 0, vy);
	        } // remove value @ y (adjust array index if needed)


	        index.splice(kx <= ky ? ky + 1 : ky, 1);

	        if (values) {
	          values.splice(kx <= ky ? ky + 1 : ky, 1);
	        }
	      }
	    }
	  };

	  return SparseMatrix;
	}, {
	  isClass: true
	});

	var name$7 = 'number';
	var dependencies$8 = ['typed'];
	var createNumber = /* #__PURE__ */factory(name$7, dependencies$8, function (_ref) {
	  var typed = _ref.typed;
	  /**
	   * Create a number or convert a string, boolean, or unit to a number.
	   * When value is a matrix, all elements will be converted to number.
	   *
	   * Syntax:
	   *
	   *    math.number(value)
	   *    math.number(unit, valuelessUnit)
	   *
	   * Examples:
	   *
	   *    math.number(2)                         // returns number 2
	   *    math.number('7.2')                     // returns number 7.2
	   *    math.number(true)                      // returns number 1
	   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]
	   *    math.number(math.unit('52cm'), 'm')    // returns 0.52
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, index, matrix, string, unit
	   *
	   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted
	   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number
	   * @return {number | Array | Matrix} The created number
	   */

	  var number = typed('number', {
	    '': function _() {
	      return 0;
	    },
	    number: function number(x) {
	      return x;
	    },
	    string: function string(x) {
	      if (x === 'NaN') return NaN;
	      var num = Number(x);

	      if (isNaN(num)) {
	        throw new SyntaxError('String "' + x + '" is no valid number');
	      }

	      return num;
	    },
	    BigNumber: function BigNumber(x) {
	      return x.toNumber();
	    },
	    Fraction: function Fraction(x) {
	      return x.valueOf();
	    },
	    Unit: function Unit(x) {
	      throw new Error('Second argument with valueless unit expected');
	    },
	    "null": function _null(x) {
	      return 0;
	    },
	    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {
	      return unit.toNumber(valuelessUnit);
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, this);
	    }
	  }); // reviver function to parse a JSON object like:
	  //
	  //     {"mathjs":"number","value":"2.3"}
	  //
	  // into a number 2.3

	  number.fromJSON = function (json) {
	    return parseFloat(json.value);
	  };

	  return number;
	});

	var name$8 = 'bignumber';
	var dependencies$9 = ['typed', 'BigNumber'];
	var createBignumber = /* #__PURE__ */factory(name$8, dependencies$9, function (_ref) {
	  var typed = _ref.typed,
	      BigNumber = _ref.BigNumber;
	  /**
	   * Create a BigNumber, which can store numbers with arbitrary precision.
	   * When a matrix is provided, all elements will be converted to BigNumber.
	   *
	   * Syntax:
	   *
	   *    math.bignumber(x)
	   *
	   * Examples:
	   *
	   *    0.1 + 0.2                                  // returns number 0.30000000000000004
	   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3
	   *
	   *
	   *    7.2e500                                    // returns number Infinity
	   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500
	   *
	   * See also:
	   *
	   *    boolean, complex, index, matrix, string, unit
	   *
	   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,
	   *                                                    0 by default.
	   * @returns {BigNumber} The created bignumber
	   */

	  return typed('bignumber', {
	    '': function _() {
	      return new BigNumber(0);
	    },
	    number: function number(x) {
	      // convert to string to prevent errors in case of >15 digits
	      return new BigNumber(x + '');
	    },
	    string: function string(x) {
	      return new BigNumber(x);
	    },
	    BigNumber: function BigNumber(x) {
	      // we assume a BigNumber is immutable
	      return x;
	    },
	    Fraction: function Fraction(x) {
	      return new BigNumber(x.n).div(x.d).times(x.s);
	    },
	    "null": function _null(x) {
	      return new BigNumber(0);
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, this);
	    }
	  });
	});

	var name$9 = 'fraction';
	var dependencies$a = ['typed', 'Fraction'];
	var createFraction = /* #__PURE__ */factory(name$9, dependencies$a, function (_ref) {
	  var typed = _ref.typed,
	      Fraction = _ref.Fraction;
	  /**
	   * Create a fraction convert a value to a fraction.
	   *
	   * Syntax:
	   *     math.fraction(numerator, denominator)
	   *     math.fraction({n: numerator, d: denominator})
	   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries
	   *                                                   into fractions
	   *
	   * Examples:
	   *
	   *     math.fraction(1, 3)
	   *     math.fraction('2/3')
	   *     math.fraction({n: 2, d: 3})
	   *     math.fraction([0.2, 0.25, 1.25])
	   *
	   * See also:
	   *
	   *    bignumber, number, string, unit
	   *
	   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]
	   *            Arguments specifying the numerator and denominator of
	   *            the fraction
	   * @return {Fraction | Array | Matrix} Returns a fraction
	   */

	  return typed('fraction', {
	    number: function number(x) {
	      if (!isFinite(x) || isNaN(x)) {
	        throw new Error(x + ' cannot be represented as a fraction');
	      }

	      return new Fraction(x);
	    },
	    string: function string(x) {
	      return new Fraction(x);
	    },
	    'number, number': function numberNumber(numerator, denominator) {
	      return new Fraction(numerator, denominator);
	    },
	    "null": function _null(x) {
	      return new Fraction(0);
	    },
	    BigNumber: function BigNumber(x) {
	      return new Fraction(x.toString());
	    },
	    Fraction: function Fraction(x) {
	      return x; // fractions are immutable
	    },
	    Object: function Object(x) {
	      return new Fraction(x);
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, this);
	    }
	  });
	});

	var name$a = 'matrix';
	var dependencies$b = ['typed', 'Matrix', 'DenseMatrix', 'SparseMatrix'];
	var createMatrix = /* #__PURE__ */factory(name$a, dependencies$b, function (_ref) {
	  var typed = _ref.typed,
	      Matrix = _ref.Matrix,
	      DenseMatrix = _ref.DenseMatrix,
	      SparseMatrix = _ref.SparseMatrix;
	  /**
	   * Create a Matrix. The function creates a new `math.Matrix` object from
	   * an `Array`. A Matrix has utility functions to manipulate the data in the
	   * matrix, like getting the size and getting or setting values in the matrix.
	   * Supported storage formats are 'dense' and 'sparse'.
	   *
	   * Syntax:
	   *
	   *    math.matrix()                         // creates an empty matrix using default storage format (dense).
	   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).
	   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.
	   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.
	   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.
	   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.
	   *
	   * Examples:
	   *
	   *    let m = math.matrix([[1, 2], [3, 4]])
	   *    m.size()                        // Array [2, 2]
	   *    m.resize([3, 2], 5)
	   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]
	   *    m.get([1, 0])                    // number 3
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, index, number, string, unit, sparse
	   *
	   * @param {Array | Matrix} [data]    A multi dimensional array
	   * @param {string} [format]          The Matrix storage format
	   *
	   * @return {Matrix} The created matrix
	   */

	  return typed(name$a, {
	    '': function _() {
	      return _create([]);
	    },
	    string: function string(format) {
	      return _create([], format);
	    },
	    'string, string': function stringString(format, datatype) {
	      return _create([], format, datatype);
	    },
	    Array: function Array(data) {
	      return _create(data);
	    },
	    Matrix: function Matrix(data) {
	      return _create(data, data.storage());
	    },
	    'Array | Matrix, string': _create,
	    'Array | Matrix, string, string': _create
	  });
	  /**
	   * Create a new Matrix with given storage format
	   * @param {Array} data
	   * @param {string} [format]
	   * @param {string} [datatype]
	   * @returns {Matrix} Returns a new Matrix
	   * @private
	   */

	  function _create(data, format, datatype) {
	    // get storage format constructor
	    if (format === 'dense' || format === 'default' || format === undefined) {
	      return new DenseMatrix(data, datatype);
	    }

	    if (format === 'sparse') {
	      return new SparseMatrix(data, datatype);
	    }

	    throw new TypeError('Unknown matrix type ' + JSON.stringify(format) + '.');
	  }
	});

	var name$b = 'unaryMinus';
	var dependencies$c = ['typed'];
	var createUnaryMinus = /* #__PURE__ */factory(name$b, dependencies$c, function (_ref) {
	  var typed = _ref.typed;
	  /**
	   * Inverse the sign of a value, apply a unary minus operation.
	   *
	   * For matrices, the function is evaluated element wise. Boolean values and
	   * strings will be converted to a number. For complex numbers, both real and
	   * complex value are inverted.
	   *
	   * Syntax:
	   *
	   *    math.unaryMinus(x)
	   *
	   * Examples:
	   *
	   *    math.unaryMinus(3.5)      // returns -3.5
	   *    math.unaryMinus(-4.2)     // returns 4.2
	   *
	   * See also:
	   *
	   *    add, subtract, unaryPlus
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.
	   */

	  return typed(name$b, {
	    number: unaryMinusNumber,
	    Complex: function Complex(x) {
	      return x.neg();
	    },
	    BigNumber: function BigNumber(x) {
	      return x.neg();
	    },
	    Fraction: function Fraction(x) {
	      return x.neg();
	    },
	    Unit: function Unit(x) {
	      var res = x.clone();
	      res.value = this(x.value);
	      return res;
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since unaryMinus(0) = 0
	      return deepMap(x, this);
	    } // TODO: add support for string

	  });
	});

	var name$c = 'abs';
	var dependencies$d = ['typed'];
	var createAbs = /* #__PURE__ */factory(name$c, dependencies$d, function (_ref) {
	  var typed = _ref.typed;
	  /**
	   * Calculate the absolute value of a number. For matrices, the function is
	   * evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.abs(x)
	   *
	   * Examples:
	   *
	   *    math.abs(3.5)                // returns number 3.5
	   *    math.abs(-4.2)               // returns number 4.2
	   *
	   *    math.abs([3, -5, -1, 0, 2])  // returns Array [3, 5, 1, 0, 2]
	   *
	   * See also:
	   *
	   *    sign
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
	   *            A number or matrix for which to get the absolute value
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
	   *            Absolute value of `x`
	   */

	  return typed(name$c, {
	    number: absNumber,
	    Complex: function Complex(x) {
	      return x.abs();
	    },
	    BigNumber: function BigNumber(x) {
	      return x.abs();
	    },
	    Fraction: function Fraction(x) {
	      return x.abs();
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since abs(0) = 0
	      return deepMap(x, this);
	    },
	    Unit: function Unit(x) {
	      return x.abs();
	    }
	  });
	});

	var name$d = 'addScalar';
	var dependencies$e = ['typed'];
	var createAddScalar = /* #__PURE__ */factory(name$d, dependencies$e, function (_ref) {
	  var typed = _ref.typed;
	  /**
	   * Add two scalar values, `x + y`.
	   * This function is meant for internal use: it is used by the public function
	   * `add`
	   *
	   * This function does not support collections (Array or Matrix).
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add
	   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add
	   * @return {number | BigNumber | Fraction | Complex | Unit}     Sum of `x` and `y`
	   * @private
	   */

	  return typed(name$d, {
	    'number, number': addNumber,
	    'Complex, Complex': function ComplexComplex(x, y) {
	      return x.add(y);
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.plus(y);
	    },
	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.add(y);
	    },
	    'Unit, Unit': function UnitUnit(x, y) {
	      if (x.value === null || x.value === undefined) throw new Error('Parameter x contains a unit with undefined value');
	      if (y.value === null || y.value === undefined) throw new Error('Parameter y contains a unit with undefined value');
	      if (!x.equalBase(y)) throw new Error('Units do not match');
	      var res = x.clone();
	      res.value = this(res.value, y.value);
	      res.fixPrefix = false;
	      return res;
	    }
	  });
	});

	var name$e = 'algorithm01';
	var dependencies$f = ['typed'];
	var createAlgorithm01 = /* #__PURE__ */factory(name$e, dependencies$f, function (_ref) {
	  var typed = _ref.typed;
	  /**
	   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).
	   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
	   *
	   *
	   *          â  f(Dij, Sij)  ; S(i,j) !== 0
	   * C(i,j) = â¤
	   *          â  Dij          ; otherwise
	   *
	   *
	   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
	   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
	   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
	   */

	  return function algorithm1(denseMatrix, sparseMatrix, callback, inverse) {
	    // dense matrix arrays
	    var adata = denseMatrix._data;
	    var asize = denseMatrix._size;
	    var adt = denseMatrix._datatype; // sparse matrix arrays

	    var bvalues = sparseMatrix._values;
	    var bindex = sparseMatrix._index;
	    var bptr = sparseMatrix._ptr;
	    var bsize = sparseMatrix._size;
	    var bdt = sparseMatrix._datatype; // validate dimensions

	    if (asize.length !== bsize.length) {
	      throw new DimensionError(asize.length, bsize.length);
	    } // check rows & columns


	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	    } // sparse matrix cannot be a Pattern matrix


	    if (!bvalues) {
	      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
	    } // rows & columns


	    var rows = asize[0];
	    var columns = asize[1]; // process data types

	    var dt = typeof adt === 'string' && adt === bdt ? adt : undefined; // callback function

	    var cf = dt ? typed.find(callback, [dt, dt]) : callback; // vars

	    var i, j; // result (DenseMatrix)

	    var cdata = []; // initialize c

	    for (i = 0; i < rows; i++) {
	      cdata[i] = [];
	    } // workspace


	    var x = []; // marks indicating we have a value in x for a given column

	    var w = []; // loop columns in b

	    for (j = 0; j < columns; j++) {
	      // column mark
	      var mark = j + 1; // values in column j

	      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = bindex[k]; // update workspace

	        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]); // mark i as updated

	        w[i] = mark;
	      } // loop rows


	      for (i = 0; i < rows; i++) {
	        // check row is in workspace
	        if (w[i] === mark) {
	          // c[i][j] was already calculated
	          cdata[i][j] = x[i];
	        } else {
	          // item does not exist in S
	          cdata[i][j] = adata[i][j];
	        }
	      }
	    } // return dense matrix


	    return denseMatrix.createDenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });
	  };
	});

	var name$f = 'algorithm10';
	var dependencies$g = ['typed', 'DenseMatrix'];
	var createAlgorithm10 = /* #__PURE__ */factory(name$f, dependencies$g, function (_ref) {
	  var typed = _ref.typed,
	      DenseMatrix = _ref.DenseMatrix;
	  /**
	   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
	   * Callback function invoked NZ times (number of nonzero items in S).
	   *
	   *
	   *          â  f(Sij, b)  ; S(i,j) !== 0
	   * C(i,j) = â¤
	   *          â  b          ; otherwise
	   *
	   *
	   * @param {Matrix}   s                 The SparseMatrix instance (S)
	   * @param {Scalar}   b                 The Scalar value
	   * @param {Function} callback          The f(Aij,b) operation to invoke
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
	   */

	  return function algorithm10(s, b, callback, inverse) {
	    // sparse matrix arrays
	    var avalues = s._values;
	    var aindex = s._index;
	    var aptr = s._ptr;
	    var asize = s._size;
	    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix

	    if (!avalues) {
	      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
	    } // rows & columns


	    var rows = asize[0];
	    var columns = asize[1]; // datatype

	    var dt; // callback signature to use

	    var cf = callback; // process data types

	    if (typeof adt === 'string') {
	      // datatype
	      dt = adt; // convert b to the same datatype

	      b = typed.convert(b, dt); // callback

	      cf = typed.find(callback, [dt, dt]);
	    } // result arrays


	    var cdata = []; // workspaces

	    var x = []; // marks indicating we have a value in x for a given column

	    var w = []; // loop columns

	    for (var j = 0; j < columns; j++) {
	      // columns mark
	      var mark = j + 1; // values in j

	      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var r = aindex[k]; // update workspace

	        x[r] = avalues[k];
	        w[r] = mark;
	      } // loop rows


	      for (var i = 0; i < rows; i++) {
	        // initialize C on first column
	        if (j === 0) {
	          // create row array
	          cdata[i] = [];
	        } // check sparse matrix has a value @ i,j


	        if (w[i] === mark) {
	          // invoke callback, update C
	          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
	        } else {
	          // dense matrix value @ i, j
	          cdata[i][j] = b;
	        }
	      }
	    } // return dense matrix


	    return new DenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });
	  };
	});

	var name$g = 'algorithm13';
	var dependencies$h = ['typed'];
	var createAlgorithm13 = /* #__PURE__ */factory(name$g, dependencies$h, function (_ref) {
	  var typed = _ref.typed;
	  /**
	   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z).
	   * Callback function invoked MxN times.
	   *
	   * C(i,j,...z) = f(Aij..z, Bij..z)
	   *
	   * @param {Matrix}   a                 The DenseMatrix instance (A)
	   * @param {Matrix}   b                 The DenseMatrix instance (B)
	   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658
	   */

	  return function algorithm13(a, b, callback) {
	    // a arrays
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype; // b arrays

	    var bdata = b._data;
	    var bsize = b._size;
	    var bdt = b._datatype; // c arrays

	    var csize = []; // validate dimensions

	    if (asize.length !== bsize.length) {
	      throw new DimensionError(asize.length, bsize.length);
	    } // validate each one of the dimension sizes


	    for (var s = 0; s < asize.length; s++) {
	      // must match
	      if (asize[s] !== bsize[s]) {
	        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	      } // update dimension in c


	      csize[s] = asize[s];
	    } // datatype


	    var dt; // callback signature to use

	    var cf = callback; // process data types

	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt; // callback

	      cf = typed.find(callback, [dt, dt]);
	    } // populate cdata, iterate through dimensions


	    var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : []; // c matrix

	    return a.createDenseMatrix({
	      data: cdata,
	      size: csize,
	      datatype: dt
	    });
	  }; // recursive function

	  function _iterate(f, level, s, n, av, bv) {
	    // initialize array for this level
	    var cv = []; // check we reach the last level

	    if (level === s.length - 1) {
	      // loop arrays in last level
	      for (var i = 0; i < n; i++) {
	        // invoke callback and store value
	        cv[i] = f(av[i], bv[i]);
	      }
	    } else {
	      // iterate current level
	      for (var j = 0; j < n; j++) {
	        // iterate next level
	        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);
	      }
	    }

	    return cv;
	  }
	});

	var name$h = 'algorithm14';
	var dependencies$i = ['typed'];
	var createAlgorithm14 = /* #__PURE__ */factory(name$h, dependencies$i, function (_ref) {
	  var typed = _ref.typed;
	  /**
	   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b).
	   * Callback function invoked MxN times.
	   *
	   * C(i,j,...z) = f(Aij..z, b)
	   *
	   * @param {Matrix}   a                 The DenseMatrix instance (A)
	   * @param {Scalar}   b                 The Scalar value
	   * @param {Function} callback          The f(Aij..z,b) operation to invoke
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042
	   */

	  return function algorithm14(a, b, callback, inverse) {
	    // a arrays
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype; // datatype

	    var dt; // callback signature to use

	    var cf = callback; // process data types

	    if (typeof adt === 'string') {
	      // datatype
	      dt = adt; // convert b to the same datatype

	      b = typed.convert(b, dt); // callback

	      cf = typed.find(callback, [dt, dt]);
	    } // populate cdata, iterate through dimensions


	    var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : []; // c matrix

	    return a.createDenseMatrix({
	      data: cdata,
	      size: clone(asize),
	      datatype: dt
	    });
	  }; // recursive function

	  function _iterate(f, level, s, n, av, bv, inverse) {
	    // initialize array for this level
	    var cv = []; // check we reach the last level

	    if (level === s.length - 1) {
	      // loop arrays in last level
	      for (var i = 0; i < n; i++) {
	        // invoke callback and store value
	        cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);
	      }
	    } else {
	      // iterate current level
	      for (var j = 0; j < n; j++) {
	        // iterate next level
	        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);
	      }
	    }

	    return cv;
	  }
	});

	var name$i = 'algorithm11';
	var dependencies$j = ['typed', 'equalScalar'];
	var createAlgorithm11 = /* #__PURE__ */factory(name$i, dependencies$j, function (_ref) {
	  var typed = _ref.typed,
	      equalScalar = _ref.equalScalar;
	  /**
	   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
	   * Callback function invoked NZ times (number of nonzero items in S).
	   *
	   *
	   *          â  f(Sij, b)  ; S(i,j) !== 0
	   * C(i,j) = â¤
	   *          â  0          ; otherwise
	   *
	   *
	   * @param {Matrix}   s                 The SparseMatrix instance (S)
	   * @param {Scalar}   b                 The Scalar value
	   * @param {Function} callback          The f(Aij,b) operation to invoke
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
	   */

	  return function algorithm11(s, b, callback, inverse) {
	    // sparse matrix arrays
	    var avalues = s._values;
	    var aindex = s._index;
	    var aptr = s._ptr;
	    var asize = s._size;
	    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix

	    if (!avalues) {
	      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
	    } // rows & columns


	    var rows = asize[0];
	    var columns = asize[1]; // datatype

	    var dt; // equal signature to use

	    var eq = equalScalar; // zero value

	    var zero = 0; // callback signature to use

	    var cf = callback; // process data types

	    if (typeof adt === 'string') {
	      // datatype
	      dt = adt; // find signature that matches (dt, dt)

	      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

	      zero = typed.convert(0, dt); // convert b to the same datatype

	      b = typed.convert(b, dt); // callback

	      cf = typed.find(callback, [dt, dt]);
	    } // result arrays


	    var cvalues = [];
	    var cindex = [];
	    var cptr = []; // loop columns

	    for (var j = 0; j < columns; j++) {
	      // initialize ptr
	      cptr[j] = cindex.length; // values in j

	      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var i = aindex[k]; // invoke callback

	        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b); // check value is zero

	        if (!eq(v, zero)) {
	          // push index & value
	          cindex.push(i);
	          cvalues.push(v);
	        }
	      }
	    } // update ptr


	    cptr[columns] = cindex.length; // return sparse matrix

	    return s.createSparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });
	  };
	});

	var name$j = 'algorithm03';
	var dependencies$k = ['typed'];
	var createAlgorithm03 = /* #__PURE__ */factory(name$j, dependencies$k, function (_ref) {
	  var typed = _ref.typed;
	  /**
	   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).
	   * Callback function invoked M*N times.
	   *
	   *
	   *          â  f(Dij, Sij)  ; S(i,j) !== 0
	   * C(i,j) = â¤
	   *          â  f(Dij, 0)    ; otherwise
	   *
	   *
	   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
	   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)
	   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
	   */

	  return function algorithm03(denseMatrix, sparseMatrix, callback, inverse) {
	    // dense matrix arrays
	    var adata = denseMatrix._data;
	    var asize = denseMatrix._size;
	    var adt = denseMatrix._datatype; // sparse matrix arrays

	    var bvalues = sparseMatrix._values;
	    var bindex = sparseMatrix._index;
	    var bptr = sparseMatrix._ptr;
	    var bsize = sparseMatrix._size;
	    var bdt = sparseMatrix._datatype; // validate dimensions

	    if (asize.length !== bsize.length) {
	      throw new DimensionError(asize.length, bsize.length);
	    } // check rows & columns


	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	    } // sparse matrix cannot be a Pattern matrix


	    if (!bvalues) {
	      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
	    } // rows & columns


	    var rows = asize[0];
	    var columns = asize[1]; // datatype

	    var dt; // zero value

	    var zero = 0; // callback signature to use

	    var cf = callback; // process data types

	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt; // convert 0 to the same datatype

	      zero = typed.convert(0, dt); // callback

	      cf = typed.find(callback, [dt, dt]);
	    } // result (DenseMatrix)


	    var cdata = []; // initialize dense matrix

	    for (var z = 0; z < rows; z++) {
	      // initialize row
	      cdata[z] = [];
	    } // workspace


	    var x = []; // marks indicating we have a value in x for a given column

	    var w = []; // loop columns in b

	    for (var j = 0; j < columns; j++) {
	      // column mark
	      var mark = j + 1; // values in column j

	      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var i = bindex[k]; // update workspace

	        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
	        w[i] = mark;
	      } // process workspace


	      for (var y = 0; y < rows; y++) {
	        // check we have a calculated value for current row
	        if (w[y] === mark) {
	          // use calculated value
	          cdata[y][j] = x[y];
	        } else {
	          // calculate value
	          cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);
	        }
	      }
	    } // return dense matrix


	    return denseMatrix.createDenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });
	  };
	});

	var name$k = 'algorithm05';
	var dependencies$l = ['typed', 'equalScalar'];
	var createAlgorithm05 = /* #__PURE__ */factory(name$k, dependencies$l, function (_ref) {
	  var typed = _ref.typed,
	      equalScalar = _ref.equalScalar;
	  /**
	   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
	   * Callback function invoked MAX(NNZA, NNZB) times
	   *
	   *
	   *          â  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0
	   * C(i,j) = â¤
	   *          â  0            ; otherwise
	   *
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */

	  return function algorithm05(a, b, callback) {
	    // sparse matrix arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    var adt = a._datatype; // sparse matrix arrays

	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype; // validate dimensions

	    if (asize.length !== bsize.length) {
	      throw new DimensionError(asize.length, bsize.length);
	    } // check rows & columns


	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	    } // rows & columns


	    var rows = asize[0];
	    var columns = asize[1]; // datatype

	    var dt; // equal signature to use

	    var eq = equalScalar; // zero value

	    var zero = 0; // callback signature to use

	    var cf = callback; // process data types

	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt; // find signature that matches (dt, dt)

	      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

	      zero = typed.convert(0, dt); // callback

	      cf = typed.find(callback, [dt, dt]);
	    } // result arrays


	    var cvalues = avalues && bvalues ? [] : undefined;
	    var cindex = [];
	    var cptr = []; // workspaces

	    var xa = cvalues ? [] : undefined;
	    var xb = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column

	    var wa = [];
	    var wb = []; // vars

	    var i, j, k, k1; // loop columns

	    for (j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length; // columns mark

	      var mark = j + 1; // loop values A(:,j)

	      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {
	        // row
	        i = aindex[k]; // push index

	        cindex.push(i); // update workspace

	        wa[i] = mark; // check we need to process values

	        if (xa) {
	          xa[i] = avalues[k];
	        }
	      } // loop values B(:,j)


	      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {
	        // row
	        i = bindex[k]; // check row existed in A

	        if (wa[i] !== mark) {
	          // push index
	          cindex.push(i);
	        } // update workspace


	        wb[i] = mark; // check we need to process values

	        if (xb) {
	          xb[i] = bvalues[k];
	        }
	      } // check we need to process values (non pattern matrix)


	      if (cvalues) {
	        // initialize first index in j
	        k = cptr[j]; // loop index in j

	        while (k < cindex.length) {
	          // row
	          i = cindex[k]; // marks

	          var wai = wa[i];
	          var wbi = wb[i]; // check Aij or Bij are nonzero

	          if (wai === mark || wbi === mark) {
	            // matrix values @ i,j
	            var va = wai === mark ? xa[i] : zero;
	            var vb = wbi === mark ? xb[i] : zero; // Cij

	            var vc = cf(va, vb); // check for zero

	            if (!eq(vc, zero)) {
	              // push value
	              cvalues.push(vc); // increment pointer

	              k++;
	            } else {
	              // remove value @ i, do not increment pointer
	              cindex.splice(k, 1);
	            }
	          }
	        }
	      }
	    } // update cptr


	    cptr[columns] = cindex.length; // return sparse matrix

	    return a.createSparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });
	  };
	});

	var name$l = 'multiplyScalar';
	var dependencies$m = ['typed'];
	var createMultiplyScalar = /* #__PURE__ */factory(name$l, dependencies$m, function (_ref) {
	  var typed = _ref.typed;
	  /**
	   * Multiply two scalar values, `x * y`.
	   * This function is meant for internal use: it is used by the public function
	   * `multiply`
	   *
	   * This function does not support collections (Array or Matrix).
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply
	   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply
	   * @return {number | BigNumber | Fraction | Complex | Unit}     Multiplication of `x` and `y`
	   * @private
	   */

	  return typed('multiplyScalar', {
	    'number, number': multiplyNumber,
	    'Complex, Complex': function ComplexComplex(x, y) {
	      return x.mul(y);
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.times(y);
	    },
	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.mul(y);
	    },
	    'number | Fraction | BigNumber | Complex, Unit': function numberFractionBigNumberComplexUnit(x, y) {
	      var res = y.clone();
	      res.value = res.value === null ? res._normalize(x) : this(res.value, x);
	      return res;
	    },
	    'Unit, number | Fraction | BigNumber | Complex': function UnitNumberFractionBigNumberComplex(x, y) {
	      var res = x.clone();
	      res.value = res.value === null ? res._normalize(y) : this(res.value, y);
	      return res;
	    },
	    'Unit, Unit': function UnitUnit(x, y) {
	      return x.multiply(y);
	    }
	  });
	});

	var name$m = 'multiply';
	var dependencies$n = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'equalScalar', 'dot'];
	var createMultiply = /* #__PURE__ */factory(name$m, dependencies$n, function (_ref) {
	  var typed = _ref.typed,
	      matrix = _ref.matrix,
	      addScalar = _ref.addScalar,
	      multiplyScalar = _ref.multiplyScalar,
	      equalScalar = _ref.equalScalar,
	      dot = _ref.dot;
	  var algorithm11 = createAlgorithm11({
	    typed: typed,
	    equalScalar: equalScalar
	  });
	  var algorithm14 = createAlgorithm14({
	    typed: typed
	  });

	  function _validateMatrixDimensions(size1, size2) {
	    // check left operand dimensions
	    switch (size1.length) {
	      case 1:
	        // check size2
	        switch (size2.length) {
	          case 1:
	            // Vector x Vector
	            if (size1[0] !== size2[0]) {
	              // throw error
	              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');
	            }

	            break;

	          case 2:
	            // Vector x Matrix
	            if (size1[0] !== size2[0]) {
	              // throw error
	              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');
	            }

	            break;

	          default:
	            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
	        }

	        break;

	      case 2:
	        // check size2
	        switch (size2.length) {
	          case 1:
	            // Matrix x Vector
	            if (size1[1] !== size2[0]) {
	              // throw error
	              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');
	            }

	            break;

	          case 2:
	            // Matrix x Matrix
	            if (size1[1] !== size2[0]) {
	              // throw error
	              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');
	            }

	            break;

	          default:
	            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
	        }

	        break;

	      default:
	        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');
	    }
	  }
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Dense Vector   (N)
	   * @param {Matrix} b            Dense Vector   (N)
	   *
	   * @return {number}             Scalar value
	   */


	  function _multiplyVectorVector(a, b, n) {
	    // check empty vector
	    if (n === 0) {
	      throw new Error('Cannot multiply two empty vectors');
	    }

	    return dot(a, b);
	  }
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Dense Vector   (M)
	   * @param {Matrix} b            Matrix         (MxN)
	   *
	   * @return {Matrix}             Dense Vector   (N)
	   */


	  function _multiplyVectorMatrix(a, b) {
	    // process storage
	    if (b.storage() !== 'dense') {
	      throw new Error('Support for SparseMatrix not implemented');
	    }

	    return _multiplyVectorDenseMatrix(a, b);
	  }
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Dense Vector   (M)
	   * @param {Matrix} b            Dense Matrix   (MxN)
	   *
	   * @return {Matrix}             Dense Vector   (N)
	   */


	  function _multiplyVectorDenseMatrix(a, b) {
	    // a dense
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype; // b dense

	    var bdata = b._data;
	    var bsize = b._size;
	    var bdt = b._datatype; // rows & columns

	    var alength = asize[0];
	    var bcolumns = bsize[1]; // datatype

	    var dt; // addScalar signature to use

	    var af = addScalar; // multiplyScalar signature to use

	    var mf = multiplyScalar; // process data types

	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt; // find signatures that matches (dt, dt)

	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	    } // result


	    var c = []; // loop matrix columns

	    for (var j = 0; j < bcolumns; j++) {
	      // sum (do not initialize it with zero)
	      var sum = mf(adata[0], bdata[0][j]); // loop vector

	      for (var i = 1; i < alength; i++) {
	        // multiply & accumulate
	        sum = af(sum, mf(adata[i], bdata[i][j]));
	      }

	      c[j] = sum;
	    } // return matrix


	    return a.createDenseMatrix({
	      data: c,
	      size: [bcolumns],
	      datatype: dt
	    });
	  }
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Matrix         (MxN)
	   * @param {Matrix} b            Dense Vector   (N)
	   *
	   * @return {Matrix}             Dense Vector   (M)
	   */


	  var _multiplyMatrixVector = typed('_multiplyMatrixVector', {
	    'DenseMatrix, any': _multiplyDenseMatrixVector,
	    'SparseMatrix, any': _multiplySparseMatrixVector
	  });
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Matrix         (MxN)
	   * @param {Matrix} b            Matrix         (NxC)
	   *
	   * @return {Matrix}             Matrix         (MxC)
	   */


	  var _multiplyMatrixMatrix = typed('_multiplyMatrixMatrix', {
	    'DenseMatrix, DenseMatrix': _multiplyDenseMatrixDenseMatrix,
	    'DenseMatrix, SparseMatrix': _multiplyDenseMatrixSparseMatrix,
	    'SparseMatrix, DenseMatrix': _multiplySparseMatrixDenseMatrix,
	    'SparseMatrix, SparseMatrix': _multiplySparseMatrixSparseMatrix
	  });
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            DenseMatrix  (MxN)
	   * @param {Matrix} b            Dense Vector (N)
	   *
	   * @return {Matrix}             Dense Vector (M)
	   */


	  function _multiplyDenseMatrixVector(a, b) {
	    // a dense
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype; // b dense

	    var bdata = b._data;
	    var bdt = b._datatype; // rows & columns

	    var arows = asize[0];
	    var acolumns = asize[1]; // datatype

	    var dt; // addScalar signature to use

	    var af = addScalar; // multiplyScalar signature to use

	    var mf = multiplyScalar; // process data types

	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt; // find signatures that matches (dt, dt)

	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	    } // result


	    var c = []; // loop matrix a rows

	    for (var i = 0; i < arows; i++) {
	      // current row
	      var row = adata[i]; // sum (do not initialize it with zero)

	      var sum = mf(row[0], bdata[0]); // loop matrix a columns

	      for (var j = 1; j < acolumns; j++) {
	        // multiply & accumulate
	        sum = af(sum, mf(row[j], bdata[j]));
	      }

	      c[i] = sum;
	    } // return matrix


	    return a.createDenseMatrix({
	      data: c,
	      size: [arows],
	      datatype: dt
	    });
	  }
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            DenseMatrix    (MxN)
	   * @param {Matrix} b            DenseMatrix    (NxC)
	   *
	   * @return {Matrix}             DenseMatrix    (MxC)
	   */


	  function _multiplyDenseMatrixDenseMatrix(a, b) {
	    // a dense
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype; // b dense

	    var bdata = b._data;
	    var bsize = b._size;
	    var bdt = b._datatype; // rows & columns

	    var arows = asize[0];
	    var acolumns = asize[1];
	    var bcolumns = bsize[1]; // datatype

	    var dt; // addScalar signature to use

	    var af = addScalar; // multiplyScalar signature to use

	    var mf = multiplyScalar; // process data types

	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt; // find signatures that matches (dt, dt)

	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	    } // result


	    var c = []; // loop matrix a rows

	    for (var i = 0; i < arows; i++) {
	      // current row
	      var row = adata[i]; // initialize row array

	      c[i] = []; // loop matrix b columns

	      for (var j = 0; j < bcolumns; j++) {
	        // sum (avoid initializing sum to zero)
	        var sum = mf(row[0], bdata[0][j]); // loop matrix a columns

	        for (var x = 1; x < acolumns; x++) {
	          // multiply & accumulate
	          sum = af(sum, mf(row[x], bdata[x][j]));
	        }

	        c[i][j] = sum;
	      }
	    } // return matrix


	    return a.createDenseMatrix({
	      data: c,
	      size: [arows, bcolumns],
	      datatype: dt
	    });
	  }
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            DenseMatrix    (MxN)
	   * @param {Matrix} b            SparseMatrix   (NxC)
	   *
	   * @return {Matrix}             SparseMatrix   (MxC)
	   */


	  function _multiplyDenseMatrixSparseMatrix(a, b) {
	    // a dense
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype; // b sparse

	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype; // validate b matrix

	    if (!bvalues) {
	      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');
	    } // rows & columns


	    var arows = asize[0];
	    var bcolumns = bsize[1]; // datatype

	    var dt; // addScalar signature to use

	    var af = addScalar; // multiplyScalar signature to use

	    var mf = multiplyScalar; // equalScalar signature to use

	    var eq = equalScalar; // zero value

	    var zero = 0; // process data types

	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt; // find signatures that matches (dt, dt)

	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

	      zero = typed.convert(0, dt);
	    } // result


	    var cvalues = [];
	    var cindex = [];
	    var cptr = []; // c matrix

	    var c = b.createSparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [arows, bcolumns],
	      datatype: dt
	    }); // loop b columns

	    for (var jb = 0; jb < bcolumns; jb++) {
	      // update ptr
	      cptr[jb] = cindex.length; // indeces in column jb

	      var kb0 = bptr[jb];
	      var kb1 = bptr[jb + 1]; // do not process column jb if no data exists

	      if (kb1 > kb0) {
	        // last row mark processed
	        var last = 0; // loop a rows

	        for (var i = 0; i < arows; i++) {
	          // column mark
	          var mark = i + 1; // C[i, jb]

	          var cij = void 0; // values in b column j

	          for (var kb = kb0; kb < kb1; kb++) {
	            // row
	            var ib = bindex[kb]; // check value has been initialized

	            if (last !== mark) {
	              // first value in column jb
	              cij = mf(adata[i][ib], bvalues[kb]); // update mark

	              last = mark;
	            } else {
	              // accumulate value
	              cij = af(cij, mf(adata[i][ib], bvalues[kb]));
	            }
	          } // check column has been processed and value != 0


	          if (last === mark && !eq(cij, zero)) {
	            // push row & value
	            cindex.push(i);
	            cvalues.push(cij);
	          }
	        }
	      }
	    } // update ptr


	    cptr[bcolumns] = cindex.length; // return sparse matrix

	    return c;
	  }
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            SparseMatrix    (MxN)
	   * @param {Matrix} b            Dense Vector (N)
	   *
	   * @return {Matrix}             SparseMatrix    (M, 1)
	   */


	  function _multiplySparseMatrixVector(a, b) {
	    // a sparse
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var adt = a._datatype; // validate a matrix

	    if (!avalues) {
	      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
	    } // b dense


	    var bdata = b._data;
	    var bdt = b._datatype; // rows & columns

	    var arows = a._size[0];
	    var brows = b._size[0]; // result

	    var cvalues = [];
	    var cindex = [];
	    var cptr = []; // datatype

	    var dt; // addScalar signature to use

	    var af = addScalar; // multiplyScalar signature to use

	    var mf = multiplyScalar; // equalScalar signature to use

	    var eq = equalScalar; // zero value

	    var zero = 0; // process data types

	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt; // find signatures that matches (dt, dt)

	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

	      zero = typed.convert(0, dt);
	    } // workspace


	    var x = []; // vector with marks indicating a value x[i] exists in a given column

	    var w = []; // update ptr

	    cptr[0] = 0; // rows in b

	    for (var ib = 0; ib < brows; ib++) {
	      // b[ib]
	      var vbi = bdata[ib]; // check b[ib] != 0, avoid loops

	      if (!eq(vbi, zero)) {
	        // A values & index in ib column
	        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
	          // a row
	          var ia = aindex[ka]; // check value exists in current j

	          if (!w[ia]) {
	            // ia is new entry in j
	            w[ia] = true; // add i to pattern of C

	            cindex.push(ia); // x(ia) = A

	            x[ia] = mf(vbi, avalues[ka]);
	          } else {
	            // i exists in C already
	            x[ia] = af(x[ia], mf(vbi, avalues[ka]));
	          }
	        }
	      }
	    } // copy values from x to column jb of c


	    for (var p1 = cindex.length, p = 0; p < p1; p++) {
	      // row
	      var ic = cindex[p]; // copy value

	      cvalues[p] = x[ic];
	    } // update ptr


	    cptr[1] = cindex.length; // return sparse matrix

	    return a.createSparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [arows, 1],
	      datatype: dt
	    });
	  }
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            SparseMatrix      (MxN)
	   * @param {Matrix} b            DenseMatrix       (NxC)
	   *
	   * @return {Matrix}             SparseMatrix      (MxC)
	   */


	  function _multiplySparseMatrixDenseMatrix(a, b) {
	    // a sparse
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var adt = a._datatype; // validate a matrix

	    if (!avalues) {
	      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
	    } // b dense


	    var bdata = b._data;
	    var bdt = b._datatype; // rows & columns

	    var arows = a._size[0];
	    var brows = b._size[0];
	    var bcolumns = b._size[1]; // datatype

	    var dt; // addScalar signature to use

	    var af = addScalar; // multiplyScalar signature to use

	    var mf = multiplyScalar; // equalScalar signature to use

	    var eq = equalScalar; // zero value

	    var zero = 0; // process data types

	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt; // find signatures that matches (dt, dt)

	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

	      zero = typed.convert(0, dt);
	    } // result


	    var cvalues = [];
	    var cindex = [];
	    var cptr = []; // c matrix

	    var c = a.createSparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [arows, bcolumns],
	      datatype: dt
	    }); // workspace

	    var x = []; // vector with marks indicating a value x[i] exists in a given column

	    var w = []; // loop b columns

	    for (var jb = 0; jb < bcolumns; jb++) {
	      // update ptr
	      cptr[jb] = cindex.length; // mark in workspace for current column

	      var mark = jb + 1; // rows in jb

	      for (var ib = 0; ib < brows; ib++) {
	        // b[ib, jb]
	        var vbij = bdata[ib][jb]; // check b[ib, jb] != 0, avoid loops

	        if (!eq(vbij, zero)) {
	          // A values & index in ib column
	          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
	            // a row
	            var ia = aindex[ka]; // check value exists in current j

	            if (w[ia] !== mark) {
	              // ia is new entry in j
	              w[ia] = mark; // add i to pattern of C

	              cindex.push(ia); // x(ia) = A

	              x[ia] = mf(vbij, avalues[ka]);
	            } else {
	              // i exists in C already
	              x[ia] = af(x[ia], mf(vbij, avalues[ka]));
	            }
	          }
	        }
	      } // copy values from x to column jb of c


	      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
	        // row
	        var ic = cindex[p]; // copy value

	        cvalues[p] = x[ic];
	      }
	    } // update ptr


	    cptr[bcolumns] = cindex.length; // return sparse matrix

	    return c;
	  }
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            SparseMatrix      (MxN)
	   * @param {Matrix} b            SparseMatrix      (NxC)
	   *
	   * @return {Matrix}             SparseMatrix      (MxC)
	   */


	  function _multiplySparseMatrixSparseMatrix(a, b) {
	    // a sparse
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var adt = a._datatype; // b sparse

	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bdt = b._datatype; // rows & columns

	    var arows = a._size[0];
	    var bcolumns = b._size[1]; // flag indicating both matrices (a & b) contain data

	    var values = avalues && bvalues; // datatype

	    var dt; // addScalar signature to use

	    var af = addScalar; // multiplyScalar signature to use

	    var mf = multiplyScalar; // process data types

	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt; // find signatures that matches (dt, dt)

	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	    } // result


	    var cvalues = values ? [] : undefined;
	    var cindex = [];
	    var cptr = []; // c matrix

	    var c = a.createSparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [arows, bcolumns],
	      datatype: dt
	    }); // workspace

	    var x = values ? [] : undefined; // vector with marks indicating a value x[i] exists in a given column

	    var w = []; // variables

	    var ka, ka0, ka1, kb, kb0, kb1, ia, ib; // loop b columns

	    for (var jb = 0; jb < bcolumns; jb++) {
	      // update ptr
	      cptr[jb] = cindex.length; // mark in workspace for current column

	      var mark = jb + 1; // B values & index in j

	      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {
	        // b row
	        ib = bindex[kb]; // check we need to process values

	        if (values) {
	          // loop values in a[:,ib]
	          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
	            // row
	            ia = aindex[ka]; // check value exists in current j

	            if (w[ia] !== mark) {
	              // ia is new entry in j
	              w[ia] = mark; // add i to pattern of C

	              cindex.push(ia); // x(ia) = A

	              x[ia] = mf(bvalues[kb], avalues[ka]);
	            } else {
	              // i exists in C already
	              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));
	            }
	          }
	        } else {
	          // loop values in a[:,ib]
	          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
	            // row
	            ia = aindex[ka]; // check value exists in current j

	            if (w[ia] !== mark) {
	              // ia is new entry in j
	              w[ia] = mark; // add i to pattern of C

	              cindex.push(ia);
	            }
	          }
	        }
	      } // check we need to process matrix values (pattern matrix)


	      if (values) {
	        // copy values from x to column jb of c
	        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
	          // row
	          var ic = cindex[p]; // copy value

	          cvalues[p] = x[ic];
	        }
	      }
	    } // update ptr


	    cptr[bcolumns] = cindex.length; // return sparse matrix

	    return c;
	  }
	  /**
	   * Multiply two or more values, `x * y`.
	   * For matrices, the matrix product is calculated.
	   *
	   * Syntax:
	   *
	   *    math.multiply(x, y)
	   *    math.multiply(x, y, z, ...)
	   *
	   * Examples:
	   *
	   *    math.multiply(4, 5.2)        // returns number 20.8
	   *    math.multiply(2, 3, 4)       // returns number 24
	   *
	   *    const a = math.complex(2, 3)
	   *    const b = math.complex(4, 1)
	   *    math.multiply(a, b)          // returns Complex 5 + 14i
	   *
	   *    const c = [[1, 2], [4, 3]]
	   *    const d = [[1, 2, 3], [3, -4, 7]]
	   *    math.multiply(c, d)          // returns Array [[7, -6, 17], [13, -4, 33]]
	   *
	   *    const e = math.unit('2.1 km')
	   *    math.multiply(3, e)          // returns Unit 6.3 km
	   *
	   * See also:
	   *
	   *    divide, prod, cross, dot
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`
	   */


	  return typed(name$m, extend({
	    // we extend the signatures of multiplyScalar with signatures dealing with matrices
	    'Array, Array': function ArrayArray(x, y) {
	      // check dimensions
	      _validateMatrixDimensions(arraySize(x), arraySize(y)); // use dense matrix implementation


	      var m = this(matrix(x), matrix(y)); // return array or scalar

	      return isMatrix(m) ? m.valueOf() : m;
	    },
	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // dimensions
	      var xsize = x.size();
	      var ysize = y.size(); // check dimensions

	      _validateMatrixDimensions(xsize, ysize); // process dimensions


	      if (xsize.length === 1) {
	        // process y dimensions
	        if (ysize.length === 1) {
	          // Vector * Vector
	          return _multiplyVectorVector(x, y, xsize[0]);
	        } // Vector * Matrix


	        return _multiplyVectorMatrix(x, y);
	      } // process y dimensions


	      if (ysize.length === 1) {
	        // Matrix * Vector
	        return _multiplyMatrixVector(x, y);
	      } // Matrix * Matrix


	      return _multiplyMatrixMatrix(x, y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use Matrix * Matrix implementation
	      return this(x, matrix(y));
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use Matrix * Matrix implementation
	      return this(matrix(x, y.storage()), y);
	    },
	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm11(x, y, multiplyScalar, false);
	    },
	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14(x, y, multiplyScalar, false);
	    },
	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm11(y, x, multiplyScalar, true);
	    },
	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14(y, x, multiplyScalar, true);
	    },
	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
	    },
	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
	    },
	    'any, any': multiplyScalar,
	    'any, any, ...any': function anyAnyAny(x, y, rest) {
	      var result = this(x, y);

	      for (var i = 0; i < rest.length; i++) {
	        result = this(result, rest[i]);
	      }

	      return result;
	    }
	  }, multiplyScalar.signatures));
	});

	var name$n = 'sqrt';
	var dependencies$o = ['config', 'typed', 'Complex'];
	var createSqrt = /* #__PURE__ */factory(name$n, dependencies$o, function (_ref) {
	  var config = _ref.config,
	      typed = _ref.typed,
	      Complex = _ref.Complex;
	  /**
	   * Calculate the square root of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sqrt(x)
	   *
	   * Examples:
	   *
	   *    math.sqrt(25)                // returns 5
	   *    math.square(5)               // returns 25
	   *    math.sqrt(-4)                // returns Complex 2i
	   *
	   * See also:
	   *
	   *    square, multiply, cube, cbrt, sqrtm
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x
	   *            Value for which to calculate the square root.
	   * @return {number | BigNumber | Complex | Array | Matrix | Unit}
	   *            Returns the square root of `x`
	   */

	  return typed('sqrt', {
	    number: _sqrtNumber,
	    Complex: function Complex(x) {
	      return x.sqrt();
	    },
	    BigNumber: function BigNumber(x) {
	      if (!x.isNegative() || config.predictable) {
	        return x.sqrt();
	      } else {
	        // negative value -> downgrade to number to do complex value computation
	        return _sqrtNumber(x.toNumber());
	      }
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since sqrt(0) = 0
	      return deepMap(x, this);
	    },
	    Unit: function Unit(x) {
	      // Someday will work for complex units when they are implemented
	      return x.pow(0.5);
	    }
	  });
	  /**
	   * Calculate sqrt for a number
	   * @param {number} x
	   * @returns {number | Complex} Returns the square root of x
	   * @private
	   */

	  function _sqrtNumber(x) {
	    if (isNaN(x)) {
	      return NaN;
	    } else if (x >= 0 || config.predictable) {
	      return Math.sqrt(x);
	    } else {
	      return new Complex(x, 0).sqrt();
	    }
	  }
	});

	var name$o = 'subtract';
	var dependencies$p = ['typed', 'matrix', 'equalScalar', 'addScalar', 'unaryMinus', 'DenseMatrix'];
	var createSubtract = /* #__PURE__ */factory(name$o, dependencies$p, function (_ref) {
	  var typed = _ref.typed,
	      matrix = _ref.matrix,
	      equalScalar = _ref.equalScalar,
	      addScalar = _ref.addScalar,
	      unaryMinus = _ref.unaryMinus,
	      DenseMatrix = _ref.DenseMatrix; // TODO: split function subtract in two: subtract and subtractScalar

	  var algorithm01 = createAlgorithm01({
	    typed: typed
	  });
	  var algorithm03 = createAlgorithm03({
	    typed: typed
	  });
	  var algorithm05 = createAlgorithm05({
	    typed: typed,
	    equalScalar: equalScalar
	  });
	  var algorithm10 = createAlgorithm10({
	    typed: typed,
	    DenseMatrix: DenseMatrix
	  });
	  var algorithm13 = createAlgorithm13({
	    typed: typed
	  });
	  var algorithm14 = createAlgorithm14({
	    typed: typed
	  });
	  /**
	   * Subtract two values, `x - y`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.subtract(x, y)
	   *
	   * Examples:
	   *
	   *    math.subtract(5.3, 2)        // returns number 3.3
	   *
	   *    const a = math.complex(2, 3)
	   *    const b = math.complex(4, 1)
	   *    math.subtract(a, b)          // returns Complex -2 + 2i
	   *
	   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]
	   *
	   *    const c = math.unit('2.1 km')
	   *    const d = math.unit('500m')
	   *    math.subtract(c, d)          // returns Unit 1.6 km
	   *
	   * See also:
	   *
	   *    add
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x
	   *            Initial value
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y
	   *            Value to subtract from `x`
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
	   *            Subtraction of `x` and `y`
	   */

	  return typed(name$o, {
	    'number, number': function numberNumber(x, y) {
	      return x - y;
	    },
	    'Complex, Complex': function ComplexComplex(x, y) {
	      return x.sub(y);
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.minus(y);
	    },
	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.sub(y);
	    },
	    'Unit, Unit': function UnitUnit(x, y) {
	      if (x.value === null) {
	        throw new Error('Parameter x contains a unit with undefined value');
	      }

	      if (y.value === null) {
	        throw new Error('Parameter y contains a unit with undefined value');
	      }

	      if (!x.equalBase(y)) {
	        throw new Error('Units do not match');
	      }

	      var res = x.clone();
	      res.value = this(res.value, y.value);
	      res.fixPrefix = false;
	      return res;
	    },
	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      checkEqualDimensions(x, y);
	      return algorithm05(x, y, this);
	    },
	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      checkEqualDimensions(x, y);
	      return algorithm03(y, x, this, true);
	    },
	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      checkEqualDimensions(x, y);
	      return algorithm01(x, y, this, false);
	    },
	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      checkEqualDimensions(x, y);
	      return algorithm13(x, y, this);
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return this(matrix(x), matrix(y)).valueOf();
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return this(matrix(x), y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return this(x, matrix(y));
	    },
	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm10(x, unaryMinus(y), addScalar);
	    },
	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14(x, y, this);
	    },
	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm10(y, x, this, true);
	    },
	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14(y, x, this, true);
	    },
	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, this, false).valueOf();
	    },
	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, this, true).valueOf();
	    }
	  });
	});
	/**
	 * Check whether matrix x and y have the same number of dimensions.
	 * Throws a DimensionError when dimensions are not equal
	 * @param {Matrix} x
	 * @param {Matrix} y
	 */

	function checkEqualDimensions(x, y) {
	  var xsize = x.size();
	  var ysize = y.size();

	  if (xsize.length !== ysize.length) {
	    throw new DimensionError(xsize.length, ysize.length);
	  }
	}

	var name$p = 'conj';
	var dependencies$q = ['typed'];
	var createConj = /* #__PURE__ */factory(name$p, dependencies$q, function (_ref) {
	  var typed = _ref.typed;
	  /**
	   * Compute the complex conjugate of a complex value.
	   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.conj(x)
	   *
	   * Examples:
	   *
	   *    math.conj(math.complex('2 + 3i'))  // returns Complex 2 - 3i
	   *    math.conj(math.complex('2 - 3i'))  // returns Complex 2 + 3i
	   *    math.conj(math.complex('-5.2i'))  // returns Complex 5.2i
	   *
	   * See also:
	   *
	   *    re, im, arg, abs
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            A complex number or array with complex numbers
	   * @return {number | BigNumber | Complex | Array | Matrix}
	   *            The complex conjugate of x
	   */

	  return typed(name$p, {
	    number: function number(x) {
	      return x;
	    },
	    BigNumber: function BigNumber(x) {
	      return x;
	    },
	    Complex: function Complex(x) {
	      return x.conjugate();
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, this);
	    }
	  });
	});

	var name$q = 'cross';
	var dependencies$r = ['typed', 'matrix', 'subtract', 'multiply'];
	var createCross = /* #__PURE__ */factory(name$q, dependencies$r, function (_ref) {
	  var typed = _ref.typed,
	      matrix = _ref.matrix,
	      subtract = _ref.subtract,
	      multiply = _ref.multiply;
	  /**
	   * Calculate the cross product for two vectors in three dimensional space.
	   * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined
	   * as:
	   *
	   *    cross(A, B) = [
	   *      a2 * b3 - a3 * b2,
	   *      a3 * b1 - a1 * b3,
	   *      a1 * b2 - a2 * b1
	   *    ]
	   *
	   * If one of the input vectors has a dimension greater than 1, the output
	   * vector will be a 1x3 (2-dimensional) matrix.
	   *
	   * Syntax:
	   *
	   *    math.cross(x, y)
	   *
	   * Examples:
	   *
	   *    math.cross([1, 1, 0],   [0, 1, 1])       // Returns [1, -1, 1]
	   *    math.cross([3, -3, 1],  [4, 9, 2])       // Returns [-15, -2, 39]
	   *    math.cross([2, 3, 4],   [5, 6, 7])       // Returns [-3, 6, -3]
	   *    math.cross([[1, 2, 3]], [[4], [5], [6]]) // Returns [[-3, 6, -3]]
	   *
	   * See also:
	   *
	   *    dot, multiply
	   *
	   * @param  {Array | Matrix} x   First vector
	   * @param  {Array | Matrix} y   Second vector
	   * @return {Array | Matrix}     Returns the cross product of `x` and `y`
	   */

	  return typed(name$q, {
	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      return matrix(_cross(x.toArray(), y.toArray()));
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      return matrix(_cross(x.toArray(), y));
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      return matrix(_cross(x, y.toArray()));
	    },
	    'Array, Array': _cross
	  });
	  /**
	   * Calculate the cross product for two arrays
	   * @param {Array} x  First vector
	   * @param {Array} y  Second vector
	   * @returns {Array} Returns the cross product of x and y
	   * @private
	   */

	  function _cross(x, y) {
	    var highestDimension = Math.max(arraySize(x).length, arraySize(y).length);
	    x = squeeze(x);
	    y = squeeze(y);
	    var xSize = arraySize(x);
	    var ySize = arraySize(y);

	    if (xSize.length !== 1 || ySize.length !== 1 || xSize[0] !== 3 || ySize[0] !== 3) {
	      throw new RangeError('Vectors with length 3 expected ' + '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');
	    }

	    var product = [subtract(multiply(x[1], y[2]), multiply(x[2], y[1])), subtract(multiply(x[2], y[0]), multiply(x[0], y[2])), subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))];

	    if (highestDimension > 1) {
	      return [product];
	    } else {
	      return product;
	    }
	  }
	});

	function noBignumber() {
	  throw new Error('No "bignumber" implementation available');
	}
	function noFraction() {
	  throw new Error('No "fraction" implementation available');
	}
	function noMatrix() {
	  throw new Error('No "matrix" implementation available');
	}

	var name$r = 'size';
	var dependencies$s = ['typed', 'config', '?matrix'];
	var createSize = /* #__PURE__ */factory(name$r, dependencies$s, function (_ref) {
	  var typed = _ref.typed,
	      config = _ref.config,
	      matrix = _ref.matrix;
	  /**
	   * Calculate the size of a matrix or scalar.
	   *
	   * Syntax:
	   *
	   *     math.size(x)
	   *
	   * Examples:
	   *
	   *     math.size(2.3)                  // returns []
	   *     math.size('hello world')        // returns [11]
	   *
	   *     const A = [[1, 2, 3], [4, 5, 6]]
	   *     math.size(A)                    // returns [2, 3]
	   *     math.size(math.range(1,6))      // returns [5]
	   *
	   * See also:
	   *
	   *     resize, squeeze, subset
	   *
	   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix
	   * @return {Array | Matrix} A vector with size of `x`.
	   */

	  return typed(name$r, {
	    Matrix: function Matrix(x) {
	      return x.create(x.size());
	    },
	    Array: arraySize,
	    string: function string(x) {
	      return config.matrix === 'Array' ? [x.length] : matrix([x.length]);
	    },
	    'number | Complex | BigNumber | Unit | boolean | null': function numberComplexBigNumberUnitBooleanNull(x) {
	      // scalar
	      return config.matrix === 'Array' ? [] : matrix ? matrix([]) : noMatrix();
	    }
	  });
	});

	var name$s = 'numeric';
	var dependencies$t = ['number', '?bignumber', '?fraction'];
	var createNumeric = /* #__PURE__ */factory(name$s, dependencies$t, function (_ref) {
	  var _number = _ref.number,
	      bignumber = _ref.bignumber,
	      fraction = _ref.fraction;
	  var validInputTypes = {
	    string: true,
	    number: true,
	    BigNumber: true,
	    Fraction: true
	  }; // Load the conversion functions for each output type

	  var validOutputTypes = {
	    number: function number(x) {
	      return _number(x);
	    },
	    BigNumber: bignumber ? function (x) {
	      return bignumber(x);
	    } : noBignumber,
	    Fraction: fraction ? function (x) {
	      return fraction(x);
	    } : noFraction
	  };
	  /**
	   * Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.
	   *
	   * Syntax:
	   *
	   *    math.numeric(x)
	   *
	   * Examples:
	   *
	   *    math.numeric('4')                           // returns number 4
	   *    math.numeric('4', 'number')                 // returns number 4
	   *    math.numeric('4', 'BigNumber')              // returns BigNumber 4
	   *    math.numeric('4', 'Fraction')               // returns Fraction 4
	   *    math.numeric(4, 'Fraction')                 // returns Fraction 4
	   *    math.numeric(math.fraction(2, 5), 'number') // returns number 0.4
	   *
	   * See also:
	   *
	   *    number, fraction, bignumber, string, format
	   *
	   * @param {string | number | BigNumber | Fraction } value
	   *              A numeric value or a string containing a numeric value
	   * @param {string} outputType
	   *              Desired numeric output type.
	   *              Available values: 'number', 'BigNumber', or 'Fraction'
	   * @return {number | BigNumber | Fraction}
	   *              Returns an instance of the numeric in the requested type
	   */

	  return function numeric(value, outputType) {
	    var inputType = typeOf(value);

	    if (!(inputType in validInputTypes)) {
	      throw new TypeError('Cannot convert ' + value + ' of type "' + inputType + '"; valid input types are ' + Object.keys(validInputTypes).join(', '));
	    }

	    if (!(outputType in validOutputTypes)) {
	      throw new TypeError('Cannot convert ' + value + ' to type "' + outputType + '"; valid output types are ' + Object.keys(validOutputTypes).join(', '));
	    }

	    if (outputType === inputType) {
	      return value;
	    } else {
	      return validOutputTypes[outputType](value);
	    }
	  };
	});

	var name$t = 'divideScalar';
	var dependencies$u = ['typed', 'numeric'];
	var createDivideScalar = /* #__PURE__ */factory(name$t, dependencies$u, function (_ref) {
	  var typed = _ref.typed,
	      numeric = _ref.numeric;
	  /**
	   * Divide two scalar values, `x / y`.
	   * This function is meant for internal use: it is used by the public functions
	   * `divide` and `inv`.
	   *
	   * This function does not support collections (Array or Matrix).
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator
	   * @param  {number | BigNumber | Fraction | Complex} y          Denominator
	   * @return {number | BigNumber | Fraction | Complex | Unit}     Quotient, `x / y`
	   * @private
	   */

	  return typed(name$t, {
	    'number, number': function numberNumber(x, y) {
	      return x / y;
	    },
	    'Complex, Complex': function ComplexComplex(x, y) {
	      return x.div(y);
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.div(y);
	    },
	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.div(y);
	    },
	    'Unit, number | Fraction | BigNumber': function UnitNumberFractionBigNumber(x, y) {
	      var res = x.clone(); // TODO: move the divide function to Unit.js, it uses internals of Unit

	      var one = numeric(1, typeOf(y));
	      res.value = this(res.value === null ? res._normalize(one) : res.value, y);
	      return res;
	    },
	    'number | Fraction | BigNumber, Unit': function numberFractionBigNumberUnit(x, y) {
	      var res = y.clone();
	      res = res.pow(-1); // TODO: move the divide function to Unit.js, it uses internals of Unit

	      var one = numeric(1, typeOf(x));
	      res.value = this(x, y.value === null ? y._normalize(one) : y.value);
	      return res;
	    },
	    'Unit, Unit': function UnitUnit(x, y) {
	      return x.divide(y);
	    }
	  });
	});

	var name$u = 'dot';
	var dependencies$v = ['typed', 'addScalar', 'multiplyScalar', 'conj', 'size'];
	var createDot = /* #__PURE__ */factory(name$u, dependencies$v, function (_ref) {
	  var typed = _ref.typed,
	      addScalar = _ref.addScalar,
	      multiplyScalar = _ref.multiplyScalar,
	      conj = _ref.conj,
	      size = _ref.size;
	  /**
	   * Calculate the dot product of two vectors. The dot product of
	   * `A = [a1, a2, ..., an]` and `B = [b1, b2, ..., bn]` is defined as:
	   *
	   *    dot(A, B) = conj(a1) * b1 + conj(a2) * b2 + ... + conj(an) * bn
	   *
	   * Syntax:
	   *
	   *    math.dot(x, y)
	   *
	   * Examples:
	   *
	   *    math.dot([2, 4, 1], [2, 2, 3])       // returns number 15
	   *    math.multiply([2, 4, 1], [2, 2, 3])  // returns number 15
	   *
	   * See also:
	   *
	   *    multiply, cross
	   *
	   * @param  {Array | Matrix} x     First vector
	   * @param  {Array | Matrix} y     Second vector
	   * @return {number}               Returns the dot product of `x` and `y`
	   */

	  return typed(name$u, {
	    'Array | DenseMatrix, Array | DenseMatrix': _denseDot,
	    'SparseMatrix, SparseMatrix': _sparseDot
	  });

	  function _validateDim(x, y) {
	    var xSize = _size(x);

	    var ySize = _size(y);

	    var xLen, yLen;

	    if (xSize.length === 1) {
	      xLen = xSize[0];
	    } else if (xSize.length === 2 && xSize[1] === 1) {
	      xLen = xSize[0];
	    } else {
	      throw new RangeError('Expected a column vector, instead got a matrix of size (' + xSize.join(', ') + ')');
	    }

	    if (ySize.length === 1) {
	      yLen = ySize[0];
	    } else if (ySize.length === 2 && ySize[1] === 1) {
	      yLen = ySize[0];
	    } else {
	      throw new RangeError('Expected a column vector, instead got a matrix of size (' + ySize.join(', ') + ')');
	    }

	    if (xLen !== yLen) throw new RangeError('Vectors must have equal length (' + xLen + ' != ' + yLen + ')');
	    if (xLen === 0) throw new RangeError('Cannot calculate the dot product of empty vectors');
	    return xLen;
	  }

	  function _denseDot(a, b) {
	    var N = _validateDim(a, b);

	    var adata = isMatrix(a) ? a._data : a;
	    var adt = isMatrix(a) ? a._datatype : undefined;
	    var bdata = isMatrix(b) ? b._data : b;
	    var bdt = isMatrix(b) ? b._datatype : undefined; // are these 2-dimensional column vectors? (as opposed to 1-dimensional vectors)

	    var aIsColumn = _size(a).length === 2;
	    var bIsColumn = _size(b).length === 2;
	    var add = addScalar;
	    var mul = multiplyScalar; // process data types

	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      var dt = adt; // find signatures that matches (dt, dt)

	      add = typed.find(addScalar, [dt, dt]);
	      mul = typed.find(multiplyScalar, [dt, dt]);
	    } // both vectors 1-dimensional


	    if (!aIsColumn && !bIsColumn) {
	      var c = mul(conj(adata[0]), bdata[0]);

	      for (var i = 1; i < N; i++) {
	        c = add(c, mul(conj(adata[i]), bdata[i]));
	      }

	      return c;
	    } // a is 1-dim, b is column


	    if (!aIsColumn && bIsColumn) {
	      var _c = mul(conj(adata[0]), bdata[0][0]);

	      for (var _i = 1; _i < N; _i++) {
	        _c = add(_c, mul(conj(adata[_i]), bdata[_i][0]));
	      }

	      return _c;
	    } // a is column, b is 1-dim


	    if (aIsColumn && !bIsColumn) {
	      var _c2 = mul(conj(adata[0][0]), bdata[0]);

	      for (var _i2 = 1; _i2 < N; _i2++) {
	        _c2 = add(_c2, mul(conj(adata[_i2][0]), bdata[_i2]));
	      }

	      return _c2;
	    } // both vectors are column


	    if (aIsColumn && bIsColumn) {
	      var _c3 = mul(conj(adata[0][0]), bdata[0][0]);

	      for (var _i3 = 1; _i3 < N; _i3++) {
	        _c3 = add(_c3, mul(conj(adata[_i3][0]), bdata[_i3][0]));
	      }

	      return _c3;
	    }
	  }

	  function _sparseDot(x, y) {
	    _validateDim(x, y);

	    var xindex = x._index;
	    var xvalues = x._values;
	    var yindex = y._index;
	    var yvalues = y._values; // TODO optimize add & mul using datatype

	    var c = 0;
	    var add = addScalar;
	    var mul = multiplyScalar;
	    var i = 0;
	    var j = 0;

	    while (i < xindex.length && j < yindex.length) {
	      var I = xindex[i];
	      var J = yindex[j];

	      if (I < J) {
	        i++;
	        continue;
	      }

	      if (I > J) {
	        j++;
	        continue;
	      }

	      if (I === J) {
	        c = add(c, mul(xvalues[i], yvalues[j]));
	        i++;
	        j++;
	      }
	    }

	    return c;
	  } // TODO remove this once #1771 is fixed


	  function _size(x) {
	    return isMatrix(x) ? x.size() : size(x);
	  }
	});

	var name$v = 'distance';
	var dependencies$w = ['typed', 'addScalar', 'subtract', 'divideScalar', 'multiplyScalar', 'unaryMinus', 'sqrt', 'abs'];
	var createDistance = /* #__PURE__ */factory(name$v, dependencies$w, function (_ref) {
	  var typed = _ref.typed,
	      addScalar = _ref.addScalar,
	      subtract = _ref.subtract,
	      multiplyScalar = _ref.multiplyScalar,
	      divideScalar = _ref.divideScalar,
	      unaryMinus = _ref.unaryMinus,
	      sqrt = _ref.sqrt,
	      abs = _ref.abs;
	  /**
	    * Calculates:
	    *    The eucledian distance between two points in N-dimensional spaces.
	    *    Distance between point and a line in 2 and 3 dimensional spaces.
	    *    Pairwise distance between a set of 2D or 3D points
	    * NOTE:
	    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c
	    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (xâx0, yây0, zâz0) = t(a, b, c)
	    *
	    * Syntax:
	    *    math.distance([x1, y1], [x2, y2])
	    *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})
	    *    math.distance([x1, y1, z1], [x2, y2, z2])
	    *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})
	    *    math.distance([x1, y1, ... , N1], [x2, y2, ... , N2])
	    *    math.distance([[A], [B], [C]...])
	    *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])
	    *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})
	    *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])
	    *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})
	    *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])
	    *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})
	    *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line
	    *    math.distance([x, y, z], [x0, y0, z0, a, b, c])
	    *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})
	    *
	    * Examples:
	    *    math.distance([0,0], [4,4])                     // Returns 5.6569
	    *    math.distance(
	    *     {pointOneX: 0, pointOneY: 0},
	    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951
	    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.74166
	    *    math.distance(
	    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},
	    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3
	    *    math.distance([1, 0, 1, 0], [0, -1, 0, -1])     // Returns 2
	    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]
	    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]
	    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387
	    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847
	    *    math.distance(
	    *     {pointX: 1, pointY: 4},
	    *     {lineOnePtX: 6, lineOnePtY: 3},
	    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744
	    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857
	    *    math.distance(
	    *     {pointX: 2, pointY: 3, pointZ: 1},
	    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857
	    *
	    * @param {Array | Matrix | Object} x    Co-ordinates of first point
	    * @param {Array | Matrix | Object} y    Co-ordinates of second point
	    * @return {Number | BigNumber} Returns the distance from two/three points
	  */

	  return typed(name$v, {
	    'Array, Array, Array': function ArrayArrayArray(x, y, z) {
	      // Point to Line 2D (x=Point, y=LinePoint1, z=LinePoint2)
	      if (x.length === 2 && y.length === 2 && z.length === 2) {
	        if (!_2d(x)) {
	          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
	        }

	        if (!_2d(y)) {
	          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');
	        }

	        if (!_2d(z)) {
	          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');
	        }

	        var m = divideScalar(subtract(z[1], z[0]), subtract(y[1], y[0]));
	        var xCoeff = multiplyScalar(multiplyScalar(m, m), y[0]);
	        var yCoeff = unaryMinus(multiplyScalar(m, y[0]));
	        var constant = x[1];
	        return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);
	      } else {
	        throw new TypeError('Invalid Arguments: Try again');
	      }
	    },
	    'Object, Object, Object': function ObjectObjectObject(x, y, z) {
	      if (Object.keys(x).length === 2 && Object.keys(y).length === 2 && Object.keys(z).length === 2) {
	        if (!_2d(x)) {
	          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');
	        }

	        if (!_2d(y)) {
	          throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers');
	        }

	        if (!_2d(z)) {
	          throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers');
	        }

	        if ('pointX' in x && 'pointY' in x && 'lineOnePtX' in y && 'lineOnePtY' in y && 'lineTwoPtX' in z && 'lineTwoPtY' in z) {
	          var m = divideScalar(subtract(z.lineTwoPtY, z.lineTwoPtX), subtract(y.lineOnePtY, y.lineOnePtX));
	          var xCoeff = multiplyScalar(multiplyScalar(m, m), y.lineOnePtX);
	          var yCoeff = unaryMinus(multiplyScalar(m, y.lineOnePtX));
	          var constant = x.pointX;
	          return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);
	        } else {
	          throw new TypeError('Key names do not match');
	        }
	      } else {
	        throw new TypeError('Invalid Arguments: Try again');
	      }
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // Point to Line 2D (x=[pointX, pointY], y=[x-coeff, y-coeff, const])
	      if (x.length === 2 && y.length === 3) {
	        if (!_2d(x)) {
	          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
	        }

	        if (!_3d(y)) {
	          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
	        }

	        return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);
	      } else if (x.length === 3 && y.length === 6) {
	        // Point to Line 3D
	        if (!_3d(x)) {
	          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
	        }

	        if (!_parametricLine(y)) {
	          throw new TypeError('Array with 6 numbers or BigNumbers expected for second argument');
	        }

	        return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);
	      } else if (x.length === y.length && x.length > 0) {
	        // Point to Point N-dimensions
	        if (!_containsOnlyNumbers(x)) {
	          throw new TypeError('All values of an array should be numbers or BigNumbers');
	        }

	        if (!_containsOnlyNumbers(y)) {
	          throw new TypeError('All values of an array should be numbers or BigNumbers');
	        }

	        return _euclideanDistance(x, y);
	      } else {
	        throw new TypeError('Invalid Arguments: Try again');
	      }
	    },
	    'Object, Object': function ObjectObject(x, y) {
	      if (Object.keys(x).length === 2 && Object.keys(y).length === 3) {
	        if (!_2d(x)) {
	          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');
	        }

	        if (!_3d(y)) {
	          throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers');
	        }

	        if ('pointX' in x && 'pointY' in x && 'xCoeffLine' in y && 'yCoeffLine' in y && 'constant' in y) {
	          return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);
	        } else {
	          throw new TypeError('Key names do not match');
	        }
	      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 6) {
	        // Point to Line 3D
	        if (!_3d(x)) {
	          throw new TypeError('Values of pointX, pointY and pointZ should be numbers or BigNumbers');
	        }

	        if (!_parametricLine(y)) {
	          throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers or BigNumbers');
	        }

	        if ('pointX' in x && 'pointY' in x && 'x0' in y && 'y0' in y && 'z0' in y && 'a' in y && 'b' in y && 'c' in y) {
	          return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);
	        } else {
	          throw new TypeError('Key names do not match');
	        }
	      } else if (Object.keys(x).length === 2 && Object.keys(y).length === 2) {
	        // Point to Point 2D
	        if (!_2d(x)) {
	          throw new TypeError('Values of pointOneX and pointOneY should be numbers or BigNumbers');
	        }

	        if (!_2d(y)) {
	          throw new TypeError('Values of pointTwoX and pointTwoY should be numbers or BigNumbers');
	        }

	        if ('pointOneX' in x && 'pointOneY' in x && 'pointTwoX' in y && 'pointTwoY' in y) {
	          return _euclideanDistance([x.pointOneX, x.pointOneY], [y.pointTwoX, y.pointTwoY]);
	        } else {
	          throw new TypeError('Key names do not match');
	        }
	      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 3) {
	        // Point to Point 3D
	        if (!_3d(x)) {
	          throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers');
	        }

	        if (!_3d(y)) {
	          throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers');
	        }

	        if ('pointOneX' in x && 'pointOneY' in x && 'pointOneZ' in x && 'pointTwoX' in y && 'pointTwoY' in y && 'pointTwoZ' in y) {
	          return _euclideanDistance([x.pointOneX, x.pointOneY, x.pointOneZ], [y.pointTwoX, y.pointTwoY, y.pointTwoZ]);
	        } else {
	          throw new TypeError('Key names do not match');
	        }
	      } else {
	        throw new TypeError('Invalid Arguments: Try again');
	      }
	    },
	    Array: function Array(arr) {
	      if (!_pairwise(arr)) {
	        throw new TypeError('Incorrect array format entered for pairwise distance calculation');
	      }

	      return _distancePairwise(arr);
	    }
	  });

	  function _isNumber(a) {
	    // distance supports numbers and bignumbers
	    return typeof a === 'number' || isBigNumber(a);
	  }

	  function _2d(a) {
	    // checks if the number of arguments are correct in count and are valid (should be numbers)
	    if (a.constructor !== Array) {
	      a = _objectToArray(a);
	    }

	    return _isNumber(a[0]) && _isNumber(a[1]);
	  }

	  function _3d(a) {
	    // checks if the number of arguments are correct in count and are valid (should be numbers)
	    if (a.constructor !== Array) {
	      a = _objectToArray(a);
	    }

	    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]);
	  }

	  function _containsOnlyNumbers(a) {
	    // checks if the number of arguments are correct in count and are valid (should be numbers)
	    if (!Array.isArray(a)) {
	      a = _objectToArray(a);
	    }

	    return a.every(_isNumber);
	  }

	  function _parametricLine(a) {
	    if (a.constructor !== Array) {
	      a = _objectToArray(a);
	    }

	    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]) && _isNumber(a[3]) && _isNumber(a[4]) && _isNumber(a[5]);
	  }

	  function _objectToArray(o) {
	    var keys = Object.keys(o);
	    var a = [];

	    for (var i = 0; i < keys.length; i++) {
	      a.push(o[keys[i]]);
	    }

	    return a;
	  }

	  function _pairwise(a) {
	    // checks for valid arguments passed to _distancePairwise(Array)
	    if (a[0].length === 2 && _isNumber(a[0][0]) && _isNumber(a[0][1])) {
	      if (a.some(function (aI) {
	        return aI.length !== 2 || !_isNumber(aI[0]) || !_isNumber(aI[1]);
	      })) {
	        return false;
	      }
	    } else if (a[0].length === 3 && _isNumber(a[0][0]) && _isNumber(a[0][1]) && _isNumber(a[0][2])) {
	      if (a.some(function (aI) {
	        return aI.length !== 3 || !_isNumber(aI[0]) || !_isNumber(aI[1]) || !_isNumber(aI[2]);
	      })) {
	        return false;
	      }
	    } else {
	      return false;
	    }

	    return true;
	  }

	  function _distancePointLine2D(x, y, a, b, c) {
	    var num = abs(addScalar(addScalar(multiplyScalar(a, x), multiplyScalar(b, y)), c));
	    var den = sqrt(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)));
	    return divideScalar(num, den);
	  }

	  function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c) {
	    var num = [subtract(multiplyScalar(subtract(y0, y), c), multiplyScalar(subtract(z0, z), b)), subtract(multiplyScalar(subtract(z0, z), a), multiplyScalar(subtract(x0, x), c)), subtract(multiplyScalar(subtract(x0, x), b), multiplyScalar(subtract(y0, y), a))];
	    num = sqrt(addScalar(addScalar(multiplyScalar(num[0], num[0]), multiplyScalar(num[1], num[1])), multiplyScalar(num[2], num[2])));
	    var den = sqrt(addScalar(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)), multiplyScalar(c, c)));
	    return divideScalar(num, den);
	  }

	  function _euclideanDistance(x, y) {
	    var vectorSize = x.length;
	    var result = 0;
	    var diff = 0;

	    for (var i = 0; i < vectorSize; i++) {
	      diff = subtract(x[i], y[i]);
	      result = addScalar(multiplyScalar(diff, diff), result);
	    }

	    return sqrt(result);
	  }

	  function _distancePairwise(a) {
	    var result = [];
	    var pointA = [];
	    var pointB = [];

	    for (var i = 0; i < a.length - 1; i++) {
	      for (var j = i + 1; j < a.length; j++) {
	        if (a[0].length === 2) {
	          pointA = [a[i][0], a[i][1]];
	          pointB = [a[j][0], a[j][1]];
	        } else if (a[0].length === 3) {
	          pointA = [a[i][0], a[i][1], a[i][2]];
	          pointB = [a[j][0], a[j][1], a[j][2]];
	        }

	        result.push(_euclideanDistance(pointA, pointB));
	      }
	    }

	    return result;
	  }
	});

	/**
	 * THIS FILE IS AUTO-GENERATED
	 * DON'T MAKE CHANGES HERE
	 */
	var Complex$1 = /* #__PURE__ */createComplexClass({});
	var BigNumber = /* #__PURE__ */createBigNumberClass({
	  config: config
	});
	var Matrix = /* #__PURE__ */createMatrixClass({});
	var Fraction$1 = /* #__PURE__ */createFractionClass({});
	var DenseMatrix = /* #__PURE__ */createDenseMatrixClass({
	  Matrix: Matrix
	});
	var typed = /* #__PURE__ */createTyped({
	  BigNumber: BigNumber,
	  Complex: Complex$1,
	  DenseMatrix: DenseMatrix,
	  Fraction: Fraction$1
	});
	var equalScalar = /* #__PURE__ */createEqualScalar({
	  config: config,
	  typed: typed
	});
	var number = /* #__PURE__ */createNumber({
	  typed: typed
	});
	var multiplyScalar = /* #__PURE__ */createMultiplyScalar({
	  typed: typed
	});
	var fraction$1 = /* #__PURE__ */createFraction({
	  Fraction: Fraction$1,
	  typed: typed
	});
	var unaryMinus = /* #__PURE__ */createUnaryMinus({
	  typed: typed
	});
	var addScalar = /* #__PURE__ */createAddScalar({
	  typed: typed
	});
	var sqrt = /* #__PURE__ */createSqrt({
	  Complex: Complex$1,
	  config: config,
	  typed: typed
	});
	var conj = /* #__PURE__ */createConj({
	  typed: typed
	});
	var SparseMatrix = /* #__PURE__ */createSparseMatrixClass({
	  Matrix: Matrix,
	  equalScalar: equalScalar,
	  typed: typed
	});
	var matrix = /* #__PURE__ */createMatrix({
	  DenseMatrix: DenseMatrix,
	  Matrix: Matrix,
	  SparseMatrix: SparseMatrix,
	  typed: typed
	});
	var size = /* #__PURE__ */createSize({
	  matrix: matrix,
	  config: config,
	  typed: typed
	});
	var dot = /* #__PURE__ */createDot({
	  addScalar: addScalar,
	  conj: conj,
	  multiplyScalar: multiplyScalar,
	  size: size,
	  typed: typed
	});
	var abs = /* #__PURE__ */createAbs({
	  typed: typed
	});
	var multiply = /* #__PURE__ */createMultiply({
	  addScalar: addScalar,
	  dot: dot,
	  equalScalar: equalScalar,
	  matrix: matrix,
	  multiplyScalar: multiplyScalar,
	  typed: typed
	});
	var bignumber = /* #__PURE__ */createBignumber({
	  BigNumber: BigNumber,
	  typed: typed
	});
	var numeric = /* #__PURE__ */createNumeric({
	  bignumber: bignumber,
	  fraction: fraction$1,
	  number: number
	});
	var subtract = /* #__PURE__ */createSubtract({
	  DenseMatrix: DenseMatrix,
	  addScalar: addScalar,
	  equalScalar: equalScalar,
	  matrix: matrix,
	  typed: typed,
	  unaryMinus: unaryMinus
	});
	var cross$1 = /* #__PURE__ */createCross({
	  matrix: matrix,
	  multiply: multiply,
	  subtract: subtract,
	  typed: typed
	});
	var divideScalar = /* #__PURE__ */createDivideScalar({
	  numeric: numeric,
	  typed: typed
	});
	var distance = /* #__PURE__ */createDistance({
	  abs: abs,
	  addScalar: addScalar,
	  divideScalar: divideScalar,
	  multiplyScalar: multiplyScalar,
	  sqrt: sqrt,
	  subtract: subtract,
	  typed: typed,
	  unaryMinus: unaryMinus
	});

	const atomicMasses = {
	  X: 1.0,
	  H: 1.008,
	  He: 4.002602,
	  Li: 6.94,
	  Be: 9.0121831,
	  B: 10.81,
	  C: 12.011,
	  N: 14.007,
	  O: 15.999,
	  F: 18.998403163,
	  Ne: 20.1797,
	  Na: 22.98976928,
	  Mg: 24.305,
	  Al: 26.9815385,
	  Si: 28.085,
	  P: 30.973761998,
	  S: 32.06,
	  Cl: 35.45,
	  Ar: 39.948,
	  K: 39.0983,
	  Ca: 40.078,
	  Sc: 44.955908,
	  Ti: 47.867,
	  V: 50.9415,
	  Cr: 51.9961,
	  Mn: 54.938044,
	  Fe: 55.845,
	  Co: 58.933194,
	  Ni: 58.6934,
	  Cu: 63.546,
	  Zn: 65.38,
	  Ga: 69.723,
	  Ge: 72.63,
	  As: 74.921595,
	  Se: 78.971,
	  Br: 79.904,
	  Kr: 83.798,
	  Rb: 85.4678,
	  Sr: 87.62,
	  Y: 88.90584,
	  Zr: 91.224,
	  Nb: 92.90637,
	  Mo: 95.95,
	  Tc: 97.90721,
	  Ru: 101.07,
	  Rh: 102.9055,
	  Pd: 106.42,
	  Ag: 107.8682,
	  Cd: 112.414,
	  In: 114.818,
	  Sn: 118.71,
	  Sb: 121.76,
	  Te: 127.6,
	  I: 126.90447,
	  Xe: 131.293,
	  Cs: 132.90545196,
	  Ba: 137.327,
	  La: 138.90547,
	  Ce: 140.116,
	  Pr: 140.90766,
	  Nd: 144.242,
	  Pm: 144.91276,
	  Sm: 150.36,
	  Eu: 151.964,
	  Gd: 157.25,
	  Tb: 158.92535,
	  Dy: 162.5,
	  Ho: 164.93033,
	  Er: 167.259,
	  Tm: 168.93422,
	  Yb: 173.054,
	  Lu: 174.9668,
	  Hf: 178.49,
	  Ta: 180.94788,
	  W: 183.84,
	  Re: 186.207,
	  Os: 190.23,
	  Ir: 192.217,
	  Pt: 195.084,
	  Au: 196.966569,
	  Hg: 200.592,
	  Tl: 204.38,
	  Pb: 207.2,
	  Bi: 208.9804,
	  Po: 208.98243,
	  At: 209.98715,
	  Rn: 222.01758,
	  Fr: 223.01974,
	  Ra: 226.02541,
	  Ac: 227.02775,
	  Th: 232.0377,
	  Pa: 231.03588,
	  U: 238.02891,
	  Np: 237.04817,
	  Pu: 244.06421,
	  Am: 243.06138,
	  Cm: 247.07035,
	  Bk: 247.07031,
	  Cf: 251.07959,
	  Es: 252.083,
	  Fm: 257.09511,
	  Md: 258.09843,
	  No: 259.101,
	  Lr: 262.11,
	  Rf: 267.122,
	  Db: 268.126,
	  Sg: 271.134,
	  Bh: 270.133,
	  Hs: 269.1338,
	  Mt: 278.156,
	  Ds: 281.165,
	  Rg: 281.166,
	  Cn: 285.177,
	  Nh: 286.182,
	  Fl: 289.19,
	  Mc: 289.194,
	  Lv: 293.204,
	  Ts: 293.208,
	  Og: 294.214
	};

	const uffRadii = {
	  H: 1.286,
	  He: 1.052,
	  Li: 1.092,
	  Be: 1.223,
	  B: 1.819,
	  C: 1.715,
	  N: 1.63,
	  O: 1.559,
	  F: 1.498,
	  Ne: 1.445,
	  Na: 1.329,
	  Mg: 1.346,
	  Al: 2.004,
	  Si: 1.913,
	  P: 1.847,
	  S: 1.797,
	  Cl: 1.758,
	  Ar: 1.723,
	  K: 1.698,
	  Ca: 1.514,
	  Sc: 1.468,
	  Ti: 1.414,
	  V: 1.4,
	  Cr: 1.347,
	  Mn: 1.319,
	  Fe: 1.297,
	  Co: 1.279,
	  Ni: 1.262,
	  Cu: 1.557,
	  Zn: 1.231,
	  Ga: 1.952,
	  Ge: 1.907,
	  As: 1.884,
	  Se: 1.873,
	  Br: 1.866,
	  Kr: 1.845,
	  Rb: 1.833,
	  Sr: 1.622,
	  Y: 1.49,
	  Zr: 1.392,
	  Nb: 1.41,
	  Mo: 1.36,
	  Tc: 1.335,
	  Ru: 1.32,
	  Rh: 1.305,
	  Pd: 1.291,
	  Ag: 1.402,
	  Cd: 1.269,
	  In: 1.988,
	  Sn: 1.956,
	  Sb: 1.969,
	  Te: 1.991,
	  I: 2.005,
	  Xe: 1.962,
	  Cs: 2.012,
	  Ba: 1.649,
	  La: 1.569,
	  Ce: 1.584,
	  Pr: 1.606,
	  Nd: 1.592,
	  Pm: 1.58,
	  Sm: 1.568,
	  Eu: 1.556,
	  Gd: 1.5,
	  Tb: 1.537,
	  Dy: 1.527,
	  Ho: 1.519,
	  Er: 1.511,
	  Tm: 1.503,
	  Yb: 1.494,
	  Lu: 1.621,
	  Hf: 1.399,
	  Ta: 1.412,
	  W: 1.367,
	  Re: 1.316,
	  Os: 1.39,
	  Ir: 1.265,
	  Pt: 1.227,
	  Au: 1.467,
	  Hg: 1.205,
	  Tl: 1.936,
	  Pb: 1.914,
	  Bi: 1.947,
	  Po: 2.098,
	  At: 2.116,
	  Rn: 2.123,
	  Fr: 2.183,
	  Ra: 1.638,
	  Ac: 1.549,
	  Th: 1.513,
	  Pa: 1.525,
	  U: 1.512,
	  Np: 1.525,
	  Pu: 1.525,
	  Am: 1.506,
	  Cm: 1.482,
	  Bk: 1.487,
	  Cf: 1.476,
	  Es: 1.47,
	  Fm: 1.464,
	  Md: 1.458,
	  No: 1.447,
	  Lr: 1.441
	};

	const covalentRadii = {
	  H: 0.31,
	  He: 0.28,
	  Li: 1.28,
	  Be: 0.96,
	  B: 0.84,
	  C: 0.76,
	  N: 0.71,
	  O: 0.66,
	  F: 0.57,
	  Ne: 0.58,
	  Na: 1.66,
	  Mg: 1.41,
	  Al: 1.21,
	  Si: 1.11,
	  P: 1.07,
	  S: 1.05,
	  Cl: 1.02,
	  Ar: 1.06,
	  K: 2.03,
	  Ca: 1.76,
	  Sc: 1.7,
	  Ti: 1.6,
	  V: 1.53,
	  Cr: 1.39,
	  Mn: 1.39,
	  Fe: 1.32,
	  Co: 1.26,
	  Ni: 1.24,
	  Cu: 1.32,
	  Zn: 1.22,
	  Ga: 1.22,
	  Ge: 1.2,
	  As: 1.19,
	  Se: 1.2,
	  Br: 1.2,
	  Kr: 1.16,
	  Rb: 2.2,
	  Sr: 1.95,
	  Y: 1.9,
	  Zr: 1.75,
	  Nb: 1.64,
	  Mo: 1.54,
	  Tc: 1.47,
	  Ru: 1.46,
	  Rh: 1.42,
	  Pd: 1.39,
	  Ag: 1.45,
	  Cd: 1.44,
	  In: 1.42,
	  Sn: 1.39,
	  Sb: 1.39,
	  Te: 1.38,
	  I: 1.39,
	  Xe: 1.4,
	  Cs: 2.44,
	  Ba: 2.15,
	  La: 2.07,
	  Ce: 2.04,
	  Pr: 2.03,
	  Nd: 2.01,
	  Pm: 1.99,
	  Sm: 1.98,
	  Eu: 1.98,
	  Gd: 1.96,
	  Tb: 1.94,
	  Dy: 1.92,
	  Ho: 1.92,
	  Er: 1.89,
	  Tm: 1.9,
	  Yb: 1.87,
	  Lu: 1.87,
	  Hf: 1.75,
	  Ta: 1.7,
	  W: 1.62,
	  Re: 1.51,
	  Os: 1.44,
	  Ir: 1.41,
	  Pt: 1.36,
	  Au: 1.36,
	  Hg: 1.32,
	  Tl: 1.45,
	  Pb: 1.46,
	  Bi: 1.48,
	  Po: 1.4,
	  At: 1.5,
	  Rn: 1.5,
	  Fr: 2.6,
	  Ra: 2.21,
	  Ac: 2.15,
	  Th: 2.06,
	  Pa: 2.0,
	  U: 1.96,
	  Np: 1.9,
	  Pu: 1.87,
	  Am: 1.8,
	  Cm: 1.69
	};

	function handleOverlap(r1, r2) {
	  let r = Math.min(r1, r2);
	  return 4 / 3 * Math.PI * r ** 3;
	}

	function overlap(r1, r2, d) {
	  if (d > 0.0001) {
	    return Math.PI * (d ** 4 - 6 * d ** 2 * (r1 ** 2 + r2 ** 2) + 8 * d * (r1 ** 3 + r2 ** 3) - 3 * (r1 ** 2 - r2 ** 2) ** 2) / (12 * d);
	  } else {
	    return handleOverlap(r1, r2);
	  }
	}
	function pbcDistance(pointA, pointB, cellvectors) {
	  let measuredDistance = distance(pointA, pointB);

	  for (let i = 0; i++; i < 3) {
	    for (let j = 0; j++; j < 3) {
	      for (let k = 0; k++; k < 3) {
	        let newDistance = pointA - pointB + (i - 2) * cellvectors[0] + (j - 2) * cellvectors[1] + (k - 2) * cellvectors[2];

	        if (newDistance < measuredDistance) {
	          measuredDistance = newDistance;
	        }
	      }
	    }
	  }

	  return measuredDistance;
	}

	function doOverlap(r1, r2, d, threshold = 0.001) {
	  return d + threshold < r1 + r2;
	}

	function areBound(atomA, atomB, d) {
	  return doOverlap(covalentRadii[atomA], covalentRadii[atomB], d);
	}

	function computeOverlapVolume(coordinates, atoms, cellvectors) {
	  let overlapVolume = 0;
	  let d = 0;

	  for (let i = 0; i < coordinates.length - 1; i++) {
	    for (let j = i + 1; j < coordinates.length; j++) {
	      d = pbcDistance(coordinates[i], coordinates[j], cellvectors);

	      if (areBound(atoms[i], atoms[j], d)) {
	        overlapVolume += overlap(uffRadii[atoms[i]], uffRadii[atoms[j]], d);
	      }
	    }
	  }

	  return overlapVolume;
	}

	const radiiDict = uffRadii;
	const massDict = atomicMasses;
	class PoreMat {
	  constructor(cifText) {
	    const cif = Atoms_1$1.readCif(cifText);
	    const atoms = cif[Object.keys(cif)[0]];
	    this.cell = atoms.get_cell();
	    this.volume = dot(cross$1(this.cell[0], this.cell[1]), this.cell[2]);
	    this.symbols = atoms.get_chemical_symbols();
	    let elementCounts = {};
	    this.symbols.forEach(number => elementCounts[number] = (elementCounts[number] || 0) + 1);
	    this.elementCounts = elementCounts;
	    this.positions = atoms.get_positions();
	    this.radii = {};
	    this.symbolSet = new Set(this.symbols);
	    this.symbolSet.forEach(symbol => {
	      this.radii[symbol] = radiiDict[symbol];
	    });
	    let mass = 0;

	    for (let [symbol, count] of Object.entries(elementCounts)) {
	      mass += massDict[symbol] * count;
	    }

	    this.mass = mass; // g/mol

	    mass = mass * 1.66053907 * 10 ** -24; // g

	    this.density = mass / this.volume;
	  }

	}
	Object.defineProperty(PoreMat.prototype, 'atomsVolume', {
	  get: function () {
	    let occupiedVolume = 0;

	    for (let [symbol, count] of Object.entries(this.elementCounts)) {
	      occupiedVolume += 4 / 3 * Math.PI * this.radii[symbol] ** 3 * count;
	    }

	    return occupiedVolume; // A^3
	  }
	});
	Object.defineProperty(PoreMat.prototype, 'overlapVolume', {
	  // This is the atomsVolume - overlapVolume
	  get: function () {
	    return computeOverlapVolume(this.positions, this.symbols, this.cell); // A^3
	  }
	});
	Object.defineProperty(PoreMat.prototype, 'occupiedVolume', {
	  // This is the atomsVolume - overlapVolume
	  get: function () {
	    return this.atomsVolume - this.overlapVolume; // A^3
	  }
	});
	Object.defineProperty(PoreMat.prototype, 'voidVolume', {
	  get: function () {
	    return this.volume - this.occupiedVolume; // A^3
	  }
	});
	Object.defineProperty(PoreMat.prototype, 'porosity', {
	  get: function () {
	    return this.voidVolume / this.volume; // unitless
	  }
	});

	exports.PoreMat = PoreMat;

	Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=poreprober.js.map
